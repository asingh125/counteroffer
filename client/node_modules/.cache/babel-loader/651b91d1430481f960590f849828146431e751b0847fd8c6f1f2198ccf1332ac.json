{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar DefaultRecordingSignaling = require('./recording');\nvar StateMachine = require('../statemachine');\nvar DefaultTimeout = require('../util/timeout');\nvar buildLogLevels = require('../util').buildLogLevels;\nvar DEFAULT_LOG_LEVEL = require('../util/constants').DEFAULT_LOG_LEVEL;\nvar Log = require('../util/log');\nvar _a = require('../util/twilio-video-errors'),\n  MediaConnectionError = _a.MediaConnectionError,\n  MediaDTLSTransportFailedError = _a.MediaDTLSTransportFailedError,\n  SignalingConnectionDisconnectedError = _a.SignalingConnectionDisconnectedError;\nvar nInstances = 0;\n/*\nRoomSignaling States\n-----------------------\n\n    +-----------+     +--------------+\n    |           |     |              |\n    | connected |---->| disconnected |\n    |           |     |              |\n    +-----------+     +--------------+\n          |  ^               ^\n          |  |               |\n          |  |   +--------------+\n          |  +---|              |\n          |      | reconnecting |\n          +----->|              |\n                 +--------------+\n\n*/\nvar states = {\n  connected: ['reconnecting', 'disconnected'],\n  reconnecting: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link Room} implementation\n * @extends StateMachine\n * @property {RTCPeerConnectionState} connectionState\n * @property {?Participant.SID} dominantSpeakerSid\n * @property {ParticipantSignaling} localParticipant\n * @property {RTCIceConnectionState} iceConnectionState\n * @property {string} name\n * @property {Map<string, RemoteParticipantSignaling>} participants\n * @property {RecordingSignaling} recording\n * @property {Room.SID} sid\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @property {string} signalingConnectionState - \"connected\",\n *   \"reconnecting\", or \"disconnected\"\n * @emits RoomSignaling#connectionStateChanged\n * @emits RoomSignaling#dominantSpeakerChanged\n * @emits RoomSignaling#iceConnectionStateChanged\n * @emits RoomSignaling#signalingConnectionStateChanged\n */\nvar RoomSignaling = /** @class */function (_super) {\n  __extends(RoomSignaling, _super);\n  /**\n   * Construct a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {Room.SID} sid\n   * @param {string} name\n   * @param {object} options\n   */\n  function RoomSignaling(localParticipant, sid, name, options) {\n    var _this = this;\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      RecordingSignaling: DefaultRecordingSignaling,\n      Timeout: DefaultTimeout\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    _this = _super.call(this, 'connected', states) || this;\n    var RecordingSignaling = options.RecordingSignaling;\n    var sessionTimeout = new options.Timeout(function () {\n      _this._disconnect(_this._reconnectingError);\n    }, options.sessionTimeout, false);\n    Object.defineProperties(_this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      _log: {\n        value: options.log ? options.log.createLog('default', _this) : new Log('default', _this, logLevels, options.loggerName)\n      },\n      _mediaConnectionIsReconnecting: {\n        writable: true,\n        value: false\n      },\n      _options: {\n        value: options\n      },\n      _reconnectingError: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeout: {\n        value: sessionTimeout\n      },\n      dominantSpeakerSid: {\n        enumerable: true,\n        value: null,\n        writable: true\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: name\n      },\n      participants: {\n        enumerable: true,\n        value: new Map()\n      },\n      recording: {\n        enumerable: true,\n        value: new RecordingSignaling()\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n    _this.on('connectionStateChanged', function () {\n      if (_this.connectionState === 'failed' && !['disconnected', 'failed'].includes(_this.iceConnectionState)) {\n        _this._disconnect(new MediaDTLSTransportFailedError());\n      }\n    });\n    _this.on('iceConnectionStateChanged', function () {\n      return maybeUpdateState(_this);\n    });\n    _this.on('signalingConnectionStateChanged', function () {\n      return maybeUpdateState(_this);\n    });\n    // NOTE(mmalavalli): In case \"iceConnectionState\" is already failed, update\n    // the RoomSignaling state. setTimeout() ensures that the state is updated\n    // after RoomV2's constructor is fully executed, thereby making \"signalingConnectionState\"\n    // available here.\n    setTimeout(function () {\n      return maybeUpdateState(_this);\n    });\n    return _this;\n  }\n  /**\n   * Disconnect, possibly with an Error.\n   * @private\n   * @param {Error} [error]\n   * @returns {boolean}\n   */\n  RoomSignaling.prototype._disconnect = function (error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      return true;\n    }\n    return false;\n  };\n  RoomSignaling.prototype.toString = function () {\n    return \"[RoomSignaling #\" + this._instanceId + \": \" + (this.localParticipant ? this.localParticipant.sid : 'null') + \"]\";\n  };\n  /**\n   * Connect {@link RemoteParticipantSignaling} to the {@link RoomSignaling}.\n   * @param {RemoteParticipantSignaling} participant\n   * @returns {boolean}\n   */\n  RoomSignaling.prototype.connectParticipant = function (participant) {\n    var self = this;\n    if (participant.state === 'disconnected') {\n      return false;\n    }\n    if (this.participants.has(participant.sid)) {\n      return false;\n    }\n    this.participants.set(participant.sid, participant);\n    participant.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        participant.removeListener('stateChanged', stateChanged);\n        self.participants.delete(participant.sid);\n        self.emit('participantDisconnected', participant);\n      }\n    });\n    this.emit('participantConnected', participant);\n    return true;\n  };\n  /**\n   * Disconnect.\n   * @returns {boolean}\n   */\n  RoomSignaling.prototype.disconnect = function () {\n    return this._disconnect();\n  };\n  /**\n   * Set (or unset) the Dominant Speaker.\n   * @param {?Participant.SID} dominantSpeakerSid\n   * @returns {void}\n   */\n  RoomSignaling.prototype.setDominantSpeaker = function (dominantSpeakerSid) {\n    this.dominantSpeakerSid = dominantSpeakerSid;\n    this.emit('dominantSpeakerChanged');\n  };\n  return RoomSignaling;\n}(StateMachine);\n/**\n * @event RoomSignaling#event:connectionStateChanged\n */\n/**\n * @event RoomSignaling#event:dominantSpeakerChanged\n */\n/**\n * {@link RemoteParticipantSignaling} connected to the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantConnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n/**\n * {@link RemoteParticipantSignaling} disconnected from the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantDisconnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n/**\n * @event RoomSignaling#event:iceConnectionStateChanged\n */\n/**\n * @event RoomSignaling#event:signalingConnectionStateChanged\n */\n/**\n * Maybe update the {@link RoomSignaling} state.\n * @param {RoomSignaling} roomSignaling\n */\nfunction maybeUpdateState(roomSignaling) {\n  if (roomSignaling.state === 'disconnected' || roomSignaling.signalingConnectionState === 'disconnected') {\n    roomSignaling._sessionTimeout.clear();\n    return;\n  }\n  var newState;\n  if (roomSignaling.signalingConnectionState === 'reconnecting') {\n    newState = roomSignaling.signalingConnectionState;\n  } else if (roomSignaling.iceConnectionState === 'failed') {\n    roomSignaling._mediaConnectionIsReconnecting = true;\n    newState = 'reconnecting';\n  } else if (roomSignaling.iceConnectionState === 'new' || roomSignaling.iceConnectionState === 'checking') {\n    newState = roomSignaling._mediaConnectionIsReconnecting ? 'reconnecting' : 'connected';\n  } else {\n    roomSignaling._mediaConnectionIsReconnecting = false;\n    roomSignaling._reconnectingError = null;\n    roomSignaling._sessionTimeout.clear();\n    newState = 'connected';\n  }\n  if (newState === roomSignaling.state) {\n    return;\n  }\n  if (newState === 'reconnecting') {\n    roomSignaling._reconnectingError = roomSignaling.signalingConnectionState === 'reconnecting' ? new SignalingConnectionDisconnectedError() : new MediaConnectionError();\n    roomSignaling._sessionTimeout.start();\n    roomSignaling.preempt(newState, null, [roomSignaling._reconnectingError]);\n  } else {\n    roomSignaling.preempt(newState);\n  }\n}\nmodule.exports = RoomSignaling;","map":{"version":3,"mappings":"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","names":["DefaultRecordingSignaling","require","StateMachine","DefaultTimeout","Log","MediaConnectionError","MediaDTLSTransportFailedError","SignalingConnectionDisconnectedError","nInstances","states","connected","reconnecting","disconnected","__extends","localParticipant","sid","name","options","Object","assign","logLevel","DEFAULT_LOG_LEVEL","RecordingSignaling","Timeout","logLevels","buildLogLevels","_this","sessionTimeout","_disconnect","_reconnectingError","defineProperties","_instanceId","value","_log","log","createLog","loggerName","_mediaConnectionIsReconnecting","writable","_options","_sessionTimeout","dominantSpeakerSid","enumerable","participants","Map","recording","on","connectionState","includes","iceConnectionState","setTimeout","RoomSignaling","error","state","preempt","participant","self","has","set","stateChanged","removeListener","delete","emit","maybeUpdateState","roomSignaling","signalingConnectionState","clear","newState","start","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/signaling/room.js"],"sourcesContent":["'use strict';\n\nconst DefaultRecordingSignaling = require('./recording');\nconst StateMachine = require('../statemachine');\nconst DefaultTimeout = require('../util/timeout');\nconst { buildLogLevels } = require('../util');\nconst { DEFAULT_LOG_LEVEL } = require('../util/constants');\nconst Log = require('../util/log');\n\nconst {\n  MediaConnectionError,\n  MediaDTLSTransportFailedError,\n  SignalingConnectionDisconnectedError\n} = require('../util/twilio-video-errors');\n\nlet nInstances = 0;\n\n/*\nRoomSignaling States\n-----------------------\n\n    +-----------+     +--------------+\n    |           |     |              |\n    | connected |---->| disconnected |\n    |           |     |              |\n    +-----------+     +--------------+\n          |  ^               ^\n          |  |               |\n          |  |   +--------------+\n          |  +---|              |\n          |      | reconnecting |\n          +----->|              |\n                 +--------------+\n\n*/\n\nconst states = {\n  connected: [\n    'reconnecting',\n    'disconnected'\n  ],\n  reconnecting: [\n    'connected',\n    'disconnected'\n  ],\n  disconnected: []\n};\n\n/**\n * A {@link Room} implementation\n * @extends StateMachine\n * @property {RTCPeerConnectionState} connectionState\n * @property {?Participant.SID} dominantSpeakerSid\n * @property {ParticipantSignaling} localParticipant\n * @property {RTCIceConnectionState} iceConnectionState\n * @property {string} name\n * @property {Map<string, RemoteParticipantSignaling>} participants\n * @property {RecordingSignaling} recording\n * @property {Room.SID} sid\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @property {string} signalingConnectionState - \"connected\",\n *   \"reconnecting\", or \"disconnected\"\n * @emits RoomSignaling#connectionStateChanged\n * @emits RoomSignaling#dominantSpeakerChanged\n * @emits RoomSignaling#iceConnectionStateChanged\n * @emits RoomSignaling#signalingConnectionStateChanged\n */\nclass RoomSignaling extends StateMachine {\n  /**\n   * Construct a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {Room.SID} sid\n   * @param {string} name\n   * @param {object} options\n   */\n  constructor(localParticipant, sid, name, options) {\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      RecordingSignaling: DefaultRecordingSignaling,\n      Timeout: DefaultTimeout\n    }, options);\n\n    const logLevels = buildLogLevels(options.logLevel);\n\n    super('connected', states);\n\n    const RecordingSignaling = options.RecordingSignaling;\n\n    const sessionTimeout = new options.Timeout(() => {\n      this._disconnect(this._reconnectingError);\n    }, options.sessionTimeout, false);\n\n    Object.defineProperties(this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      _log: {\n        value: options.log\n          ? options.log.createLog('default', this)\n          : new Log('default', this, logLevels, options.loggerName)\n      },\n      _mediaConnectionIsReconnecting: {\n        writable: true,\n        value: false\n      },\n      _options: {\n        value: options\n      },\n      _reconnectingError: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeout: {\n        value: sessionTimeout\n      },\n      dominantSpeakerSid: {\n        enumerable: true,\n        value: null,\n        writable: true\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: name\n      },\n      participants: {\n        enumerable: true,\n        value: new Map()\n      },\n      recording: {\n        enumerable: true,\n        value: new RecordingSignaling()\n      },\n      sid: {\n        enumerable: true,\n        value: sid\n      }\n    });\n\n    this.on('connectionStateChanged', () => {\n      if (this.connectionState === 'failed'\n        && !['disconnected', 'failed'].includes(this.iceConnectionState)) {\n        this._disconnect(new MediaDTLSTransportFailedError());\n      }\n    });\n\n    this.on('iceConnectionStateChanged', () => maybeUpdateState(this));\n    this.on('signalingConnectionStateChanged', () => maybeUpdateState(this));\n\n    // NOTE(mmalavalli): In case \"iceConnectionState\" is already failed, update\n    // the RoomSignaling state. setTimeout() ensures that the state is updated\n    // after RoomV2's constructor is fully executed, thereby making \"signalingConnectionState\"\n    // available here.\n    setTimeout(() => maybeUpdateState(this));\n  }\n\n  /**\n   * Disconnect, possibly with an Error.\n   * @private\n   * @param {Error} [error]\n   * @returns {boolean}\n   */\n  _disconnect(error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      return true;\n    }\n    return false;\n  }\n\n  toString() {\n    return `[RoomSignaling #${this._instanceId}: ${this.localParticipant ? this.localParticipant.sid : 'null'}]`;\n  }\n\n  /**\n   * Connect {@link RemoteParticipantSignaling} to the {@link RoomSignaling}.\n   * @param {RemoteParticipantSignaling} participant\n   * @returns {boolean}\n   */\n  connectParticipant(participant) {\n    const self = this;\n\n    if (participant.state === 'disconnected') {\n      return false;\n    }\n\n    if (this.participants.has(participant.sid)) {\n      return false;\n    }\n\n    this.participants.set(participant.sid, participant);\n\n    participant.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        participant.removeListener('stateChanged', stateChanged);\n        self.participants.delete(participant.sid);\n        self.emit('participantDisconnected', participant);\n      }\n    });\n\n    this.emit('participantConnected', participant);\n\n    return true;\n  }\n\n  /**\n   * Disconnect.\n   * @returns {boolean}\n   */\n  disconnect() {\n    return this._disconnect();\n  }\n\n  /**\n   * Set (or unset) the Dominant Speaker.\n   * @param {?Participant.SID} dominantSpeakerSid\n   * @returns {void}\n   */\n  setDominantSpeaker(dominantSpeakerSid) {\n    this.dominantSpeakerSid = dominantSpeakerSid;\n    this.emit('dominantSpeakerChanged');\n  }\n}\n\n/**\n * @event RoomSignaling#event:connectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:dominantSpeakerChanged\n */\n\n/**\n * {@link RemoteParticipantSignaling} connected to the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantConnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * {@link RemoteParticipantSignaling} disconnected from the {@link RoomSignaling}.\n * @event RoomSignaling#event:participantDisconnected\n * @param {RemoteParticipantSignaling} participantSignaling\n */\n\n/**\n * @event RoomSignaling#event:iceConnectionStateChanged\n */\n\n/**\n * @event RoomSignaling#event:signalingConnectionStateChanged\n */\n\n/**\n * Maybe update the {@link RoomSignaling} state.\n * @param {RoomSignaling} roomSignaling\n */\nfunction maybeUpdateState(roomSignaling) {\n  if (roomSignaling.state === 'disconnected' || roomSignaling.signalingConnectionState === 'disconnected') {\n    roomSignaling._sessionTimeout.clear();\n    return;\n  }\n\n  let newState;\n\n  if (roomSignaling.signalingConnectionState === 'reconnecting') {\n    newState = roomSignaling.signalingConnectionState;\n  } else if (roomSignaling.iceConnectionState === 'failed') {\n    roomSignaling._mediaConnectionIsReconnecting = true;\n    newState = 'reconnecting';\n  } else if (roomSignaling.iceConnectionState === 'new' || roomSignaling.iceConnectionState === 'checking') {\n    newState = roomSignaling._mediaConnectionIsReconnecting ? 'reconnecting' : 'connected';\n  } else {\n    roomSignaling._mediaConnectionIsReconnecting = false;\n    roomSignaling._reconnectingError = null;\n    roomSignaling._sessionTimeout.clear();\n    newState = 'connected';\n  }\n\n  if (newState === roomSignaling.state) {\n    return;\n  }\n\n  if (newState === 'reconnecting') {\n    roomSignaling._reconnectingError = roomSignaling.signalingConnectionState === 'reconnecting'\n      ? new SignalingConnectionDisconnectedError()\n      : new MediaConnectionError();\n    roomSignaling._sessionTimeout.start();\n    roomSignaling.preempt(newState, null, [roomSignaling._reconnectingError]);\n  } else {\n    roomSignaling.preempt(newState);\n  }\n}\n\nmodule.exports = RoomSignaling;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}