{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar _a = require('./util'),\n  flatMap = _a.flatMap,\n  guessBrowser = _a.guessBrowser,\n  guessBrowserVersion = _a.guessBrowserVersion;\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n  var trackStatsPromises = flatMap([[localAudioTracks, 'localAudioTrackStats', false], [localVideoTracks, 'localVideoTrackStats', false], [remoteAudioTracks, 'remoteAudioTrackStats', true], [remoteVideoTracks, 'remoteVideoTrackStats', true]], function (_a) {\n    var _b = __read(_a, 3),\n      tracks = _b[0],\n      statsArrayName = _b[1],\n      isRemote = _b[2];\n    return tracks.map(function (track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function (trackStatsArray) {\n        trackStatsArray.forEach(function (trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n  return Promise.all(trackStatsPromises).then(function () {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function (activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (typeof options.testForChrome !== 'undefined' || isChrome || typeof options.testForSafari !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (_a) {\n    var nominated = _a.nominated,\n      type = _a.type;\n    return type === 'candidate-pair' && nominated;\n  });\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    type: 'string'\n  }, {\n    key: 'port',\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type;\n    report[key] = typeof activeLocalCandidateStats[key] === type ? activeLocalCandidateStats[key] : key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type;\n    report[key] = typeof activeRemoteCandidateStats[key] === type ? activeRemoteCandidateStats[key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string',\n    fixup: function (state) {\n      return state === 'inprogress' ? 'in-progress' : state;\n    }\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type,\n      fixup = _a.fixup;\n    report[key] = typeof activeCandidatePairStats[key] === type ? fixup ? fixup(activeCandidatePairStats[key]) : activeCandidatePairStats[key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (_a) {\n    var nominated = _a.nominated,\n      type = _a.type;\n    return type === 'candidate-pair' && nominated;\n  });\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    ffKeys: ['address', 'ipAddress'],\n    type: 'string'\n  }, {\n    key: 'port',\n    ffKeys: ['portNumber'],\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    ffKeys: ['transport'],\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, _a) {\n    var ffKeys = _a.ffKeys,\n      key = _a.key,\n      type = _a.type;\n    var localStatKey = ffKeys && ffKeys.find(function (key) {\n      return key in activeLocalCandidateStats;\n    }) || key;\n    report[key] = typeof activeLocalCandidateStats[localStatKey] === type ? localStatKey === 'candidateType' ? candidateTypes[activeLocalCandidateStats[localStatKey]] || activeLocalCandidateStats[localStatKey] : activeLocalCandidateStats[localStatKey] : localStatKey === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, _a) {\n    var ffKeys = _a.ffKeys,\n      key = _a.key,\n      type = _a.type;\n    var remoteStatKey = ffKeys && ffKeys.find(function (key) {\n      return key in activeRemoteCandidateStats;\n    }) || key;\n    report[key] = typeof activeRemoteCandidateStats[remoteStatKey] === type ? remoteStatKey === 'candidateType' ? candidateTypes[activeRemoteCandidateStats[remoteStatKey]] || activeRemoteCandidateStats[remoteStatKey] : activeRemoteCandidateStats[remoteStatKey] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, _a) {\n    var key = _a.key,\n      type = _a.type;\n    report[key] = typeof activeCandidatePairStats[key] === type ? activeCandidatePairStats[key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function (_a) {\n      var track = _a.track;\n      return track;\n    }).filter(function (track) {\n      return track && track.kind === kind;\n    });\n  }\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n  return flatMap(peerConnection[getStreams](), function (stream) {\n    return stream[getTracks]();\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n  if (typeof options.testForSafari !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error(['getStats() is not supported on this version of Safari', 'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function (resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function (response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n    peerConnection.getStats(track).then(function (response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function (resolve, reject) {\n    peerConnection.getStats(track).then(function (response) {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function (report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n  var standardizedStats = {};\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n      return stats;\n    }, standardizedStats);\n  }\n  return standardizedStats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null;\n  // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n  var outbound = [];\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n  var localMedia = null;\n  response.forEach(function (stat) {\n    var type = stat.type;\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n      case 'media-source':\n        localMedia = stat;\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n  var isRemote = track && track.remoteSource;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n  mainSources.forEach(function (source) {\n    var standardizedStats = {};\n    var statSources = [source, localMedia, track, codec, remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function (statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n      return sourceFound ? sourceFound[name] : null;\n    }\n    var ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n    var mimeType = getStatValue('mimeType');\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n    var roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n    var jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n    var frameWidth = getStatValue('frameWidth');\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track.frameWidth;\n      }\n    }\n    var frameHeight = getStatValue('frameHeight');\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track.frameHeight;\n      }\n    }\n    var framesPerSecond = getStatValue('framesPerSecond');\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n    var bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n    var bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n    var packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n    var packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n    var packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n    var audioLevel = getStatValue('audioLevel');\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n    var framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n    var framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n    stats.push(standardizedStats);\n  });\n  return stats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  if (response === void 0) {\n    response = new Map();\n  }\n  var inbound = null;\n  var outbound = null;\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(function (stat) {\n    var isRemote = stat.isRemote,\n      remoteId = stat.remoteId,\n      type = stat.type;\n    if (isRemote) {\n      return;\n    }\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(remoteId);\n        break;\n    }\n  });\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n  var bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n  var packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n  var packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n  var roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n  var jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n  var frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n  var bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n  var packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n  var frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n  var framesEncoded = getStatValue('framesEncoded');\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n  var framesDecoded = getStatValue('framesDecoded');\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n  return standardizedStats;\n}\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\nmodule.exports = getStats;","map":{"version":3,"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;AAEN,SAAiDA,OAAO,CAAC,QAAQ,CAAC;EAAhEC,OAAO;EAAEC,YAAY;EAAEC,mBAAmB,yBAAsB;AAChE,gBAAY,GAAKH,OAAO,CAAC,YAAY,CAAC,aAA1B;AAEpB,IAAMI,KAAK,GAAGF,YAAY,EAAE;AAC5B,IAAMG,YAAY,GAAGF,mBAAmB,EAAE;AAC1C,IAAMG,QAAQ,GAAGF,KAAK,KAAK,QAAQ;AACnC,IAAMG,SAAS,GAAGH,KAAK,KAAK,SAAS;AACrC,IAAMI,QAAQ,GAAGJ,KAAK,KAAK,QAAQ;AAEnC,IAAMK,kBAAkB,GAAGH,QAAQ,GAAGD,YAAY,CAACK,KAAK,GAAG,IAAI;AAE/D,IAAMC,6BAA6B,GAAG,KAAK;AAE3C;;;;;;AAMA,SAASC,QAAQ,CAACC,cAAc,EAAEC,OAAO;EACvC,IAAI,EAAED,cAAc,IAAI,OAAOA,cAAc,CAACD,QAAQ,KAAK,UAAU,CAAC,EAAE;IACtE,OAAOG,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,gDAAgD,CAAC,CAAC;;EAEpF,OAAOC,SAAS,CAACL,cAAc,EAAEC,OAAO,CAAC;AAC3C;AAEA;;;;;;AAMA,SAASI,SAAS,CAACL,cAAc,EAAEC,OAAO;EACxC,IAAMK,gBAAgB,GAAGC,SAAS,CAACP,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC;EACpE,IAAMQ,gBAAgB,GAAGD,SAAS,CAACP,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC;EACpE,IAAMS,iBAAiB,GAAGF,SAAS,CAACP,cAAc,EAAE,OAAO,CAAC;EAC5D,IAAMU,iBAAiB,GAAGH,SAAS,CAACP,cAAc,EAAE,OAAO,CAAC;EAE5D,IAAMW,aAAa,GAAG;IACpBC,sBAAsB,EAAE,IAAI;IAC5BC,oBAAoB,EAAE,EAAE;IACxBC,oBAAoB,EAAE,EAAE;IACxBC,qBAAqB,EAAE,EAAE;IACzBC,qBAAqB,EAAE;GACxB;EAED,IAAMC,kBAAkB,GAAG7B,OAAO,CAAC,CACjC,CAACkB,gBAAgB,EAAE,sBAAsB,EAAE,KAAK,CAAC,EACjD,CAACE,gBAAgB,EAAE,sBAAsB,EAAE,KAAK,CAAC,EACjD,CAACC,iBAAiB,EAAE,uBAAuB,EAAE,IAAI,CAAC,EAClD,CAACC,iBAAiB,EAAE,uBAAuB,EAAE,IAAI,CAAC,CACnD,EAAE,UAACQ,EAAkC;QAAlCC,kBAAkC;MAAjCC,MAAM;MAAEC,cAAc;MAAEC,QAAQ;IACnC,OAAOF,MAAM,CAACG,GAAG,CAAC,eAAK;MACrB,OAAOC,aAAa,CAACxB,cAAc,EAAEyB,KAAK,EAAEC,MAAM,CAACC,MAAM,CAAC;QACxDL,QAAQ,EAAEA;OACX,EAAErB,OAAO,CAAC,CAAC,CAAC2B,IAAI,CAAC,yBAAe;QAC/BC,eAAe,CAACC,OAAO,CAAC,oBAAU;UAChCC,UAAU,CAACC,OAAO,GAAGP,KAAK,CAACQ,EAAE;UAC7BtB,aAAa,CAACU,cAAc,CAAC,CAACa,IAAI,CAACH,UAAU,CAAC;QAChD,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO7B,OAAO,CAACiC,GAAG,CAAClB,kBAAkB,CAAC,CAACW,IAAI,CAAC;IAC1C,OAAOQ,8BAA8B,CAACpC,cAAc,EAAEC,OAAO,CAAC;EAChE,CAAC,CAAC,CAAC2B,IAAI,CAAC,2CAAiC;IACvCjB,aAAa,CAACC,sBAAsB,GAAGyB,iCAAiC;IACxE,OAAO1B,aAAa;EACtB,CAAC,CAAC;AACJ;AAEA;;;;;;;AAOA,SAASyB,8BAA8B,CAACpC,cAAc,EAAEC,OAAY;EAAZ;IAAAA,YAAY;EAAA;EAClE,IAAI,OAAOA,OAAO,CAACqC,aAAa,KAAK,WAAW,IAAI7C,QAAQ,IACvD,OAAOQ,OAAO,CAACsC,aAAa,KAAM,WAAW,IAAI5C,QAAQ,EAAE;IAC9D,OAAOK,cAAc,CAACD,QAAQ,EAAE,CAAC6B,IAAI,CACnCY,oDAAoD,CAAC;;EAEzD,IAAI,OAAOvC,OAAO,CAACwC,cAAc,KAAK,WAAW,IAAI/C,SAAS,EAAE;IAC9D,OAAOM,cAAc,CAACD,QAAQ,EAAE,CAAC6B,IAAI,CAACc,6CAA6C,CAAC;;EAEtF,OAAOxC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,4CAA4C,CAAC,CAAC;AAChF;AAEA;;;;;AAKA,SAASoC,oDAAoD,CAACG,KAAK;EACjE,IAAMC,wBAAwB,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,EAAE,CAAC,CAACC,IAAI,CAC9D,UAAC9B,EAAmB;QAAjB+B,SAAS;MAAEC,IAAI;IAAO,WAAI,KAAK,gBAAgB,IAAID,SAAS;EAAtC,CAAsC,CAChE;EAED,IAAI,CAACL,wBAAwB,EAAE;IAC7B,OAAO,IAAI;;EAGb,IAAMO,yBAAyB,GAAGR,KAAK,CAACS,GAAG,CAACR,wBAAwB,CAACS,gBAAgB,CAAC;EACtF,IAAMC,0BAA0B,GAAGX,KAAK,CAACS,GAAG,CAACR,wBAAwB,CAACW,iBAAiB,CAAC;EAExF,IAAMC,8BAA8B,GAAG,CACrC;IAAEC,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACxC;IAAEO,GAAG,EAAE,IAAI;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC7B;IAAEO,GAAG,EAAE,MAAM;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC/B;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAEO,GAAG,EAAE,KAAK;IAAEP,IAAI,EAAE;EAAQ,CAAE,CAC/B;EAED,IAAMQ,mCAAmC,GAAGF,8BAA8B,CAACG,MAAM,CAAC,CAChF;IAAEF,GAAG,EAAE,SAAS;IAAEP,IAAI,EAAE;EAAS,CAAE,EACnC;IAAEO,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,CACzC,CAAC;EAEF,IAAMU,qCAAqC,GAAGT,yBAAyB,GACnEO,mCAAmC,CAACG,MAAM,CAAC,UAACC,MAAM,EAAE5C,EAAa;QAAXuC,GAAG;MAAEP,IAAI;IAC/DY,MAAM,CAACL,GAAG,CAAC,GAAG,OAAON,yBAAyB,CAACM,GAAG,CAAC,KAAKP,IAAI,GACxDC,yBAAyB,CAACM,GAAG,CAAC,GAC9BA,GAAG,KAAK,SAAS,GAAG,KAAK,GAAG,IAAI;IACpC,OAAOK,MAAM;EACf,CAAC,EAAE,EAAE,CAAC,GACJ,IAAI;EAER,IAAMC,sCAAsC,GAAGT,0BAA0B,GACrEE,8BAA8B,CAACK,MAAM,CAAC,UAACC,MAAM,EAAE5C,EAAa;QAAXuC,GAAG;MAAEP,IAAI;IAC1DY,MAAM,CAACL,GAAG,CAAC,GAAG,OAAOH,0BAA0B,CAACG,GAAG,CAAC,KAAKP,IAAI,GACzDI,0BAA0B,CAACG,GAAG,CAAC,GAC/B,IAAI;IACR,OAAOK,MAAM;EACf,CAAC,EAAE,EAAE,CAAC,GACJ,IAAI;EAER,OAAO,CACL;IAAEL,GAAG,EAAE,0BAA0B;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnD;IAAEO,GAAG,EAAE,0BAA0B;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnD;IAAEO,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACxC;IAAEO,GAAG,EAAE,WAAW;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACpC;IAAEO,GAAG,EAAE,qBAAqB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC9C;IAAEO,GAAG,EAAE,sBAAsB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC/C;IAAEO,GAAG,EAAE,6BAA6B;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACtD;IAAEO,GAAG,EAAE,yBAAyB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAClD;IAAEO,GAAG,EAAE,WAAW;IAAEP,IAAI,EAAE;EAAS,CAAE,EACrC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAS,CAAE,EACpC;IAAEO,GAAG,EAAE,kBAAkB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC3C;IAAEO,GAAG,EAAE,cAAc;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACvC;IAAEO,GAAG,EAAE,mBAAmB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC5C;IAAEO,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACxC;IAAEO,GAAG,EAAE,yBAAyB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAClD;IAAEO,GAAG,EAAE,qBAAqB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC9C;IAAEO,GAAG,EAAE,OAAO;IAAEP,IAAI,EAAE,QAAQ;IAAEc,KAAK,EAAE,eAAK;MAAM,OAAOC,KAAK,KAAK,YAAY,GAAG,aAAa,GAAGA,KAAK;IAAE;EAAC,CAAE,EAC5G;IAAER,GAAG,EAAE,oBAAoB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC7C;IAAEO,GAAG,EAAE,aAAa;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACtC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAS,CAAE,CACrC,CAACW,MAAM,CAAC,UAACC,MAAM,EAAE5C,EAAoB;QAAlBuC,GAAG;MAAEP,IAAI;MAAEc,KAAK;IAClCF,MAAM,CAACL,GAAG,CAAC,GAAG,OAAOb,wBAAwB,CAACa,GAAG,CAAC,KAAKP,IAAI,GACtDc,KAAK,GAAGA,KAAK,CAACpB,wBAAwB,CAACa,GAAG,CAAC,CAAC,GAAGb,wBAAwB,CAACa,GAAG,CAAC,GAC7E,IAAI;IACR,OAAOK,MAAM;EACf,CAAC,EAAE;IACDI,cAAc,EAAEN,qCAAqC;IACrDO,eAAe,EAAEJ;GAClB,CAAC;AACJ;AAEA;;;;;AAKA,SAASrB,6CAA6C,CAACC,KAAK;EAC1D,IAAMC,wBAAwB,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,EAAE,CAAC,CAACC,IAAI,CAC9D,UAAC9B,EAAmB;QAAjB+B,SAAS;MAAEC,IAAI;IAAO,WAAI,KAAK,gBAAgB,IAAID,SAAS;EAAtC,CAAsC,CAChE;EAED,IAAI,CAACL,wBAAwB,EAAE;IAC7B,OAAO,IAAI;;EAGb,IAAMO,yBAAyB,GAAGR,KAAK,CAACS,GAAG,CAACR,wBAAwB,CAACS,gBAAgB,CAAC;EACtF,IAAMC,0BAA0B,GAAGX,KAAK,CAACS,GAAG,CAACR,wBAAwB,CAACW,iBAAiB,CAAC;EAExF,IAAMC,8BAA8B,GAAG,CACrC;IAAEC,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACxC;IAAEO,GAAG,EAAE,IAAI;IAAEW,MAAM,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;IAAElB,IAAI,EAAE;EAAQ,CAAE,EAC/D;IAAEO,GAAG,EAAE,MAAM;IAAEW,MAAM,EAAE,CAAC,YAAY,CAAC;IAAElB,IAAI,EAAE;EAAQ,CAAE,EACvD;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAEO,GAAG,EAAE,UAAU;IAAEW,MAAM,EAAE,CAAC,WAAW,CAAC;IAAElB,IAAI,EAAE;EAAQ,CAAE,EAC1D;IAAEO,GAAG,EAAE,KAAK;IAAEP,IAAI,EAAE;EAAQ,CAAE,CAC/B;EAED,IAAMQ,mCAAmC,GAAGF,8BAA8B,CAACG,MAAM,CAAC,CAChF;IAAEF,GAAG,EAAE,SAAS;IAAEP,IAAI,EAAE;EAAS,CAAE,EACnC;IAAEO,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,CACzC,CAAC;EAEF,IAAMmB,cAAc,GAAG;IACrBC,IAAI,EAAE,MAAM;IACZC,aAAa,EAAE,OAAO;IACtBC,OAAO,EAAE,OAAO;IAChBC,eAAe,EAAE;GAClB;EAED,IAAMb,qCAAqC,GAAGT,yBAAyB,GACnEO,mCAAmC,CAACG,MAAM,CAAC,UAACC,MAAM,EAAE5C,EAAqB;QAAnBkD,MAAM;MAAEX,GAAG;MAAEP,IAAI;IACvE,IAAMwB,YAAY,GAAGN,MAAM,IAAIA,MAAM,CAACpB,IAAI,CAAC,aAAG;MAAI,UAAG,IAAIG,yBAAyB;IAAhC,CAAgC,CAAC,IAAIM,GAAG;IAC1FK,MAAM,CAACL,GAAG,CAAC,GAAG,OAAON,yBAAyB,CAACuB,YAAY,CAAC,KAAKxB,IAAI,GACjEwB,YAAY,KAAK,eAAe,GAC9BL,cAAc,CAAClB,yBAAyB,CAACuB,YAAY,CAAC,CAAC,IAAIvB,yBAAyB,CAACuB,YAAY,CAAC,GAClGvB,yBAAyB,CAACuB,YAAY,CAAC,GACzCA,YAAY,KAAK,SAAS,GAAG,KAAK,GAAG,IAAI;IAC7C,OAAOZ,MAAM;EACf,CAAC,EAAE,EAAE,CAAC,GACJ,IAAI;EAER,IAAMC,sCAAsC,GAAGT,0BAA0B,GACrEE,8BAA8B,CAACK,MAAM,CAAC,UAACC,MAAM,EAAE5C,EAAqB;QAAnBkD,MAAM;MAAEX,GAAG;MAAEP,IAAI;IAClE,IAAMyB,aAAa,GAAGP,MAAM,IAAIA,MAAM,CAACpB,IAAI,CAAC,aAAG;MAAI,UAAG,IAAIM,0BAA0B;IAAjC,CAAiC,CAAC,IAAIG,GAAG;IAC5FK,MAAM,CAACL,GAAG,CAAC,GAAG,OAAOH,0BAA0B,CAACqB,aAAa,CAAC,KAAKzB,IAAI,GACnEyB,aAAa,KAAK,eAAe,GAC/BN,cAAc,CAACf,0BAA0B,CAACqB,aAAa,CAAC,CAAC,IAAIrB,0BAA0B,CAACqB,aAAa,CAAC,GACtGrB,0BAA0B,CAACqB,aAAa,CAAC,GAC3C,IAAI;IACR,OAAOb,MAAM;EACf,CAAC,EAAE,EAAE,CAAC,GACJ,IAAI;EAER,OAAO,CACL;IAAEL,GAAG,EAAE,0BAA0B;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnD;IAAEO,GAAG,EAAE,0BAA0B;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnD;IAAEO,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACxC;IAAEO,GAAG,EAAE,WAAW;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACpC;IAAEO,GAAG,EAAE,qBAAqB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC9C;IAAEO,GAAG,EAAE,sBAAsB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC/C;IAAEO,GAAG,EAAE,6BAA6B;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACtD;IAAEO,GAAG,EAAE,yBAAyB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAClD;IAAEO,GAAG,EAAE,WAAW;IAAEP,IAAI,EAAE;EAAS,CAAE,EACrC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAS,CAAE,EACpC;IAAEO,GAAG,EAAE,kBAAkB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC3C;IAAEO,GAAG,EAAE,cAAc;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACvC;IAAEO,GAAG,EAAE,mBAAmB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC5C;IAAEO,GAAG,EAAE,eAAe;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACxC;IAAEO,GAAG,EAAE,yBAAyB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAClD;IAAEO,GAAG,EAAE,qBAAqB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC9C;IAAEO,GAAG,EAAE,OAAO;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAChC;IAAEO,GAAG,EAAE,oBAAoB;IAAEP,IAAI,EAAE;EAAQ,CAAE,EAC7C;IAAEO,GAAG,EAAE,aAAa;IAAEP,IAAI,EAAE;EAAQ,CAAE,EACtC;IAAEO,GAAG,EAAE,UAAU;IAAEP,IAAI,EAAE;EAAS,CAAE,CACrC,CAACW,MAAM,CAAC,UAACC,MAAM,EAAE5C,EAAa;QAAXuC,GAAG;MAAEP,IAAI;IAC3BY,MAAM,CAACL,GAAG,CAAC,GAAG,OAAOb,wBAAwB,CAACa,GAAG,CAAC,KAAKP,IAAI,GACvDN,wBAAwB,CAACa,GAAG,CAAC,GAC7B,IAAI;IACR,OAAOK,MAAM;EACf,CAAC,EAAE;IACDI,cAAc,EAAEN,qCAAqC;IACrDO,eAAe,EAAEJ;GAClB,CAAC;AACJ;AAEA;;;;;;;AAOA,SAASxD,SAAS,CAACP,cAAc,EAAE4E,IAAI,EAAEC,aAAa;EACpD,IAAMC,qBAAqB,GAAGD,aAAa,KAAK,OAAO,GAAG,YAAY,GAAG,cAAc;EACvF,IAAI7E,cAAc,CAAC8E,qBAAqB,CAAC,EAAE;IACzC,OAAO9E,cAAc,CAAC8E,qBAAqB,CAAC,EAAE,CAC3CvD,GAAG,CAAC,UAACL,EAAS;UAAPO,KAAK;MAAO,YAAK;IAAL,CAAK,CAAC,CACzBsD,MAAM,CAAC,eAAK;MAAI,YAAK,IAAItD,KAAK,CAACmD,IAAI,KAAKA,IAAI;IAA5B,CAA4B,CAAC;;EAElD,IAAMI,UAAU,GAAGH,aAAa,KAAK,OAAO,GAAG,iBAAiB,GAAG,kBAAkB;EACrF,IAAMtE,SAAS,GAAGqE,IAAI,KAAK,OAAO,GAAG,gBAAgB,GAAG,gBAAgB;EACxE,OAAOxF,OAAO,CAACY,cAAc,CAACgF,UAAU,CAAC,EAAE,EAAE,gBAAM;IAAI,aAAM,CAACzE,SAAS,CAAC,EAAE;EAAnB,CAAmB,CAAC;AAC7E;AAEA;;;;;;;AAOA,SAASiB,aAAa,CAACxB,cAAc,EAAEyB,KAAK,EAAExB,OAAY;EAAZ;IAAAA,YAAY;EAAA;EACxD,IAAI,OAAOA,OAAO,CAACqC,aAAa,KAAK,WAAW,IAAI7C,QAAQ,EAAE;IAC5D,OAAOwF,2BAA2B,CAACjF,cAAc,EAAEyB,KAAK,CAAC;;EAE3D,IAAI,OAAOxB,OAAO,CAACwC,cAAc,KAAM,WAAW,IAAI/C,SAAS,EAAE;IAC/D,OAAOwF,oBAAoB,CAAClF,cAAc,EAAEyB,KAAK,EAAExB,OAAO,CAACqB,QAAQ,CAAC;;EAEtE,IAAI,OAAOrB,OAAO,CAACsC,aAAa,KAAM,WAAW,IAAI5C,QAAQ,EAAE;IAC7D,IAAI,OAAOM,OAAO,CAACsC,aAAa,KAAM,WAAW,IAAI4C,YAAY,EAAE,KAAK,SAAS,EAAE;MACjF,OAAOF,2BAA2B,CAACjF,cAAc,EAAEyB,KAAK,CAAC;;IAE3D;IACA;IACA;IACA,OAAOvB,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,CAC9B,uDAAuD,EACvD,iEAAiE,CAClE,CAACgF,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEf,OAAOlF,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,4CAA4C,CAAC,CAAC;AAChF;AAEA;;;;;;AAMA,SAAS6E,2BAA2B,CAACjF,cAAc,EAAEyB,KAAK;EACxD,OAAO,IAAIvB,OAAO,CAAC,UAACmF,OAAO,EAAElF,MAAM;IACjC,IAAIP,kBAAkB,IAAIA,kBAAkB,GAAG,EAAE,EAAE;MACjDI,cAAc,CAACD,QAAQ,CAAC,kBAAQ;QAC9BsF,OAAO,CAAC,CAACC,4BAA4B,CAACC,QAAQ,EAAE9D,KAAK,CAAC,CAAC,CAAC;MAC1D,CAAC,EAAE,IAAI,EAAEtB,MAAM,CAAC;MAChB;;IAEFH,cAAc,CAACD,QAAQ,CAAC0B,KAAK,CAAC,CAACG,IAAI,CAAC,kBAAQ;MAC1CyD,OAAO,CAACG,8BAA8B,CAACD,QAAQ,CAAC,CAAC;IACnD,CAAC,EAAEpF,MAAM,CAAC;EACZ,CAAC,CAAC;AACJ;AAEA;;;;;;;AAOA,SAAS+E,oBAAoB,CAAClF,cAAc,EAAEyB,KAAK,EAAEH,QAAQ;EAC3D,OAAO,IAAIpB,OAAO,CAAC,UAACmF,OAAO,EAAElF,MAAM;IACjCH,cAAc,CAACD,QAAQ,CAAC0B,KAAK,CAAC,CAACG,IAAI,CAAC,kBAAQ;MAC1CyD,OAAO,CAAC,CAACI,uBAAuB,CAACF,QAAQ,EAAEjE,QAAQ,CAAC,CAAC,CAAC;IACxD,CAAC,EAAEnB,MAAM,CAAC;EACZ,CAAC,CAAC;AACJ;AAEA;;;;;;AAMA,SAASmF,4BAA4B,CAACC,QAAQ,EAAE9D,KAAK;EACnD,IAAMiE,UAAU,GAAGH,QAAQ,CAACI,MAAM,EAAE,CAAC3C,IAAI,CAAC,gBAAM;IAC9C,OAAOc,MAAM,CAACZ,IAAI,KAAK,MAAM,IAAIY,MAAM,CAAC8B,IAAI,CAAC,aAAa,CAAC,KAAKnE,KAAK,CAACQ,EAAE;EAC1E,CAAC,CAAC;EAEF,IAAI4D,iBAAiB,GAAG,EAAE;EAE1B,IAAIH,UAAU,EAAE;IACdG,iBAAiB,CAACC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACP,UAAU,CAACI,SAAS,CAAC,CAAC;IACtED,iBAAiB,GAAGH,UAAU,CAACQ,KAAK,EAAE,CAACrC,MAAM,CAAC,UAAClB,KAAK,EAAEwD,IAAI;MACxD,QAAQA,IAAI;QACV,KAAK,eAAe;UAClBxD,KAAK,CAACyD,SAAS,GAAGV,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC;UACvC;QACF,KAAK,SAAS;UACZxD,KAAK,CAAC0D,aAAa,GAAGJ,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACnD;QACF,KAAK,oBAAoB;UACvBxD,KAAK,CAAC2D,MAAM,GAAGL,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UAC5C;QACF,KAAK,qBAAqB;UACxBxD,KAAK,CAAC4D,eAAe,GAAGN,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACrD;QACF,KAAK,sBAAsB;UACzBxD,KAAK,CAAC6D,gBAAgB,GAAGP,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACtD;QACF,KAAK,oBAAoB;UACvBxD,KAAK,CAAC8D,cAAc,GAAGR,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACpD;QACF,KAAK,qBAAqB;UACxBxD,KAAK,CAAC+D,eAAe,GAAGT,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACrD;QACF,KAAK,wBAAwB;UAC3BxD,KAAK,CAACgE,kBAAkB,GAAGV,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACxD;QACF,KAAK,yBAAyB;UAC5BxD,KAAK,CAACiE,mBAAmB,GAAGX,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACzD;QACF,KAAK,oBAAoB;UACvBxD,KAAK,CAACkE,cAAc,GAAGZ,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACpD;QACF,KAAK,mBAAmB;UACtBxD,KAAK,CAACmE,aAAa,GAAGb,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACnD;QACF,KAAK,uBAAuB;UAC1BxD,KAAK,CAACoE,iBAAiB,GAAGd,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UACvD;QACF,KAAK,MAAM;UACTxD,KAAK,CAACwD,IAAI,CAAC,GAAGT,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC;UACnC;QACF,KAAK,eAAe;QACpB,KAAK,WAAW;QAChB,KAAK,aAAa;QAClB,KAAK,iBAAiB;QACtB,KAAK,aAAa;QAClB,KAAK,iBAAiB;QACtB,KAAK,kBAAkB;UACrBxD,KAAK,CAACwD,IAAI,CAAC,GAAGF,MAAM,CAACP,UAAU,CAACE,IAAI,CAACO,IAAI,CAAC,CAAC;UAC3C;MAAM;MAGV,OAAOxD,KAAK;IACd,CAAC,EAAEkD,iBAAiB,CAAC;;EAGvB,OAAOA,iBAAiB;AAC1B;AAEA;;;;;AAKA,SAASL,8BAA8B,CAACD,QAAQ;EAC9C,IAAIyB,OAAO,GAAG,IAAI;EAElB;EACA;EACA,IAAMC,QAAQ,GAAG,EAAE;EAEnB,IAAIC,aAAa,GAAG,IAAI;EACxB,IAAIC,cAAc,GAAG,IAAI;EACzB,IAAI1F,KAAK,GAAG,IAAI;EAChB,IAAI2F,KAAK,GAAG,IAAI;EAChB,IAAIC,UAAU,GAAG,IAAI;EAErB9B,QAAQ,CAACzD,OAAO,CAAC,cAAI;IACX,QAAI,GAAK8D,IAAI,KAAT;IACZ,QAAQ1C,IAAI;MACV,KAAK,aAAa;QAChB8D,OAAO,GAAGpB,IAAI;QACd;MACF,KAAK,cAAc;QACjBqB,QAAQ,CAAC/E,IAAI,CAAC0D,IAAI,CAAC;QACnB;MACF,KAAK,cAAc;QACjByB,UAAU,GAAGzB,IAAI;QACjB;MACF,KAAK,OAAO;QACVnE,KAAK,GAAGmE,IAAI;QACZ;MACF,KAAK,OAAO;QACVwB,KAAK,GAAGxB,IAAI;QACZ;MACF,KAAK,oBAAoB;QACvBsB,aAAa,GAAGtB,IAAI;QACpB;MACF,KAAK,qBAAqB;QACxBuB,cAAc,GAAGvB,IAAI;QACrB;IAAM;EAEZ,CAAC,CAAC;EAEF,IAAMtE,QAAQ,GAAGG,KAAK,IAAIA,KAAK,CAAC6F,YAAY;EAC5C,IAAMC,WAAW,GAAGjG,QAAQ,GAAG,CAAC0F,OAAO,CAAC,GAAGC,QAAQ;EACnD,IAAMtE,KAAK,GAAG,EAAE;EAChB,IAAM2E,YAAY,GAAGhG,QAAQ,GAAG6F,cAAc,GAAGD,aAAa,CAAC,CAAC;EAEhEK,WAAW,CAACzF,OAAO,CAAC,gBAAM;IACxB,IAAM+D,iBAAiB,GAAG,EAAE;IAC5B,IAAM2B,WAAW,GAAG,CAClBC,MAAM,EACNJ,UAAU,EACV5F,KAAK,EACL2F,KAAK,EACLE,YAAY,IAAIA,YAAY,CAACI,IAAI,KAAKD,MAAM,CAACC,IAAI,GAAGJ,YAAY,GAAG,IAAI,CAAE;IAAA,CAC1E;;IAED,SAASK,YAAY,CAACxB,IAAI;MACxB,IAAMyB,WAAW,GAAGJ,WAAW,CAACxE,IAAI,CAAC,oBAAU;QAC7C,OAAO6E,UAAU,IAAI,OAAOA,UAAU,CAAC1B,IAAI,CAAC,KAAK,WAAW;MAC9D,CAAC,CAAC,IAAI,IAAI;MAEV,OAAOyB,WAAW,GAAGA,WAAW,CAACzB,IAAI,CAAC,GAAG,IAAI;IAC/C;IAEA,IAAMuB,IAAI,GAAGC,YAAY,CAAC,MAAM,CAAC;IACjC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5B7B,iBAAiB,CAAC6B,IAAI,GAAGI,MAAM,CAACJ,IAAI,CAAC;;IAGvC,IAAM5B,SAAS,GAAG6B,YAAY,CAAC,WAAW,CAAC;IAC3C9B,iBAAiB,CAACC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACF,SAAS,CAAC;IAEnD,IAAIiC,QAAQ,GAAGJ,YAAY,CAAC,UAAU,CAAC;IACvC,IAAI,OAAOI,QAAQ,KAAK,QAAQ,EAAE;MAChCA,QAAQ,GAAGA,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;MAC9BnC,iBAAiB,CAACO,SAAS,GAAG2B,QAAQ,CAACA,QAAQ,CAACE,MAAM,GAAG,CAAC,CAAC;;IAG7D,IAAM5B,aAAa,GAAGsB,YAAY,CAAC,eAAe,CAAC;IACnD,IAAI,OAAOtB,aAAa,KAAK,QAAQ,EAAE;MACrCR,iBAAiB,CAACQ,aAAa,GAAGN,IAAI,CAACC,KAAK,CAACK,aAAa,GAAG,IAAI,CAAC;;IAGpE,IAAMC,MAAM,GAAGqB,YAAY,CAAC,QAAQ,CAAC;IACrC,IAAI,OAAOrB,MAAM,KAAK,QAAQ,EAAE;MAC9BT,iBAAiB,CAACS,MAAM,GAAGP,IAAI,CAACC,KAAK,CAACM,MAAM,GAAG,IAAI,CAAC;;IAGtD,IAAM4B,UAAU,GAAGP,YAAY,CAAC,YAAY,CAAC;IAC7C,IAAI,OAAOO,UAAU,KAAK,QAAQ,EAAE;MAClC,IAAI5G,QAAQ,EAAE;QACZuE,iBAAiB,CAACc,kBAAkB,GAAGuB,UAAU;OAClD,MAAM;QACLrC,iBAAiB,CAACY,cAAc,GAAGyB,UAAU;QAC7CrC,iBAAiB,CAACU,eAAe,GAAG9E,KAAK,CAACyG,UAAU;;;IAIxD,IAAMC,WAAW,GAAGR,YAAY,CAAC,aAAa,CAAC;IAC/C,IAAI,OAAOQ,WAAW,KAAK,QAAQ,EAAE;MACnC,IAAI7G,QAAQ,EAAE;QACZuE,iBAAiB,CAACe,mBAAmB,GAAGuB,WAAW;OACpD,MAAM;QACLtC,iBAAiB,CAACa,eAAe,GAAGyB,WAAW;QAC/CtC,iBAAiB,CAACW,gBAAgB,GAAG/E,KAAK,CAAC0G,WAAW;;;IAI1D,IAAMC,eAAe,GAAGT,YAAY,CAAC,iBAAiB,CAAC;IACvD,IAAI,OAAOS,eAAe,KAAK,QAAQ,EAAE;MACvCvC,iBAAiB,CAACvE,QAAQ,GAAG,mBAAmB,GAAG,eAAe,CAAC,GAAG8G,eAAe;;IAGvF,IAAMC,aAAa,GAAGV,YAAY,CAAC,eAAe,CAAC;IACnD,IAAI,OAAOU,aAAa,KAAK,QAAQ,EAAE;MACrCxC,iBAAiB,CAACwC,aAAa,GAAGA,aAAa;;IAGjD,IAAMC,SAAS,GAAGX,YAAY,CAAC,WAAW,CAAC;IAC3C,IAAI,OAAOW,SAAS,KAAK,QAAQ,EAAE;MACjCzC,iBAAiB,CAACyC,SAAS,GAAGA,SAAS;;IAGzC,IAAMC,WAAW,GAAGZ,YAAY,CAAC,aAAa,CAAC;IAC/C,IAAI,OAAOY,WAAW,KAAK,QAAQ,EAAE;MACnC1C,iBAAiB,CAAC0C,WAAW,GAAGA,WAAW;;IAG7C,IAAMC,eAAe,GAAGb,YAAY,CAAC,iBAAiB,CAAC;IACvD,IAAI,OAAOa,eAAe,KAAK,QAAQ,EAAE;MACvC3C,iBAAiB,CAAC2C,eAAe,GAAGA,eAAe;;IAGrD,IAAMC,WAAW,GAAGd,YAAY,CAAC,aAAa,CAAC;IAC/C,IAAI,OAAOc,WAAW,KAAK,QAAQ,EAAE;MACnC5C,iBAAiB,CAAC4C,WAAW,GAAGA,WAAW;;IAG7C,IAAIC,UAAU,GAAGf,YAAY,CAAC,YAAY,CAAC;IAC3C,IAAI,OAAOe,UAAU,KAAK,QAAQ,EAAE;MAClCA,UAAU,GAAG3C,IAAI,CAACC,KAAK,CAAC0C,UAAU,GAAG5I,6BAA6B,CAAC;MACnE,IAAIwB,QAAQ,EAAE;QACZuE,iBAAiB,CAAC8C,gBAAgB,GAAGD,UAAU;OAChD,MAAM;QACL7C,iBAAiB,CAAC+C,eAAe,GAAGF,UAAU;;;IAIlD,IAAMG,oBAAoB,GAAGlB,YAAY,CAAC,sBAAsB,CAAC;IACjE,IAAI,OAAOkB,oBAAoB,KAAK,QAAQ,EAAE;MAC5ChD,iBAAiB,CAACiD,oBAAoB,GAAGD,oBAAoB;;IAG/D,IAAME,eAAe,GAAGpB,YAAY,CAAC,iBAAiB,CAAC;IACvD,IAAI,OAAOoB,eAAe,KAAK,QAAQ,EAAE;MACvClD,iBAAiB,CAACkD,eAAe,GAAGA,eAAe;;IAGrD,IAAMC,aAAa,GAAGrB,YAAY,CAAC,eAAe,CAAC;IACnD,IAAI,OAAOqB,aAAa,KAAK,QAAQ,EAAE;MACrCnD,iBAAiB,CAACmD,aAAa,GAAGA,aAAa;;IAGjD,IAAMC,yBAAyB,GAAGtB,YAAY,CAAC,2BAA2B,CAAC;IAC3E,IAAI,OAAOsB,yBAAyB,KAAK,QAAQ,EAAE;MACjDpD,iBAAiB,CAACoD,yBAAyB,GAAGA,yBAAyB;;IAGzE,IAAMC,eAAe,GAAGvB,YAAY,CAAC,iBAAiB,CAAC;IACvD,IAAI,OAAOuB,eAAe,KAAK,QAAQ,EAAE;MACvCrD,iBAAiB,CAACqD,eAAe,GAAGA,eAAe;;IAGrD,IAAMC,aAAa,GAAGxB,YAAY,CAAC,eAAe,CAAC;IACnD,IAAI,OAAOwB,aAAa,KAAK,QAAQ,EAAE;MACrCtD,iBAAiB,CAACsD,aAAa,GAAGA,aAAa;;IAGjD,IAAMC,iBAAiB,GAAGzB,YAAY,CAAC,mBAAmB,CAAC;IAC3D,IAAI,OAAOyB,iBAAiB,KAAK,QAAQ,EAAE;MACzCvD,iBAAiB,CAACuD,iBAAiB,GAAGA,iBAAiB;;IAGzD,IAAMC,wBAAwB,GAAG1B,YAAY,CAAC,0BAA0B,CAAC;IACzE,IAAI,OAAO0B,wBAAwB,KAAK,QAAQ,EAAE;MAChDxD,iBAAiB,CAACwD,wBAAwB,GAAGA,wBAAwB;;IAGvE1G,KAAK,CAACT,IAAI,CAAC2D,iBAAiB,CAAC;EAC/B,CAAC,CAAC;EAEF,OAAOlD,KAAK;AACd;AAEA;;;;;;AAMA,SAAS8C,uBAAuB,CAACF,QAAoB,EAAEjE,QAAQ;EAC7D;EACA;EACA;EACA;EACA;EACA;EAN+B;IAAAiE,eAAe+D,GAAG,EAAE;EAAA;EAQnD,IAAItC,OAAO,GAAG,IAAI;EAClB,IAAIC,QAAQ,GAAG,IAAI;EAEnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA1B,QAAQ,CAACzD,OAAO,CAAC,cAAI;IACX,YAAQ,GAAqB8D,IAAI,SAAzB;MAAE2D,QAAQ,GAAW3D,IAAI,SAAf;MAAE1C,IAAI,GAAK0C,IAAI,KAAT;IAChC,IAAItE,QAAQ,EAAE;MACZ;;IAEF,QAAQ4B,IAAI;MACV,KAAK,aAAa;QAChB8D,OAAO,GAAGpB,IAAI;QACdqB,QAAQ,GAAG1B,QAAQ,CAACnC,GAAG,CAACmG,QAAQ,CAAC;QACjC;MACF,KAAK,cAAc;QACjBtC,QAAQ,GAAGrB,IAAI;QACfoB,OAAO,GAAGzB,QAAQ,CAACnC,GAAG,CAACmG,QAAQ,CAAC;QAChC;IAAM;EAEZ,CAAC,CAAC;EAEF,IAAMC,KAAK,GAAGlI,QAAQ,GAAG0F,OAAO,GAAGC,QAAQ;EAC3C,IAAMwC,MAAM,GAAGnI,QAAQ,GAAG2F,QAAQ,GAAGD,OAAO;EAE5C,SAASW,YAAY,CAACxB,IAAI;IACxB,IAAIqD,KAAK,IAAI,OAAOA,KAAK,CAACrD,IAAI,CAAC,KAAK,WAAW,EAAE;MAC/C,OAAOqD,KAAK,CAACrD,IAAI,CAAC;;IAEpB,IAAIsD,MAAM,IAAI,OAAOA,MAAM,CAACtD,IAAI,CAAC,KAAK,WAAW,EAAE;MACjD,OAAOsD,MAAM,CAACtD,IAAI,CAAC;;IAErB,OAAO,IAAI;EACb;EAEA,IAAMN,iBAAiB,GAAG,EAAE;EAC5B,IAAMC,SAAS,GAAG6B,YAAY,CAAC,WAAW,CAAC;EAC3C9B,iBAAiB,CAACC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACF,SAAS,CAAC;EAEnD,IAAM4B,IAAI,GAAGC,YAAY,CAAC,MAAM,CAAC;EACjC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC5B7B,iBAAiB,CAAC6B,IAAI,GAAGI,MAAM,CAACJ,IAAI,CAAC;;EAGvC,IAAMY,SAAS,GAAGX,YAAY,CAAC,WAAW,CAAC;EAC3C,IAAI,OAAOW,SAAS,KAAK,QAAQ,EAAE;IACjCzC,iBAAiB,CAACyC,SAAS,GAAGA,SAAS;;EAGzC,IAAMC,WAAW,GAAGZ,YAAY,CAAC,aAAa,CAAC;EAC/C,IAAI,OAAOY,WAAW,KAAK,QAAQ,EAAE;IACnC1C,iBAAiB,CAAC0C,WAAW,GAAGA,WAAW;;EAG7C,IAAME,WAAW,GAAGd,YAAY,CAAC,aAAa,CAAC;EAC/C,IAAI,OAAOc,WAAW,KAAK,QAAQ,EAAE;IACnC5C,iBAAiB,CAAC4C,WAAW,GAAGA,WAAW;;EAG7C,IAAMpC,aAAa,GAAGsB,YAAY,CAAC,eAAe,CAAC;EACnD,IAAI,OAAOtB,aAAa,KAAK,QAAQ,EAAE;IACrC;IACA;IACA;IACAR,iBAAiB,CAACQ,aAAa,GAAGN,IAAI,CAACC,KAAK,CAACK,aAAa,GAAG,IAAI,CAAC;;EAGpE,IAAMC,MAAM,GAAGqB,YAAY,CAAC,QAAQ,CAAC;EACrC,IAAI,OAAOrB,MAAM,KAAK,QAAQ,EAAE;IAC9BT,iBAAiB,CAACS,MAAM,GAAGP,IAAI,CAACC,KAAK,CAACM,MAAM,GAAG,IAAI,CAAC;;EAGtD,IAAMQ,aAAa,GAAGa,YAAY,CAAC,eAAe,CAAC;EACnD,IAAI,OAAOb,aAAa,KAAK,QAAQ,EAAE;IACrCjB,iBAAiB,CAACiB,aAAa,GAAGf,IAAI,CAACC,KAAK,CAACc,aAAa,CAAC;;EAG7D,IAAMuB,aAAa,GAAGV,YAAY,CAAC,eAAe,CAAC;EACnD,IAAI,OAAOU,aAAa,KAAK,QAAQ,EAAE;IACrCxC,iBAAiB,CAACwC,aAAa,GAAGA,aAAa;;EAGjD,IAAMG,eAAe,GAAGb,YAAY,CAAC,iBAAiB,CAAC;EACvD,IAAI,OAAOa,eAAe,KAAK,QAAQ,EAAE;IACvC3C,iBAAiB,CAAC2C,eAAe,GAAGA,eAAe;;EAGrD,IAAMzB,iBAAiB,GAAGY,YAAY,CAAC,eAAe,CAAC;EACvD,IAAI,OAAOZ,iBAAiB,KAAK,QAAQ,EAAE;IACzClB,iBAAiB,CAACkB,iBAAiB,GAAGhB,IAAI,CAACC,KAAK,CAACe,iBAAiB,CAAC;;EAGrE,IAAM8B,oBAAoB,GAAGlB,YAAY,CAAC,sBAAsB,CAAC;EACjE,IAAI,OAAOkB,oBAAoB,KAAK,QAAQ,EAAE;IAC5ChD,iBAAiB,CAACiD,oBAAoB,GAAGD,oBAAoB;;EAG/D,IAAME,eAAe,GAAGpB,YAAY,CAAC,iBAAiB,CAAC;EACvD,IAAI,OAAOoB,eAAe,KAAK,QAAQ,EAAE;IACvClD,iBAAiB,CAACkD,eAAe,GAAGA,eAAe;;EAGrD,IAAMC,aAAa,GAAGrB,YAAY,CAAC,eAAe,CAAC;EACnD,IAAI,OAAOqB,aAAa,KAAK,QAAQ,EAAE;IACrCnD,iBAAiB,CAACmD,aAAa,GAAGA,aAAa;;EAGjD,IAAMC,yBAAyB,GAAGtB,YAAY,CAAC,2BAA2B,CAAC;EAC3E,IAAI,OAAOsB,yBAAyB,KAAK,QAAQ,EAAE;IACjDpD,iBAAiB,CAACoD,yBAAyB,GAAGA,yBAAyB;;EAGzE,IAAMC,eAAe,GAAGvB,YAAY,CAAC,iBAAiB,CAAC;EACvD,IAAI,OAAOuB,eAAe,KAAK,QAAQ,EAAE;IACvCrD,iBAAiB,CAACqD,eAAe,GAAGA,eAAe;;EAGrD,IAAMC,aAAa,GAAGxB,YAAY,CAAC,eAAe,CAAC;EACnD,IAAI,OAAOwB,aAAa,KAAK,QAAQ,EAAE;IACrCtD,iBAAiB,CAACsD,aAAa,GAAGA,aAAa;;EAGjD,IAAMC,iBAAiB,GAAGzB,YAAY,CAAC,mBAAmB,CAAC;EAC3D,IAAI,OAAOyB,iBAAiB,KAAK,QAAQ,EAAE;IACzCvD,iBAAiB,CAACuD,iBAAiB,GAAGA,iBAAiB;;EAGzD,IAAMC,wBAAwB,GAAG1B,YAAY,CAAC,0BAA0B,CAAC;EACzE,IAAI,OAAO0B,wBAAwB,KAAK,QAAQ,EAAE;IAChDxD,iBAAiB,CAACwD,wBAAwB,GAAGA,wBAAwB;;EAGvE,OAAOxD,iBAAiB;AAC1B;AAEA;;;;;;;;;;AAWA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA6D,MAAM,CAACC,OAAO,GAAG5J,QAAQ","names":["require","flatMap","guessBrowser","guessBrowserVersion","guess","guessVersion","isChrome","isFirefox","isSafari","chromeMajorVersion","major","CHROME_LEGACY_MAX_AUDIO_LEVEL","getStats","peerConnection","options","Promise","reject","Error","_getStats","localAudioTracks","getTracks","localVideoTracks","remoteAudioTracks","remoteVideoTracks","statsResponse","activeIceCandidatePair","localAudioTrackStats","localVideoTrackStats","remoteAudioTrackStats","remoteVideoTrackStats","trackStatsPromises","_a","_b","tracks","statsArrayName","isRemote","map","getTrackStats","track","Object","assign","then","trackStatsArray","forEach","trackStats","trackId","id","push","all","getActiveIceCandidatePairStats","activeIceCandidatePairStatsReport","testForChrome","testForSafari","standardizeChromeOrSafariActiveIceCandidatePairStats","testForFirefox","standardizeFirefoxActiveIceCandidatePairStats","stats","activeCandidatePairStats","Array","from","values","find","nominated","type","activeLocalCandidateStats","get","localCandidateId","activeRemoteCandidateStats","remoteCandidateId","standardizedCandidateStatsKeys","key","standardizedLocalCandidateStatsKeys","concat","standatdizedLocalCandidateStatsReport","reduce","report","standardizedRemoteCandidateStatsReport","fixup","state","localCandidate","remoteCandidate","ffKeys","candidateTypes","host","peerreflexive","relayed","serverreflexive","localStatKey","remoteStatKey","kind","localOrRemote","getSendersOrReceivers","filter","getStreams","chromeOrSafariGetTrackStats","firefoxGetTrackStats","getSdpFormat","join","resolve","standardizeChromeLegacyStats","response","standardizeChromeOrSafariStats","standardizeFirefoxStats","ssrcReport","result","stat","standardizedStats","timestamp","Math","round","Number","names","name","codecName","roundTripTime","jitter","frameWidthInput","frameHeightInput","frameWidthSent","frameHeightSent","frameWidthReceived","frameHeightReceived","frameRateInput","frameRateSent","frameRateReceived","inbound","outbound","remoteInbound","remoteOutbound","codec","localMedia","remoteSource","mainSources","statSources","source","ssrc","getStatValue","sourceFound","statSource","String","mimeType","split","length","frameWidth","frameHeight","framesPerSecond","bytesReceived","bytesSent","packetsLost","packetsReceived","packetsSent","audioLevel","audioOutputLevel","audioInputLevel","totalPacketSendDalay","totalPacketSendDelay","totalEncodeTime","framesEncoded","estimatedPlayoutTimestamp","totalDecodeTime","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","Map","remoteId","first","second","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/webrtc/getstats.js"],"sourcesContent":["'use strict';\n\nconst { flatMap, guessBrowser, guessBrowserVersion } = require('./util');\nconst { getSdpFormat } = require('./util/sdp');\n\nconst guess = guessBrowser();\nconst guessVersion = guessBrowserVersion();\nconst isChrome = guess === 'chrome';\nconst isFirefox = guess === 'firefox';\nconst isSafari = guess === 'safari';\n\nconst chromeMajorVersion = isChrome ? guessVersion.major : null;\n\nconst CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  const localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  const localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  const remoteAudioTracks = getTracks(peerConnection, 'audio');\n  const remoteVideoTracks = getTracks(peerConnection, 'video');\n\n  const statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n\n  const trackStatsPromises = flatMap([\n    [localAudioTracks, 'localAudioTrackStats', false],\n    [localVideoTracks, 'localVideoTrackStats', false],\n    [remoteAudioTracks, 'remoteAudioTrackStats', true],\n    [remoteVideoTracks, 'remoteVideoTrackStats', true]\n  ], ([tracks, statsArrayName, isRemote]) => {\n    return tracks.map(track => {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(trackStatsArray => {\n        trackStatsArray.forEach(trackStats => {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n\n  return Promise.all(trackStatsPromises).then(() => {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(activeIceCandidatePairStatsReport => {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options = {}) {\n  if (typeof options.testForChrome !== 'undefined' || isChrome\n    || typeof options.testForSafari  !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(\n      standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  const activeCandidatePairStats = Array.from(stats.values()).find(\n    ({ nominated, type }) => type === 'candidate-pair' && nominated\n  );\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  const activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  const activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  const standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', type: 'string' },\n    { key: 'port', type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  const standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  const standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce((report, { key, type }) => {\n      report[key] = typeof activeLocalCandidateStats[key] === type\n        ? activeLocalCandidateStats[key]\n        : key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  const standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce((report, { key, type }) => {\n      report[key] = typeof activeRemoteCandidateStats[key] === type\n        ? activeRemoteCandidateStats[key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string', fixup: state => { return state === 'inprogress' ? 'in-progress' : state; } },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce((report, { key, type, fixup }) => {\n    report[key] = typeof activeCandidatePairStats[key] === type\n      ? (fixup ? fixup(activeCandidatePairStats[key]) : activeCandidatePairStats[key])\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  const activeCandidatePairStats = Array.from(stats.values()).find(\n    ({ nominated, type }) => type === 'candidate-pair' && nominated\n  );\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  const activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  const activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  const standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\n    { key: 'port', ffKeys: ['portNumber'], type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', ffKeys: ['transport'], type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  const standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  const candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n\n  const standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce((report, { ffKeys, key, type }) => {\n      const localStatKey = ffKeys && ffKeys.find(key => key in activeLocalCandidateStats) || key;\n      report[key] = typeof activeLocalCandidateStats[localStatKey] === type\n        ? localStatKey === 'candidateType'\n          ? candidateTypes[activeLocalCandidateStats[localStatKey]] || activeLocalCandidateStats[localStatKey]\n          : activeLocalCandidateStats[localStatKey]\n        : localStatKey === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  const standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce((report, { ffKeys, key, type }) => {\n      const remoteStatKey = ffKeys && ffKeys.find(key => key in activeRemoteCandidateStats) || key;\n      report[key] = typeof activeRemoteCandidateStats[remoteStatKey] === type\n        ? remoteStatKey === 'candidateType'\n          ? candidateTypes[activeRemoteCandidateStats[remoteStatKey]] || activeRemoteCandidateStats[remoteStatKey]\n          : activeRemoteCandidateStats[remoteStatKey]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string' },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce((report, { key, type }) => {\n    report[key] = typeof activeCandidatePairStats[key] === type\n      ? activeCandidatePairStats[key]\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  const getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]()\n      .map(({ track }) => track)\n      .filter(track => track && track.kind === kind);\n  }\n  const getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  const getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n  return flatMap(peerConnection[getStreams](), stream => stream[getTracks]());\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options = {}) {\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n  if (typeof options.testForFirefox  !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n  if (typeof options.testForSafari  !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari  !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error([\n      'getStats() is not supported on this version of Safari',\n      'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\n    ].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise((resolve, reject) => {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(response => {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n    peerConnection.getStats(track).then(response =>  {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise((resolve, reject) => {\n    peerConnection.getStats(track).then(response => {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  const ssrcReport = response.result().find(report => {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n\n  let standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce((stats, name) => {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response) {\n  let inbound = null;\n\n  // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n  const outbound = [];\n\n  let remoteInbound = null;\n  let remoteOutbound = null;\n  let track = null;\n  let codec = null;\n  let localMedia = null;\n\n  response.forEach(stat => {\n    const { type } = stat;\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n      case 'media-source':\n        localMedia = stat;\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n\n  const isRemote = track && track.remoteSource;\n  const mainSources = isRemote ? [inbound] : outbound;\n  const stats = [];\n  const remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(source => {\n    const standardizedStats = {};\n    const statSources = [\n      source, // local rtp stats\n      localMedia,\n      track,\n      codec,\n      remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null, // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      const sourceFound = statSources.find(statSource => {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    const ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    const timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n\n    let mimeType = getStatValue('mimeType');\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    const roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    const jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    const frameWidth = getStatValue('frameWidth');\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track.frameWidth;\n      }\n    }\n\n    const frameHeight = getStatValue('frameHeight');\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track.frameHeight;\n      }\n    }\n\n    const framesPerSecond = getStatValue('framesPerSecond');\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n\n    const bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    const bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    const packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    const packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    const packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    let audioLevel = getStatValue('audioLevel');\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    const totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    const totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    const framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    const estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    const totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    const framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    const jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    const jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n\n  return stats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response = new Map(), isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n\n  let inbound = null;\n  let outbound = null;\n\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(stat => {\n    const { isRemote, remoteId, type } = stat;\n    if (isRemote) {\n      return;\n    }\n    switch (type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(remoteId);\n        break;\n    }\n  });\n\n  const first = isRemote ? inbound : outbound;\n  const second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n\n  const standardizedStats = {};\n  const timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n\n  const ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  const bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  const packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  const packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  const roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  const jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  const frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  const bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  const packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  const frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  const totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  const totalEncodeTime = getStatValue('totalEncodeTime');\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  const framesEncoded = getStatValue('framesEncoded');\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  const estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  const totalDecodeTime = getStatValue('totalDecodeTime');\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  const framesDecoded = getStatValue('framesDecoded');\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  const jitterBufferDelay = getStatValue('jitterBufferDelay');\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  const jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\nmodule.exports = getStats;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}