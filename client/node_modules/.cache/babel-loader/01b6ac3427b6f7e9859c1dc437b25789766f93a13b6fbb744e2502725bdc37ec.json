{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeStat = void 0;\n/**\n * Computes min, max, average for given array.\n * @param {Array<number>} values\n * @returns {{min: number, max: number: average: number}|null}\n */\nfunction makeStat(values) {\n  if (values && values.length) {\n    var min = Math.min.apply(Math, __spreadArray([], __read(values)));\n    var max = Math.max.apply(Math, __spreadArray([], __read(values)));\n    var average = values.reduce(function (total, value) {\n      return total + value;\n    }, 0) / values.length;\n    return {\n      min: min,\n      max: max,\n      average: average\n    };\n  }\n  return null;\n}\nexports.makeStat = makeStat;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;AAKA,SAAgBA,QAAQ,CAACC,MAAsB;EAC7C,IAAIA,MAAM,IAAIA,MAAM,CAACC,MAAM,EAAE;IAC3B,IAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,OAARC,IAAI,2BAAQH,MAAM,GAAC;IAC/B,IAAMI,GAAG,GAAGD,IAAI,CAACC,GAAG,OAARD,IAAI,2BAAQH,MAAM,GAAC;IAC/B,IAAMK,OAAO,GAAGL,MAAM,CAACM,MAAM,CAAC,UAACC,KAAK,EAAEC,KAAK;MAAK,YAAK,GAAGA,KAAK;IAAb,CAAa,EAAE,CAAC,CAAC,GAAGR,MAAM,CAACC,MAAM;IACjF,OAAO;MAAEC,GAAG;MAAEE,GAAG;MAAEC,OAAO;IAAA,CAAE;;EAE9B,OAAO,IAAI;AACb;AARAI","names":["makeStat","values","length","min","Math","max","average","reduce","total","value","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/preflight/makestat.ts"],"sourcesContent":["\nimport type { Stats } from '../../tsdef/PreflightTypes';\n\n/**\n * Computes min, max, average for given array.\n * @param {Array<number>} values\n * @returns {{min: number, max: number: average: number}|null}\n */\nexport function makeStat(values?: number[]|null) : Stats|null {\n  if (values && values.length) {\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    const average = values.reduce((total, value) => total + value, 0) / values.length;\n    return { min, max, average };\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}