{"ast":null,"code":"'use strict';\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNoiseCancellationAudioProcessor = void 0;\nvar dynamicImport = require('./util/dynamicimport');\nvar Log = require('./util/log');\nvar PLUGIN_CONFIG = {\n  krisp: {\n    supportedVersion: '1.0.0',\n    pluginFile: 'krispsdk.mjs'\n  },\n  rnnoise: {\n    supportedVersion: '0.6.0',\n    pluginFile: 'rnnoise_sdk.mjs'\n  }\n};\nvar ensureVersionSupported = function (_a) {\n  var supportedVersion = _a.supportedVersion,\n    plugin = _a.plugin,\n    log = _a.log;\n  if (!plugin.getVersion || !plugin.isSupported) {\n    throw new Error('Plugin does not export getVersion/isSupported api. Are you using old version of the plugin ?');\n  }\n  var pluginVersion = plugin.getVersion();\n  log.debug(\"Plugin Version = \" + pluginVersion);\n  var supportedVersions = supportedVersion.split('.').map(function (version) {\n    return Number(version);\n  });\n  var pluginVersions = pluginVersion.split('.').map(function (version) {\n    return Number(version);\n  });\n  if (supportedVersions.length !== 3 || pluginVersions.length !== 3) {\n    throw new Error(\"Unsupported Plugin version format: \" + supportedVersion + \", \" + pluginVersion);\n  }\n  if (supportedVersions[0] !== pluginVersions[0]) {\n    throw new Error(\"Major version mismatch: [Plugin version \" + pluginVersion + \"],  [Supported Version \" + supportedVersion + \"]\");\n  }\n  if (pluginVersions[1] < supportedVersions[1]) {\n    throw new Error(\"Minor version mismatch: [Plugin version \" + pluginVersion + \"] < [Supported Version \" + supportedVersion + \"]\");\n  }\n  var tempContext = new AudioContext();\n  var isSupported = plugin.isSupported(tempContext);\n  tempContext.close();\n  if (!isSupported) {\n    throw new Error('Noise Cancellation plugin is not supported on your browser');\n  }\n};\nvar audioProcessors = new Map();\nfunction createNoiseCancellationAudioProcessor(noiseCancellationOptions, log) {\n  return __awaiter(this, void 0, void 0, function () {\n    var audioProcessor, pluginConfig, supportedVersion, pluginFile, rootDir, sdkFilePath, dynamicModule, plugin_1, er_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          audioProcessor = audioProcessors.get(noiseCancellationOptions.vendor);\n          if (!!audioProcessor) return [3 /*break*/, 6];\n          pluginConfig = PLUGIN_CONFIG[noiseCancellationOptions.vendor];\n          if (!pluginConfig) {\n            throw new Error(\"Unsupported NoiseCancellationOptions.vendor: \" + noiseCancellationOptions.vendor);\n          }\n          supportedVersion = pluginConfig.supportedVersion, pluginFile = pluginConfig.pluginFile;\n          rootDir = noiseCancellationOptions.sdkAssetsPath;\n          sdkFilePath = rootDir + \"/\" + pluginFile;\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 5,, 6]);\n          log.debug('loading noise cancellation sdk: ', sdkFilePath);\n          return [4 /*yield*/, dynamicImport(sdkFilePath)];\n        case 2:\n          dynamicModule = _a.sent();\n          log.debug('Loaded noise cancellation sdk:', dynamicModule);\n          plugin_1 = dynamicModule.default;\n          ensureVersionSupported({\n            supportedVersion: supportedVersion,\n            plugin: plugin_1,\n            log: log\n          });\n          if (!!plugin_1.isInitialized()) return [3 /*break*/, 4];\n          log.debug('initializing noise cancellation sdk: ', rootDir);\n          return [4 /*yield*/, plugin_1.init({\n            rootDir: rootDir\n          })];\n        case 3:\n          _a.sent();\n          log.debug('noise cancellation sdk initialized!');\n          _a.label = 4;\n        case 4:\n          audioProcessor = {\n            vendor: noiseCancellationOptions.vendor,\n            isInitialized: function () {\n              return plugin_1.isInitialized();\n            },\n            isConnected: function () {\n              return plugin_1.isConnected();\n            },\n            isEnabled: function () {\n              return plugin_1.isEnabled();\n            },\n            disconnect: function () {\n              return plugin_1.disconnect();\n            },\n            enable: function () {\n              return plugin_1.enable();\n            },\n            disable: function () {\n              return plugin_1.disable();\n            },\n            destroy: function () {\n              return plugin_1.destroy();\n            },\n            setLogging: function (enable) {\n              return plugin_1.setLogging(enable);\n            },\n            connect: function (sourceTrack) {\n              log.debug('connect: ', sourceTrack.id);\n              if (plugin_1.isConnected()) {\n                plugin_1.disconnect();\n              }\n              var mediaStream = plugin_1.connect(new MediaStream([sourceTrack]));\n              if (!mediaStream) {\n                throw new Error('Error connecting with noise cancellation sdk');\n              }\n              var cleanTrack = mediaStream.getAudioTracks()[0];\n              if (!cleanTrack) {\n                throw new Error('Error getting clean track from noise cancellation sdk');\n              }\n              plugin_1.enable();\n              return cleanTrack;\n            }\n          };\n          audioProcessors.set(noiseCancellationOptions.vendor, audioProcessor);\n          return [3 /*break*/, 6];\n        case 5:\n          er_1 = _a.sent();\n          log.error(\"Error loading noise cancellation sdk:\" + sdkFilePath, er_1);\n          throw er_1;\n        case 6:\n          return [2 /*return*/, audioProcessor];\n      }\n    });\n  });\n}\nexports.createNoiseCancellationAudioProcessor = createNoiseCancellationAudioProcessor;","map":{"version":3,"mappings":"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","names":["dynamicImport","require","Log","PLUGIN_CONFIG","krisp","supportedVersion","pluginFile","rnnoise","ensureVersionSupported","_a","plugin","log","getVersion","isSupported","Error","pluginVersion","debug","supportedVersions","split","map","version","pluginVersions","length","tempContext","AudioContext","close","audioProcessors","Map","createNoiseCancellationAudioProcessor","noiseCancellationOptions","audioProcessor","get","vendor","pluginConfig","rootDir","sdkAssetsPath","sdkFilePath","dynamicModule","plugin_1","default","isInitialized","init","isConnected","isEnabled","disconnect","enable","disable","destroy","setLogging","connect","sourceTrack","id","mediaStream","MediaStream","cleanTrack","getAudioTracks","set","error","er_1","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/noisecancellationadapter.ts"],"sourcesContent":["'use strict';\n\nimport { AudioProcessor } from '../tsdef/AudioProcessor';\nimport { NoiseCancellationOptions } from '../tsdef/types';\n\nconst dynamicImport = require('./util/dynamicimport');\nconst Log = require('./util/log');\n\nconst PLUGIN_CONFIG = {\n  krisp: {\n    supportedVersion: '1.0.0',\n    pluginFile: 'krispsdk.mjs'\n  },\n  rnnoise: {\n    supportedVersion: '0.6.0',\n    pluginFile: 'rnnoise_sdk.mjs'\n  }\n};\n\n// AudioProcessor assumes following interface from the Plugin\ninterface NoiseCancellationPlugin {\n  init(options: { rootDir: string }): Promise<void>;\n  isInitialized(): boolean;\n  isConnected(): boolean;\n  isEnabled(): boolean\n  connect(input: MediaStream): MediaStream;\n  disconnect(): void;\n  enable(): void;\n  disable(): void;\n  destroy(): void;\n  setLogging(enable: boolean):void;\n  isSupported(audioContext: AudioContext):boolean;\n  getVersion(): string;\n}\n\nconst ensureVersionSupported = ({ supportedVersion, plugin, log }: {supportedVersion: string, plugin: NoiseCancellationPlugin, log: typeof Log}) : void => {\n  if (!plugin.getVersion || !plugin.isSupported) {\n    throw new Error('Plugin does not export getVersion/isSupported api. Are you using old version of the plugin ?');\n  }\n\n  const pluginVersion = plugin.getVersion();\n  log.debug(`Plugin Version = ${pluginVersion}`);\n  const supportedVersions = supportedVersion.split('.').map(version => Number(version));\n  const pluginVersions = pluginVersion.split('.').map(version => Number(version));\n  if (supportedVersions.length !== 3 || pluginVersions.length !== 3) {\n    throw new Error(`Unsupported Plugin version format: ${supportedVersion}, ${pluginVersion}`);\n  }\n\n  if (supportedVersions[0] !== pluginVersions[0]) {\n    throw new Error(`Major version mismatch: [Plugin version ${pluginVersion}],  [Supported Version ${supportedVersion}]`);\n  }\n\n  if (pluginVersions[1] < supportedVersions[1]) {\n    throw new Error(`Minor version mismatch: [Plugin version ${pluginVersion}] < [Supported Version ${supportedVersion}]`);\n  }\n\n  const tempContext = new AudioContext();\n  const isSupported = plugin.isSupported(tempContext);\n  tempContext.close();\n  if (!isSupported) {\n    throw new Error('Noise Cancellation plugin is not supported on your browser');\n  }\n};\n\nlet audioProcessors = new Map<string, AudioProcessor>();\nexport async function createNoiseCancellationAudioProcessor(\n  noiseCancellationOptions: NoiseCancellationOptions,\n  log: typeof Log\n) : Promise<AudioProcessor> {\n  let audioProcessor = audioProcessors.get(noiseCancellationOptions.vendor);\n  if (!audioProcessor) {\n    let pluginConfig = PLUGIN_CONFIG[noiseCancellationOptions.vendor];\n    if (!pluginConfig) {\n      throw new Error(`Unsupported NoiseCancellationOptions.vendor: ${noiseCancellationOptions.vendor}`);\n    }\n\n    const { supportedVersion, pluginFile } =  pluginConfig;\n    const  rootDir = noiseCancellationOptions.sdkAssetsPath;\n    const  sdkFilePath = `${rootDir}/${pluginFile}`;\n\n    try {\n      log.debug('loading noise cancellation sdk: ', sdkFilePath);\n      const dynamicModule = await dynamicImport(sdkFilePath);\n      log.debug('Loaded noise cancellation sdk:', dynamicModule);\n\n      const plugin = dynamicModule.default as NoiseCancellationPlugin;\n      ensureVersionSupported({\n        supportedVersion,\n        plugin,\n        log\n      });\n\n      if (!plugin.isInitialized()) {\n        log.debug('initializing noise cancellation sdk: ', rootDir);\n        await plugin.init({ rootDir });\n        log.debug('noise cancellation sdk initialized!');\n      }\n\n      audioProcessor = {\n        vendor: noiseCancellationOptions.vendor,\n        isInitialized: () => plugin.isInitialized(),\n        isConnected: () => plugin.isConnected(),\n        isEnabled: () => plugin.isEnabled(),\n        disconnect: () => plugin.disconnect(),\n        enable: () => plugin.enable(),\n        disable: () => plugin.disable(),\n        destroy: () => plugin.destroy(),\n        setLogging: (enable: boolean) => plugin.setLogging(enable),\n        connect: (sourceTrack: MediaStreamTrack) => {\n          log.debug('connect: ', sourceTrack.id);\n          if (plugin.isConnected()) {\n            plugin.disconnect();\n          }\n\n          const mediaStream = plugin.connect(new MediaStream([sourceTrack]));\n          if (!mediaStream) {\n            throw new Error('Error connecting with noise cancellation sdk');\n          }\n          const cleanTrack = mediaStream.getAudioTracks()[0];\n          if (!cleanTrack) {\n            throw new Error('Error getting clean track from noise cancellation sdk');\n          }\n          plugin.enable();\n          return cleanTrack;\n        },\n      };\n      audioProcessors.set(noiseCancellationOptions.vendor, audioProcessor);\n\n    } catch (er) {\n      log.error(`Error loading noise cancellation sdk:${sdkFilePath}`, er);\n      throw er;\n    }\n  }\n  return audioProcessor;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}