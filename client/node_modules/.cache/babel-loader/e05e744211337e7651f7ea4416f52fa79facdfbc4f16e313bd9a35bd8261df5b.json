{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar LocalParticipantSignaling = require('../localparticipant');\nvar LocalTrackPublicationV2 = require('./localtrackpublication');\nvar DEFAULT_LOG_LEVEL = require('../../util/constants').DEFAULT_LOG_LEVEL;\nvar Log = require('../../util/log');\nvar _a = require('../../util'),\n  buildLogLevels = _a.buildLogLevels,\n  isDeepEqual = _a.isDeepEqual;\n/**\n * @extends ParticipantSignaling\n * @property {BandwidthProfileOptions} bandwidthProfile\n * @property {NetworkQualityConfigurationImpl} networkQualityConfiguration\n * @property {number} revision\n * @emits LocalParticipantV2#updated\n */\nvar LocalParticipantV2 = /** @class */function (_super) {\n  __extends(LocalParticipantV2, _super);\n  /**\n   * Construct a {@link LocalParticipantV2}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   * @param {object} [options]\n   */\n  function LocalParticipantV2(encodingParameters, networkQualityConfiguration, options) {\n    var _this = this;\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      LocalTrackPublicationV2: LocalTrackPublicationV2\n    }, options);\n    _this = _super.call(this) || this;\n    var logLevels = buildLogLevels(options.logLevel);\n    Object.defineProperties(_this, {\n      _bandwidthProfile: {\n        value: null,\n        writable: true\n      },\n      _bandwidthProfileRevision: {\n        value: 0,\n        writable: true\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _removeListeners: {\n        value: new Map()\n      },\n      _LocalTrackPublicationV2: {\n        value: options.LocalTrackPublicationV2\n      },\n      _log: {\n        value: options.log ? options.log.createLog('default', _this) : new Log('default', _this, logLevels, options.loggerName)\n      },\n      _publishedRevision: {\n        writable: true,\n        value: 0\n      },\n      _revision: {\n        writable: true,\n        value: 1\n      },\n      _signalingRegion: {\n        value: null,\n        writable: true\n      },\n      audioProcessors: {\n        value: [],\n        writable: true\n      },\n      bandwidthProfile: {\n        enumerable: true,\n        get: function () {\n          return this._bandwidthProfile;\n        }\n      },\n      bandwidthProfileRevision: {\n        enumerable: true,\n        get: function () {\n          return this._bandwidthProfileRevision;\n        }\n      },\n      networkQualityConfiguration: {\n        enumerable: true,\n        value: networkQualityConfiguration\n      },\n      revision: {\n        enumerable: true,\n        get: function () {\n          return this._revision;\n        }\n      },\n      signalingRegion: {\n        enumerable: true,\n        get: function () {\n          return this._signalingRegion;\n        }\n      }\n    });\n    return _this;\n  }\n  LocalParticipantV2.prototype.toString = function () {\n    return \"[LocalParticipantSignaling: \" + this.sid + \"]\";\n  };\n  /**\n   * Set the signalingRegion.\n   * @param {string} signalingRegion.\n   */\n  LocalParticipantV2.prototype.setSignalingRegion = function (signalingRegion) {\n    if (!this._signalingRegion) {\n      this._signalingRegion = signalingRegion;\n    }\n  };\n  /**\n   * Update the {@link BandwidthProfileOptions}.\n   * @param {BandwidthProfileOptions} bandwidthProfile\n   */\n  LocalParticipantV2.prototype.setBandwidthProfile = function (bandwidthProfile) {\n    if (!isDeepEqual(this._bandwidthProfile, bandwidthProfile)) {\n      // NOTE(mmalavalli): Object.assign() copies the values of only\n      // the top level properties. In order to deep copy the object, we\n      // stringify and parse the object.\n      this._bandwidthProfile = JSON.parse(JSON.stringify(bandwidthProfile));\n      this._bandwidthProfileRevision++;\n      this.didUpdate();\n    }\n  };\n  /**\n   * Sets the AudioProcessors enabled for this room.\n   * @param {string[]} audioProcessors\n   */\n  LocalParticipantV2.prototype.setAudioProcessors = function (audioProcessors) {\n    this.audioProcessors = audioProcessors;\n  };\n  /**\n   * returns current {@link EncodingParametersImpl}.\n   * @returns {EncodingParametersImpl}\n   */\n  LocalParticipantV2.prototype.getParameters = function () {\n    return this._encodingParameters;\n  };\n  /**\n   * Set the {@link EncodingParameters}.\n   * @param {?EncodingParameters} encodingParameters\n   * @returns {this}\n   */\n  LocalParticipantV2.prototype.setParameters = function (encodingParameters) {\n    this._encodingParameters.update(encodingParameters);\n    return this;\n  };\n  /**\n   * Update the {@link LocalParticipantV2} with the new state.\n   * @param {Published} published\n   * @returns {this}\n   */\n  LocalParticipantV2.prototype.update = function (published) {\n    if (this._publishedRevision >= published.revision) {\n      return this;\n    }\n    this._publishedRevision = published.revision;\n    published.tracks.forEach(function (publicationState) {\n      var localTrackPublicationV2 = this.tracks.get(publicationState.id);\n      if (localTrackPublicationV2) {\n        localTrackPublicationV2.update(publicationState);\n      }\n    }, this);\n    return this;\n  };\n  LocalParticipantV2.prototype.updateMediaStates = function (mediaStates) {\n    if (!mediaStates || !mediaStates.tracks) {\n      return this;\n    }\n    Array.from(this.tracks.values()).forEach(function (publication) {\n      var states = mediaStates.tracks[publication.sid];\n      if (states) {\n        publication.updateMediaStates(states);\n      }\n    });\n    return this;\n  };\n  /**\n   * @protected\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @param {?NoiseCancellationVendor} noiseCancellationVendor\n   * @returns {LocalTrackPublicationV2}\n   */\n  LocalParticipantV2.prototype._createLocalTrackPublicationSignaling = function (trackSender, name, priority, noiseCancellationVendor) {\n    return new this._LocalTrackPublicationV2(trackSender, name, priority, noiseCancellationVendor, {\n      log: this._log\n    });\n  };\n  /**\n   * Add a {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} to the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {this}\n   */\n  LocalParticipantV2.prototype.addTrack = function (trackSender, name, priority, noiseCancellationVendor) {\n    var _this = this;\n    _super.prototype.addTrack.call(this, trackSender, name, priority, noiseCancellationVendor);\n    var publication = this.getPublication(trackSender);\n    var isEnabled = publication.isEnabled,\n      updatedPriority = publication.updatedPriority;\n    var updated = function () {\n      // NOTE(mmalavalli): The LocalParticipantV2's state is only published if\n      // the \"updated\" event is emitted due to LocalTrackPublicationV2's\n      // .isEnabled or .updatedPriority being changed. We do not publish if it is fired due to the\n      // LocalTrackPublicationV2's .sid being set.\n      if (isEnabled !== publication.isEnabled || updatedPriority !== publication.updatedPriority) {\n        _this.didUpdate();\n        isEnabled = publication.isEnabled;\n        updatedPriority = publication.updatedPriority;\n      }\n    };\n    publication.on('updated', updated);\n    this._removeListener(publication);\n    this._removeListeners.set(publication, function () {\n      return publication.removeListener('updated', updated);\n    });\n    this.didUpdate();\n    return this;\n  };\n  /**\n   * @private\n   * @param {LocalTrackPublicationV2} publication\n   * @returns {void}\n   */\n  LocalParticipantV2.prototype._removeListener = function (publication) {\n    var removeListener = this._removeListeners.get(publication);\n    if (removeListener) {\n      removeListener();\n    }\n  };\n  /**\n   * Get the current state of the {@link LocalParticipantV2}.\n   * @returns {object}\n   */\n  LocalParticipantV2.prototype.getState = function () {\n    return {\n      revision: this.revision,\n      tracks: Array.from(this.tracks.values()).map(function (track) {\n        return track.getState();\n      })\n    };\n  };\n  /**\n   * Increment the revision for the {@link LocalParticipantV2}.\n   * @private\n   * @returns {void}\n   */\n  LocalParticipantV2.prototype.didUpdate = function () {\n    this._revision++;\n    this.emit('updated');\n  };\n  /**\n   * Remove the {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} from the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @returns {?LocalTrackPublicationV2}\n   */\n  LocalParticipantV2.prototype.removeTrack = function (trackSender) {\n    var publication = _super.prototype.removeTrack.call(this, trackSender);\n    if (publication) {\n      trackSender.removeClone(publication.trackTransceiver);\n      this._removeListener(publication);\n      this.didUpdate();\n    }\n    return publication;\n  };\n  /**\n   * Updates the verbosity of network quality information.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration\n   * @returns {void}\n   */\n  LocalParticipantV2.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n    this.networkQualityConfiguration.update(networkQualityConfiguration);\n  };\n  /**\n   * updates encodings for simulcast layers.\n   * @param {Track.SID} trackSid\n   * @param {Array<{enabled: boolean, layer_index: number}>} encodings\n   * @returns {Promise<string>} string indicating result of the operation. can be one of\n   *  \"OK\", \"INVALID_HINT\", \"COULD_NOT_APPLY_HINT\", \"UNKNOWN_TRACK\"\n   */\n  LocalParticipantV2.prototype.setPublisherHint = function (trackSid, encodings) {\n    var trackSignaling = Array.from(this.tracks.values()).find(function (trackPub) {\n      return trackPub.sid === trackSid;\n    });\n    if (!trackSignaling) {\n      this._log.warn(\"track:\" + trackSid + \" not found\");\n      return Promise.resolve('UNKNOWN_TRACK');\n    }\n    return trackSignaling.trackTransceiver.setPublisherHint(encodings);\n  };\n  return LocalParticipantV2;\n}(LocalParticipantSignaling);\n/**\n * @interface Published\n * @property {number} revision\n * @property {Array<PublishedTrack>} tracks\n */\n/**\n * @typedef {CreatedTrack|ReadyTrack|FailedTrack} PublishedTrack\n */\n/**\n * @interface CreatedTrack\n * @property {Track.ID} id\n * @property {string} state - \"created\"\n */\n/**\n * @interface ReadyTrack\n * @property {Track.ID} id\n * @property {Track.SID} sid\n * @property {string} state - \"ready\"\n */\n/**\n * @interface FailedTrack\n * @property {Track.ID} id\n * @property {TrackError} error\n * @property {string} state - \"failed\"\n */\n/**\n * @interface TrackError\n * @property {number} code\n * @property {string} message\n */\n/**\n * @event LocalParticipantV2#updated\n */\nmodule.exports = LocalParticipantV2;","map":{"version":3,"mappings":"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","names":["LocalParticipantSignaling","require","LocalTrackPublicationV2","Log","buildLogLevels","isDeepEqual","__extends","encodingParameters","networkQualityConfiguration","options","Object","assign","logLevel","DEFAULT_LOG_LEVEL","_this","logLevels","defineProperties","_bandwidthProfile","value","writable","_bandwidthProfileRevision","_encodingParameters","_removeListeners","Map","_LocalTrackPublicationV2","_log","log","createLog","loggerName","_publishedRevision","_revision","_signalingRegion","audioProcessors","bandwidthProfile","enumerable","get","bandwidthProfileRevision","revision","signalingRegion","LocalParticipantV2","sid","JSON","parse","stringify","didUpdate","update","published","tracks","forEach","publicationState","localTrackPublicationV2","id","mediaStates","Array","from","values","states","publication","updateMediaStates","trackSender","name","priority","noiseCancellationVendor","_super","addTrack","getPublication","updatedPriority","updated","isEnabled","on","_removeListener","set","removeListener","map","getState","emit","removeTrack","removeClone","trackTransceiver","trackSid","encodings","trackSignaling","find","warn","Promise","resolve","setPublisherHint","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/signaling/v2/localparticipant.js"],"sourcesContent":["'use strict';\n\nconst LocalParticipantSignaling = require('../localparticipant');\nconst LocalTrackPublicationV2 = require('./localtrackpublication');\nconst { DEFAULT_LOG_LEVEL } = require('../../util/constants');\nconst Log = require('../../util/log');\nconst { buildLogLevels, isDeepEqual } = require('../../util');\n\n/**\n * @extends ParticipantSignaling\n * @property {BandwidthProfileOptions} bandwidthProfile\n * @property {NetworkQualityConfigurationImpl} networkQualityConfiguration\n * @property {number} revision\n * @emits LocalParticipantV2#updated\n */\nclass LocalParticipantV2 extends LocalParticipantSignaling {\n  /**\n   * Construct a {@link LocalParticipantV2}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   * @param {object} [options]\n   */\n  constructor(encodingParameters, networkQualityConfiguration, options) {\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      LocalTrackPublicationV2\n    }, options);\n\n    super();\n\n    const logLevels = buildLogLevels(options.logLevel);\n\n    Object.defineProperties(this, {\n      _bandwidthProfile: {\n        value: null,\n        writable: true\n      },\n      _bandwidthProfileRevision: {\n        value: 0,\n        writable: true\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _removeListeners: {\n        value: new Map()\n      },\n      _LocalTrackPublicationV2: {\n        value: options.LocalTrackPublicationV2\n      },\n      _log: {\n        value: options.log\n          ? options.log.createLog('default', this)\n          : new Log('default', this, logLevels, options.loggerName)\n      },\n      _publishedRevision: {\n        writable: true,\n        value: 0\n      },\n      _revision: {\n        writable: true,\n        value: 1\n      },\n      _signalingRegion: {\n        value: null,\n        writable: true\n      },\n      audioProcessors: {\n        value: [],\n        writable: true\n      },\n      bandwidthProfile: {\n        enumerable: true,\n        get() {\n          return this._bandwidthProfile;\n        }\n      },\n      bandwidthProfileRevision: {\n        enumerable: true,\n        get() {\n          return this._bandwidthProfileRevision;\n        }\n      },\n      networkQualityConfiguration: {\n        enumerable: true,\n        value: networkQualityConfiguration\n      },\n      revision: {\n        enumerable: true,\n        get() {\n          return this._revision;\n        }\n      },\n      signalingRegion: {\n        enumerable: true,\n        get() {\n          return this._signalingRegion;\n        }\n      }\n    });\n  }\n\n  toString() {\n    return `[LocalParticipantSignaling: ${this.sid}]`;\n  }\n\n  /**\n   * Set the signalingRegion.\n   * @param {string} signalingRegion.\n   */\n  setSignalingRegion(signalingRegion) {\n    if (!this._signalingRegion) {\n      this._signalingRegion = signalingRegion;\n    }\n  }\n\n  /**\n   * Update the {@link BandwidthProfileOptions}.\n   * @param {BandwidthProfileOptions} bandwidthProfile\n   */\n  setBandwidthProfile(bandwidthProfile) {\n    if (!isDeepEqual(this._bandwidthProfile, bandwidthProfile)) {\n      // NOTE(mmalavalli): Object.assign() copies the values of only\n      // the top level properties. In order to deep copy the object, we\n      // stringify and parse the object.\n      this._bandwidthProfile = JSON.parse(JSON.stringify(bandwidthProfile));\n      this._bandwidthProfileRevision++;\n      this.didUpdate();\n    }\n  }\n\n  /**\n   * Sets the AudioProcessors enabled for this room.\n   * @param {string[]} audioProcessors\n   */\n  setAudioProcessors(audioProcessors) {\n    this.audioProcessors = audioProcessors;\n  }\n\n  /**\n   * returns current {@link EncodingParametersImpl}.\n   * @returns {EncodingParametersImpl}\n   */\n  getParameters() {\n    return this._encodingParameters;\n  }\n\n  /**\n   * Set the {@link EncodingParameters}.\n   * @param {?EncodingParameters} encodingParameters\n   * @returns {this}\n   */\n  setParameters(encodingParameters) {\n    this._encodingParameters.update(encodingParameters);\n    return this;\n  }\n\n  /**\n   * Update the {@link LocalParticipantV2} with the new state.\n   * @param {Published} published\n   * @returns {this}\n   */\n  update(published) {\n    if (this._publishedRevision >= published.revision) {\n      return this;\n    }\n\n    this._publishedRevision = published.revision;\n\n    published.tracks.forEach(function(publicationState) {\n      const localTrackPublicationV2 = this.tracks.get(publicationState.id);\n      if (localTrackPublicationV2) {\n        localTrackPublicationV2.update(publicationState);\n      }\n    }, this);\n\n    return this;\n  }\n\n  updateMediaStates(mediaStates) {\n    if (!mediaStates || !mediaStates.tracks) {\n      return this;\n    }\n\n    Array.from(this.tracks.values()).forEach(publication => {\n      const states = mediaStates.tracks[publication.sid];\n      if (states) {\n        publication.updateMediaStates(states);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @protected\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @param {?NoiseCancellationVendor} noiseCancellationVendor\n   * @returns {LocalTrackPublicationV2}\n   */\n  _createLocalTrackPublicationSignaling(trackSender, name, priority, noiseCancellationVendor) {\n    return new this._LocalTrackPublicationV2(trackSender, name, priority, noiseCancellationVendor, { log: this._log });\n  }\n\n  /**\n   * Add a {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} to the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {this}\n   */\n  addTrack(trackSender, name, priority, noiseCancellationVendor) {\n    super.addTrack(trackSender, name, priority, noiseCancellationVendor);\n    const publication = this.getPublication(trackSender);\n\n    let {\n      isEnabled,\n      updatedPriority\n    } = publication;\n\n    const updated = () => {\n      // NOTE(mmalavalli): The LocalParticipantV2's state is only published if\n      // the \"updated\" event is emitted due to LocalTrackPublicationV2's\n      // .isEnabled or .updatedPriority being changed. We do not publish if it is fired due to the\n      // LocalTrackPublicationV2's .sid being set.\n      if (isEnabled !== publication.isEnabled || updatedPriority !== publication.updatedPriority) {\n        this.didUpdate();\n        isEnabled = publication.isEnabled;\n        updatedPriority = publication.updatedPriority;\n      }\n    };\n\n    publication.on('updated', updated);\n\n    this._removeListener(publication);\n    this._removeListeners.set(publication, () => publication.removeListener('updated', updated));\n\n    this.didUpdate();\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {LocalTrackPublicationV2} publication\n   * @returns {void}\n   */\n  _removeListener(publication) {\n    const removeListener = this._removeListeners.get(publication);\n    if (removeListener) {\n      removeListener();\n    }\n  }\n\n  /**\n   * Get the current state of the {@link LocalParticipantV2}.\n   * @returns {object}\n   */\n  getState() {\n    return {\n      revision: this.revision,\n      tracks: Array.from(this.tracks.values()).map(track => track.getState())\n    };\n  }\n\n  /**\n   * Increment the revision for the {@link LocalParticipantV2}.\n   * @private\n   * @returns {void}\n   */\n  didUpdate() {\n    this._revision++;\n    this.emit('updated');\n  }\n\n  /**\n   * Remove the {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} from the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @returns {?LocalTrackPublicationV2}\n   */\n  removeTrack(trackSender) {\n    const publication = super.removeTrack(trackSender);\n    if (publication) {\n      trackSender.removeClone(publication.trackTransceiver);\n      this._removeListener(publication);\n      this.didUpdate();\n    }\n    return publication;\n  }\n\n  /**\n   * Updates the verbosity of network quality information.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration\n   * @returns {void}\n   */\n  setNetworkQualityConfiguration(networkQualityConfiguration) {\n    this.networkQualityConfiguration.update(networkQualityConfiguration);\n  }\n\n  /**\n   * updates encodings for simulcast layers.\n   * @param {Track.SID} trackSid\n   * @param {Array<{enabled: boolean, layer_index: number}>} encodings\n   * @returns {Promise<string>} string indicating result of the operation. can be one of\n   *  \"OK\", \"INVALID_HINT\", \"COULD_NOT_APPLY_HINT\", \"UNKNOWN_TRACK\"\n   */\n  setPublisherHint(trackSid, encodings) {\n    const trackSignaling = Array.from(this.tracks.values()).find(trackPub => trackPub.sid === trackSid);\n    if (!trackSignaling) {\n      this._log.warn(`track:${trackSid} not found`);\n      return Promise.resolve('UNKNOWN_TRACK');\n    }\n    return trackSignaling.trackTransceiver.setPublisherHint(encodings);\n  }\n}\n\n\n/**\n * @interface Published\n * @property {number} revision\n * @property {Array<PublishedTrack>} tracks\n */\n\n/**\n * @typedef {CreatedTrack|ReadyTrack|FailedTrack} PublishedTrack\n */\n\n/**\n * @interface CreatedTrack\n * @property {Track.ID} id\n * @property {string} state - \"created\"\n */\n\n/**\n * @interface ReadyTrack\n * @property {Track.ID} id\n * @property {Track.SID} sid\n * @property {string} state - \"ready\"\n */\n\n/**\n * @interface FailedTrack\n * @property {Track.ID} id\n * @property {TrackError} error\n * @property {string} state - \"failed\"\n */\n\n/**\n * @interface TrackError\n * @property {number} code\n * @property {string} message\n */\n\n/**\n * @event LocalParticipantV2#updated\n */\n\nmodule.exports = LocalParticipantV2;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}