{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar StateMachine = require('../statemachine');\nvar NetworkQualityStats = require('../stats/networkqualitystats');\n/*\nParticipantSignaling States\n----------------------\n\n    +------------+     +-----------+     +--------------+\n    |            |     |           |     |              |\n    | connecting |---->| connected |---->| disconnected |\n    |            |     |           |     |              |\n    +------------+     +-----------+     +--------------+\n                           | ^                    ^\n                           | |  +--------------+  |\n                           | |--|              |  |\n                           |--->| reconnecting |--|\n                                |              |\n                                +--------------+\n*/\nvar states = {\n  connecting: ['connected'],\n  connected: ['disconnected', 'reconnecting'],\n  reconnecting: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link Participant} implementation\n * @extends StateMachine\n * @property {?string} identity\n * @property {?Participant.SID} sid\n * @property {string} state - \"connecting\", \"connected\", or \"disconnected\"\n * @property {Map<Track.ID | Track.SID, TrackSignaling>} tracks\n * @emits ParticipantSignaling#networkQualityLevelChanged\n * @emits ParticipantSignaling#trackAdded\n * @emits ParticipantSignaling#trackRemoved\n */\nvar ParticipantSignaling = /** @class */function (_super) {\n  __extends(ParticipantSignaling, _super);\n  /**\n   * Construct a {@link ParticipantSignaling}.\n   */\n  function ParticipantSignaling() {\n    var _this = _super.call(this, 'connecting', states) || this;\n    Object.defineProperties(_this, {\n      _identity: {\n        writable: true,\n        value: null\n      },\n      _networkQualityLevel: {\n        value: null,\n        writable: true\n      },\n      _networkQualityStats: {\n        value: null,\n        writable: true\n      },\n      _sid: {\n        writable: true,\n        value: null\n      },\n      identity: {\n        enumerable: true,\n        get: function () {\n          return this._identity;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get: function () {\n          return this._sid;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n    return _this;\n  }\n  Object.defineProperty(ParticipantSignaling.prototype, \"networkQualityLevel\", {\n    /**\n     * Get the current {@link NetworkQualityLevel}, if any.\n     * @returns {?NetworkQualityLevel} networkQualityLevel - initially null\n     */\n    get: function () {\n      return this._networkQualityLevel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticipantSignaling.prototype, \"networkQualityStats\", {\n    /**\n     * Get the current {@link NetworkQualityStats}\n     * @returns {?NetworkQualityStats} networkQualityStats - initially null\n     */\n    get: function () {\n      return this._networkQualityStats;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Add the {@link TrackSignaling}, MediaStreamTrack, or\n   * {@link DataTrackSender} to the {@link ParticipantSignaling}.\n   * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n   * @returns {this}\n   * @fires ParticipantSignaling#trackAdded\n   */\n  ParticipantSignaling.prototype.addTrack = function (track) {\n    this.tracks.set(track.id || track.sid, track);\n    this.emit('trackAdded', track);\n    return this;\n  };\n  /**\n   * Disconnect the {@link ParticipantSignaling}.\n   * @returns {boolean}\n   */\n  ParticipantSignaling.prototype.disconnect = function () {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected');\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Remove the {@link TrackSignaling}, MediaStreamTrack, or\n   * {@link DataTrackSender} from the {@link ParticipantSignaling}.\n   * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n   * @returns {?TrackSignaling}\n   * @fires ParticipantSignaling#trackRemoved\n   */\n  ParticipantSignaling.prototype.removeTrack = function (track) {\n    var signaling = this.tracks.get(track.id || track.sid);\n    this.tracks.delete(track.id || track.sid);\n    if (signaling) {\n      this.emit('trackRemoved', track);\n    }\n    return signaling || null;\n  };\n  /**\n   * @param {NetworkQualityLevel} networkQualityLevel\n   * @param {?NetworkQualityLevels} [networkQualityLevels=null]\n   * @returns {void}\n   */\n  ParticipantSignaling.prototype.setNetworkQualityLevel = function (networkQualityLevel, networkQualityLevels) {\n    if (this._networkQualityLevel !== networkQualityLevel) {\n      this._networkQualityLevel = networkQualityLevel;\n      this._networkQualityStats = networkQualityLevels && (networkQualityLevels.audio || networkQualityLevels.video) ? new NetworkQualityStats(networkQualityLevels) : null;\n      this.emit('networkQualityLevelChanged');\n    }\n  };\n  /**\n   * Connect the {@link ParticipantSignaling}.\n   * @param {Participant.SID} sid\n   * @param {string} identity\n   * @returns {boolean}\n   */\n  ParticipantSignaling.prototype.connect = function (sid, identity) {\n    if (this.state === 'connecting' || this.state === 'reconnecting') {\n      if (!this._sid) {\n        this._sid = sid;\n      }\n      if (!this._identity) {\n        this._identity = identity;\n      }\n      this.preempt('connected');\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Transition to \"reconnecting\" state.\n   * @returns {boolean}\n   */\n  ParticipantSignaling.prototype.reconnecting = function () {\n    if (this.state === 'connecting' || this.state === 'connected') {\n      this.preempt('reconnecting');\n      return true;\n    }\n    return false;\n  };\n  return ParticipantSignaling;\n}(StateMachine);\n/**\n * @event ParticipantSignaling#event:networkQualityLevelChanged\n */\n/**\n * {@link TrackSignaling} was added to the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackAdded\n * @param {TrackSignaling} track\n */\n/**\n * {@link TrackSignaling} was removed from the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackRemoved\n * @param {TrackSignaling} track\n */\nmodule.exports = ParticipantSignaling;","map":{"version":3,"mappings":"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","names":["StateMachine","require","NetworkQualityStats","states","connecting","connected","reconnecting","disconnected","__extends","_super","Object","defineProperties","_this","_identity","writable","value","_networkQualityLevel","_networkQualityStats","_sid","identity","enumerable","get","sid","tracks","Map","ParticipantSignaling","track","set","id","emit","state","preempt","signaling","delete","networkQualityLevel","networkQualityLevels","audio","video","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/signaling/participant.js"],"sourcesContent":["'use strict';\n\nconst StateMachine = require('../statemachine');\nconst NetworkQualityStats = require('../stats/networkqualitystats');\n\n/*\nParticipantSignaling States\n----------------------\n\n    +------------+     +-----------+     +--------------+\n    |            |     |           |     |              |\n    | connecting |---->| connected |---->| disconnected |\n    |            |     |           |     |              |\n    +------------+     +-----------+     +--------------+\n                           | ^                    ^\n                           | |  +--------------+  |\n                           | |--|              |  |\n                           |--->| reconnecting |--|\n                                |              |\n                                +--------------+\n*/\n\nconst states = {\n  connecting: [\n    'connected'\n  ],\n  connected: [\n    'disconnected',\n    'reconnecting'\n  ],\n  reconnecting: [\n    'connected',\n    'disconnected'\n  ],\n  disconnected: []\n};\n\n/**\n * A {@link Participant} implementation\n * @extends StateMachine\n * @property {?string} identity\n * @property {?Participant.SID} sid\n * @property {string} state - \"connecting\", \"connected\", or \"disconnected\"\n * @property {Map<Track.ID | Track.SID, TrackSignaling>} tracks\n * @emits ParticipantSignaling#networkQualityLevelChanged\n * @emits ParticipantSignaling#trackAdded\n * @emits ParticipantSignaling#trackRemoved\n */\nclass ParticipantSignaling extends StateMachine {\n  /**\n   * Construct a {@link ParticipantSignaling}.\n   */\n  constructor() {\n    super('connecting', states);\n\n    Object.defineProperties(this, {\n      _identity: {\n        writable: true,\n        value: null\n      },\n      _networkQualityLevel: {\n        value: null,\n        writable: true\n      },\n      _networkQualityStats: {\n        value: null,\n        writable: true\n      },\n      _sid: {\n        writable: true,\n        value: null\n      },\n      identity: {\n        enumerable: true,\n        get() {\n          return this._identity;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get() {\n          return this._sid;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevel}, if any.\n   * @returns {?NetworkQualityLevel} networkQualityLevel - initially null\n   */\n  get networkQualityLevel() {\n    return this._networkQualityLevel;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityStats}\n   * @returns {?NetworkQualityStats} networkQualityStats - initially null\n   */\n  get networkQualityStats() {\n    return this._networkQualityStats;\n  }\n\n  /**\n   * Add the {@link TrackSignaling}, MediaStreamTrack, or\n   * {@link DataTrackSender} to the {@link ParticipantSignaling}.\n   * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n   * @returns {this}\n   * @fires ParticipantSignaling#trackAdded\n   */\n  addTrack(track) {\n    this.tracks.set(track.id || track.sid, track);\n    this.emit('trackAdded', track);\n    return this;\n  }\n\n  /**\n   * Disconnect the {@link ParticipantSignaling}.\n   * @returns {boolean}\n   */\n  disconnect() {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Remove the {@link TrackSignaling}, MediaStreamTrack, or\n   * {@link DataTrackSender} from the {@link ParticipantSignaling}.\n   * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n   * @returns {?TrackSignaling}\n   * @fires ParticipantSignaling#trackRemoved\n   */\n  removeTrack(track) {\n    const signaling = this.tracks.get(track.id || track.sid);\n    this.tracks.delete(track.id || track.sid);\n    if (signaling) {\n      this.emit('trackRemoved', track);\n    }\n    return signaling || null;\n  }\n\n  /**\n   * @param {NetworkQualityLevel} networkQualityLevel\n   * @param {?NetworkQualityLevels} [networkQualityLevels=null]\n   * @returns {void}\n   */\n  setNetworkQualityLevel(networkQualityLevel, networkQualityLevels) {\n    if (this._networkQualityLevel !== networkQualityLevel) {\n      this._networkQualityLevel = networkQualityLevel;\n      this._networkQualityStats = networkQualityLevels\n      && (networkQualityLevels.audio || networkQualityLevels.video)\n        ? new NetworkQualityStats(networkQualityLevels)\n        : null;\n      this.emit('networkQualityLevelChanged');\n    }\n  }\n\n  /**\n   * Connect the {@link ParticipantSignaling}.\n   * @param {Participant.SID} sid\n   * @param {string} identity\n   * @returns {boolean}\n   */\n  connect(sid, identity) {\n    if (this.state === 'connecting' || this.state === 'reconnecting') {\n      if (!this._sid) {\n        this._sid = sid;\n      }\n      if (!this._identity) {\n        this._identity = identity;\n      }\n      this.preempt('connected');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Transition to \"reconnecting\" state.\n   * @returns {boolean}\n   */\n  reconnecting() {\n    if (this.state === 'connecting' || this.state === 'connected') {\n      this.preempt('reconnecting');\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\n * @event ParticipantSignaling#event:networkQualityLevelChanged\n */\n\n/**\n * {@link TrackSignaling} was added to the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackAdded\n * @param {TrackSignaling} track\n */\n\n/**\n * {@link TrackSignaling} was removed from the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackRemoved\n * @param {TrackSignaling} track\n */\n\nmodule.exports = ParticipantSignaling;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}