{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\nvar AsyncVar = /** @class */function () {\n  /**\n   * Construct an {@link AsyncVar}.\n   */\n  function AsyncVar() {\n    Object.defineProperties(this, {\n      _deferreds: {\n        value: []\n      },\n      _hasValue: {\n        value: false,\n        writable: true\n      },\n      _value: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Put a value into the {@link AsyncVar}.\n   * @param {T} value\n   * @returns {this}\n   */\n  AsyncVar.prototype.put = function (value) {\n    this._hasValue = true;\n    this._value = value;\n    var deferred = this._deferreds.shift();\n    if (deferred) {\n      deferred.resolve(value);\n    }\n    return this;\n  };\n  /**\n   * Take the value out of the {@link AsyncVar}.\n   * @returns {Promise<T>}\n   */\n  AsyncVar.prototype.take = function () {\n    var _this = this;\n    if (this._hasValue && !this._deferreds.length) {\n      this._hasValue = false;\n      return Promise.resolve(this._value);\n    }\n    var deferred = defer();\n    this._deferreds.push(deferred);\n    return deferred.promise.then(function (value) {\n      _this._hasValue = false;\n      return value;\n    });\n  };\n  return AsyncVar;\n}();\nmodule.exports = AsyncVar;","map":{"version":3,"mappings":"AAAA,YAAY;;AAEJ,SAAK,GAAKA,OAAO,CAAC,IAAI,CAAC,MAAlB;AAEb;;;;;;;;AAQA;EACE;;;EAGA;IACEC,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BC,UAAU,EAAE;QACVC,KAAK,EAAE;OACR;MACDC,SAAS,EAAE;QACTD,KAAK,EAAE,KAAK;QACZE,QAAQ,EAAE;OACX;MACDC,MAAM,EAAE;QACNH,KAAK,EAAE,IAAI;QACXE,QAAQ,EAAE;;KAEb,CAAC;EACJ;EAEA;;;;;EAKAE,sBAAG,GAAH,UAAIJ,KAAK;IACP,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACE,MAAM,GAAGH,KAAK;IACnB,IAAMK,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACO,KAAK,EAAE;IACxC,IAAID,QAAQ,EAAE;MACZA,QAAQ,CAACE,OAAO,CAACP,KAAK,CAAC;;IAEzB,OAAO,IAAI;EACb,CAAC;EAED;;;;EAIAI,uBAAI,GAAJ;IAAA;IACE,IAAI,IAAI,CAACH,SAAS,IAAI,CAAC,IAAI,CAACF,UAAU,CAACS,MAAM,EAAE;MAC7C,IAAI,CAACP,SAAS,GAAG,KAAK;MACtB,OAAOQ,OAAO,CAACF,OAAO,CAAC,IAAI,CAACJ,MAAM,CAAC;;IAErC,IAAME,QAAQ,GAAGK,KAAK,EAAE;IACxB,IAAI,CAACX,UAAU,CAACY,IAAI,CAACN,QAAQ,CAAC;IAC9B,OAAOA,QAAQ,CAACO,OAAO,CAACC,IAAI,CAAC,eAAK;MAChCC,KAAI,CAACb,SAAS,GAAG,KAAK;MACtB,OAAOD,KAAK;IACd,CAAC,CAAC;EACJ,CAAC;EACH,eAAC;AAAD,CAAC,EAnDD;AAqDAe,MAAM,CAACC,OAAO,GAAGZ,QAAQ","names":["require","Object","defineProperties","_deferreds","value","_hasValue","writable","_value","AsyncVar","deferred","shift","resolve","length","Promise","defer","push","promise","then","_this","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/util/asyncvar.js"],"sourcesContent":["'use strict';\n\nconst { defer } = require('./');\n\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\nclass AsyncVar {\n  /**\n   * Construct an {@link AsyncVar}.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _deferreds: {\n        value: []\n      },\n      _hasValue: {\n        value: false,\n        writable: true\n      },\n      _value: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Put a value into the {@link AsyncVar}.\n   * @param {T} value\n   * @returns {this}\n   */\n  put(value) {\n    this._hasValue = true;\n    this._value = value;\n    const deferred = this._deferreds.shift();\n    if (deferred) {\n      deferred.resolve(value);\n    }\n    return this;\n  }\n\n  /**\n   * Take the value out of the {@link AsyncVar}.\n   * @returns {Promise<T>}\n   */\n  take() {\n    if (this._hasValue && !this._deferreds.length) {\n      this._hasValue = false;\n      return Promise.resolve(this._value);\n    }\n    const deferred = defer();\n    this._deferreds.push(deferred);\n    return deferred.promise.then(value => {\n      this._hasValue = false;\n      return value;\n    });\n  }\n}\n\nmodule.exports = AsyncVar;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}