{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTurnCredentials = void 0;\n/* eslint-disable camelcase */\nvar TwilioConnection = require('../twilioconnection.js');\nvar ICE_VERSION = require('../util/constants').ICE_VERSION;\nvar _a = require('../util/twilio-video-errors'),\n  createTwilioError = _a.createTwilioError,\n  SignalingConnectionError = _a.SignalingConnectionError;\nvar events_1 = require(\"events\");\nfunction getTurnCredentials(token, wsServer) {\n  return new Promise(function (resolve, reject) {\n    var eventObserver = new events_1.EventEmitter();\n    var connectionOptions = {\n      networkMonitor: null,\n      eventObserver: eventObserver,\n      helloBody: {\n        edge: 'roaming',\n        preflight: true,\n        token: token,\n        type: 'ice',\n        version: ICE_VERSION\n      }\n    };\n    var twilioConnection = new TwilioConnection(wsServer, connectionOptions);\n    var done = false;\n    twilioConnection.once('close', function () {\n      if (!done) {\n        done = true;\n        reject(new SignalingConnectionError());\n      }\n    });\n    twilioConnection.on('message', function (messageData) {\n      var code = messageData.code,\n        message = messageData.message,\n        ice_servers = messageData.ice_servers,\n        type = messageData.type;\n      if ((type === 'iced' || type === 'error') && !done) {\n        done = true;\n        if (type === 'iced') {\n          resolve(ice_servers);\n        } else {\n          reject(createTwilioError(code, message));\n        }\n        twilioConnection.close();\n      }\n    });\n  });\n}\nexports.getTurnCredentials = getTurnCredentials;","map":{"version":3,"mappings":";;;;;;AAAA;AACA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAClD,eAAW,GAAKA,OAAO,CAAC,mBAAmB,CAAC,YAAjC;AACb,SAAkDA,OAAO,CAAC,6BAA6B,CAAC;EAAtFC,iBAAiB;EAAEC,wBAAwB,8BAA2C;AAG9F;AAIA,SAAgBC,kBAAkB,CAACC,KAAa,EAAEC,QAAgB;EAChE,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;IACjC,IAAMC,aAAa,GAAG,IAAIC,qBAAY,EAAE;IACxC,IAAMC,iBAAiB,GAAG;MACxBC,cAAc,EAAE,IAAI;MACpBH,aAAa;MACbI,SAAS,EAAE;QACTC,IAAI,EAAE,SAAS;QACfC,SAAS,EAAE,IAAI;QACfX,KAAK,EAAEA,KAAK;QACZY,IAAI,EAAE,KAAK;QACXC,OAAO,EAAEC;;KAEZ;IAED,IAAMC,gBAAgB,GAAG,IAAIpB,gBAAgB,CAACM,QAAQ,EAAEM,iBAAiB,CAAC;IAC1E,IAAIS,IAAI,GAAG,KAAK;IAChBD,gBAAgB,CAACE,IAAI,CAAC,OAAO,EAAE;MAC7B,IAAI,CAACD,IAAI,EAAE;QACTA,IAAI,GAAG,IAAI;QACXZ,MAAM,CAAC,IAAIN,wBAAwB,EAAE,CAAC;;IAE1C,CAAC,CAAC;IAEFiB,gBAAgB,CAACG,EAAE,CAAC,SAAS,EAAE,UAACC,WAK/B;MACS,QAAI,GAAiCA,WAAW,KAA5C;QAAEC,OAAO,GAAwBD,WAAW,QAAnC;QAAEE,WAAW,GAAWF,WAAW,YAAtB;QAAEP,IAAI,GAAKO,WAAW,KAAhB;MACxC,IAAI,CAACP,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,OAAO,KAAK,CAACI,IAAI,EAAE;QAClDA,IAAI,GAAG,IAAI;QACX,IAAIJ,IAAI,KAAK,MAAM,EAAE;UACnBT,OAAO,CAACkB,WAAW,CAAC;SACrB,MAAM;UACLjB,MAAM,CAACP,iBAAiB,CAACyB,IAAI,EAAEF,OAAO,CAAC,CAAC;;QAE1CL,gBAAgB,CAACQ,KAAK,EAAE;;IAE5B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AA1CAC","names":["TwilioConnection","require","createTwilioError","SignalingConnectionError","getTurnCredentials","token","wsServer","Promise","resolve","reject","eventObserver","events_1","connectionOptions","networkMonitor","helloBody","edge","preflight","type","version","ICE_VERSION","twilioConnection","done","once","on","messageData","message","ice_servers","code","close","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/preflight/getturncredentials.ts"],"sourcesContent":["/* eslint-disable camelcase */\nconst TwilioConnection = require('../twilioconnection.js');\nconst { ICE_VERSION } = require('../util/constants');\nconst { createTwilioError, SignalingConnectionError } = require('../util/twilio-video-errors');\n\nimport { RTCIceServer, RTCStats } from './rtctypes';\nimport { EventEmitter } from 'events';\n\n\nexport { RTCStats, RTCIceServer };\nexport function getTurnCredentials(token: string, wsServer: string): Promise<RTCIceServer[]> {\n  return new Promise((resolve, reject) => {\n    const eventObserver = new EventEmitter();\n    const connectionOptions = {\n      networkMonitor: null,\n      eventObserver,\n      helloBody: {\n        edge: 'roaming', // roaming here means use same edge as signaling.\n        preflight: true,\n        token: token,\n        type: 'ice',\n        version: ICE_VERSION\n      },\n    };\n\n    const twilioConnection = new TwilioConnection(wsServer, connectionOptions);\n    let done = false;\n    twilioConnection.once('close', () => {\n      if (!done) {\n        done = true;\n        reject(new SignalingConnectionError());\n      }\n    });\n\n    twilioConnection.on('message', (messageData: {\n      code: number;\n      message: string;\n      ice_servers: RTCIceServer[];\n      type: string;\n    }) => {\n      const { code, message, ice_servers, type } = messageData;\n      if ((type === 'iced' || type === 'error') && !done) {\n        done = true;\n        if (type === 'iced') {\n          resolve(ice_servers);\n        } else {\n          reject(createTwilioError(code, message));\n        }\n        twilioConnection.close();\n      }\n    });\n  });\n}\n\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}