{"ast":null,"code":"/* globals webkitAudioContext, AudioContext */\n'use strict';\n\nvar NativeAudioContext = typeof AudioContext !== 'undefined' ? AudioContext : typeof webkitAudioContext !== 'undefined' ? webkitAudioContext : null;\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\nvar AudioContextFactory = /** @class */function () {\n  /**\n   * @param {AudioContextFactoryOptions} [options]\n   */\n  function AudioContextFactory(options) {\n    options = Object.assign({\n      AudioContext: NativeAudioContext\n    }, options);\n    Object.defineProperties(this, {\n      _AudioContext: {\n        value: options.AudioContext\n      },\n      _audioContext: {\n        value: null,\n        writable: true\n      },\n      _holders: {\n        value: new Set()\n      },\n      AudioContextFactory: {\n        enumerable: true,\n        value: AudioContextFactory\n      }\n    });\n  }\n  /**\n   * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n   * call to {@link AudioContextFactory#release}. Calling this increments an\n   * internal reference count.\n   * @param {*} holder - The object to hold a reference to the AudioContext\n   * @returns {?AudioContext}\n   */\n  AudioContextFactory.prototype.getOrCreate = function (holder) {\n    if (!this._holders.has(holder)) {\n      this._holders.add(holder);\n      if (this._AudioContext && !this._audioContext) {\n        try {\n          this._audioContext = new this._AudioContext();\n        } catch (error) {\n          // Do nothing;\n        }\n      }\n    }\n    return this._audioContext;\n  };\n  /**\n   * Decrement the internal reference count. If it reaches zero, close and destroy\n   * the AudioContext.\n   * @param {*} holder - The object that held a reference to the AudioContext\n   * @returns {void}\n   */\n  AudioContextFactory.prototype.release = function (holder) {\n    if (this._holders.has(holder)) {\n      this._holders.delete(holder);\n      if (!this._holders.size && this._audioContext) {\n        this._audioContext.close();\n        this._audioContext = null;\n      }\n    }\n  };\n  return AudioContextFactory;\n}();\nmodule.exports = new AudioContextFactory();","map":{"version":3,"mappings":"AAAA;AACA,YAAY;;AAEZ,IAAMA,kBAAkB,GAAG,OAAOC,YAAY,KAAK,WAAW,GAC1DA,YAAY,GACZ,OAAOC,kBAAkB,KAAK,WAAW,GACvCA,kBAAkB,GAClB,IAAI;AAEV;;;;AAKA;;;;;;AAMA;EACE;;;EAGA,6BAAYC,OAAO;IACjBA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC;MACtBJ,YAAY,EAAED;KACf,EAAEG,OAAO,CAAC;IACXC,MAAM,CAACE,gBAAgB,CAAC,IAAI,EAAE;MAC5BC,aAAa,EAAE;QACbC,KAAK,EAAEL,OAAO,CAACF;OAChB;MACDQ,aAAa,EAAE;QACbD,KAAK,EAAE,IAAI;QACXE,QAAQ,EAAE;OACX;MACDC,QAAQ,EAAE;QACRH,KAAK,EAAE,IAAII,GAAG;OACf;MACDC,mBAAmB,EAAE;QACnBC,UAAU,EAAE,IAAI;QAChBN,KAAK,EAAEK;;KAEV,CAAC;EACJ;EAEA;;;;;;;EAOAA,yCAAW,GAAX,UAAYE,MAAM;IAChB,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACD,MAAM,CAAC,EAAE;MAC9B,IAAI,CAACJ,QAAQ,CAACM,GAAG,CAACF,MAAM,CAAC;MACzB,IAAI,IAAI,CAACR,aAAa,IAAI,CAAC,IAAI,CAACE,aAAa,EAAE;QAC7C,IAAI;UACF,IAAI,CAACA,aAAa,GAAG,IAAI,IAAI,CAACF,aAAa,EAAE;SAC9C,CAAC,OAAOW,KAAK,EAAE;UACd;QAAA;;;IAIN,OAAO,IAAI,CAACT,aAAa;EAC3B,CAAC;EAED;;;;;;EAMAI,qCAAO,GAAP,UAAQE,MAAM;IACZ,IAAI,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACD,MAAM,CAAC,EAAE;MAC7B,IAAI,CAACJ,QAAQ,CAACQ,MAAM,CAACJ,MAAM,CAAC;MAC5B,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACS,IAAI,IAAI,IAAI,CAACX,aAAa,EAAE;QAC7C,IAAI,CAACA,aAAa,CAACY,KAAK,EAAE;QAC1B,IAAI,CAACZ,aAAa,GAAG,IAAI;;;EAG/B,CAAC;EACH,0BAAC;AAAD,CAAC,EA9DD;AAgEAa,MAAM,CAACC,OAAO,GAAG,IAAIV,mBAAmB,EAAE","names":["NativeAudioContext","AudioContext","webkitAudioContext","options","Object","assign","defineProperties","_AudioContext","value","_audioContext","writable","_holders","Set","AudioContextFactory","enumerable","holder","has","add","error","delete","size","close","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/webaudio/audiocontext.js"],"sourcesContent":["/* globals webkitAudioContext, AudioContext */\n'use strict';\n\nconst NativeAudioContext = typeof AudioContext !== 'undefined'\n  ? AudioContext\n  : typeof webkitAudioContext !== 'undefined'\n    ? webkitAudioContext\n    : null;\n\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\nclass AudioContextFactory {\n  /**\n   * @param {AudioContextFactoryOptions} [options]\n   */\n  constructor(options) {\n    options = Object.assign({\n      AudioContext: NativeAudioContext\n    }, options);\n    Object.defineProperties(this, {\n      _AudioContext: {\n        value: options.AudioContext\n      },\n      _audioContext: {\n        value: null,\n        writable: true\n      },\n      _holders: {\n        value: new Set()\n      },\n      AudioContextFactory: {\n        enumerable: true,\n        value: AudioContextFactory\n      }\n    });\n  }\n\n  /**\n   * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n   * call to {@link AudioContextFactory#release}. Calling this increments an\n   * internal reference count.\n   * @param {*} holder - The object to hold a reference to the AudioContext\n   * @returns {?AudioContext}\n   */\n  getOrCreate(holder) {\n    if (!this._holders.has(holder)) {\n      this._holders.add(holder);\n      if (this._AudioContext && !this._audioContext) {\n        try {\n          this._audioContext = new this._AudioContext();\n        } catch (error) {\n          // Do nothing;\n        }\n      }\n    }\n    return this._audioContext;\n  }\n\n  /**\n   * Decrement the internal reference count. If it reaches zero, close and destroy\n   * the AudioContext.\n   * @param {*} holder - The object that held a reference to the AudioContext\n   * @returns {void}\n   */\n  release(holder) {\n    if (this._holders.has(holder)) {\n      this._holders.delete(holder);\n      if (!this._holders.size && this._audioContext) {\n        this._audioContext.close();\n        this._audioContext = null;\n      }\n    }\n  }\n}\n\nmodule.exports = new AudioContextFactory();\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}