{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\n/**\n * A Promise that can be canceled with {@link CancelablePromise#cancel}.\n * @extends Promise\n*/\nvar CancelablePromise = /** @class */function () {\n  /**\n   * Construct a new {@link CancelablePromise}.\n   * @param {CancelablePromise.OnCreate} onCreate\n   * @param {CancelablePromise.OnCancel} onCancel\n  */ /**\n     * A function to be called on {@link CancelablePromise} creation\n     * @typedef {function} CancelablePromise.OnCreate\n     * @param {function(*)} resolve\n     * @param {function(*)} reject\n     * @param {function(): boolean} isCanceled\n     */ /**\n        * A function to be called when {@link CancelablePromise#cancel} is called\n        * @typedef {function} CancelablePromise.OnCancel\n        */\n  function CancelablePromise(onCreate, onCancel) {\n    var _this = this;\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _isCancelable: {\n        writable: true,\n        value: true\n      },\n      _isCanceled: {\n        writable: true,\n        value: false\n      },\n      _onCancel: {\n        value: onCancel\n      }\n    });\n    Object.defineProperty(this, '_promise', {\n      value: new Promise(function (resolve, reject) {\n        onCreate(function (value) {\n          _this._isCancelable = false;\n          resolve(value);\n        }, function (reason) {\n          _this._isCancelable = false;\n          reject(reason);\n        }, function () {\n          return _this._isCanceled;\n        });\n      })\n    });\n  }\n  /**\n   * Create a synchronously-rejected {@link CancelablePromise}.\n   * @param {*} reason\n   * @returns {Promise<*>}\n   */\n  CancelablePromise.reject = function (reason) {\n    return new CancelablePromise(function rejected(resolve, reject) {\n      reject(reason);\n    }, function onCancel() {\n      // Do nothing.\n    });\n  };\n  /**\n   * Create a synchronously-resolved {@link CancelablePromise}.\n   * @param {*|Promise<*>|Thenable<*>} result\n   * @returns {CancelablePromise<*>}\n   */\n  CancelablePromise.resolve = function (result) {\n    return new CancelablePromise(function resolved(resolve) {\n      resolve(result);\n    }, function onCancel() {\n      // Do nothing.\n    });\n  };\n  /**\n   * Attempt to cancel the {@link CancelablePromise}.\n   * @returns {this}\n   */\n  CancelablePromise.prototype.cancel = function () {\n    if (this._isCancelable) {\n      this._isCanceled = true;\n      this._onCancel();\n    }\n    return this;\n  };\n  /**\n   * @param {function} onRejected\n   * @returns {CancelablePromise}\n   */\n  CancelablePromise.prototype.catch = function () {\n    var args = [].slice.call(arguments);\n    var promise = this._promise;\n    return new CancelablePromise(function onCreate(resolve, reject) {\n      promise.catch.apply(promise, __spreadArray([], __read(args))).then(resolve, reject);\n    }, this._onCancel);\n  };\n  /**\n   * @param {?function} onResolved\n   * @param {function} [onRejected]\n   * @returns {CancelablePromise}\n   */\n  CancelablePromise.prototype.then = function () {\n    var args = [].slice.call(arguments);\n    var promise = this._promise;\n    return new CancelablePromise(function onCreate(resolve, reject) {\n      promise.then.apply(promise, __spreadArray([], __read(args))).then(resolve, reject);\n    }, this._onCancel);\n  };\n  /**\n  * @param {?function} onFinally\n  * @returns {CancelablePromise}\n  */\n  CancelablePromise.prototype.finally = function () {\n    var args = [].slice.call(arguments);\n    var promise = this._promise;\n    return new CancelablePromise(function onCreate(resolve, reject) {\n      promise.finally.apply(promise, __spreadArray([], __read(args))).then(resolve, reject);\n    }, this._onCancel);\n  };\n  return CancelablePromise;\n}();\nmodule.exports = CancelablePromise;","map":{"version":3,"mappings":"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","names":["onCreate","onCancel","Object","defineProperties","_isCancelable","writable","value","_isCanceled","_onCancel","defineProperty","Promise","resolve","reject","_this","reason","CancelablePromise","rejected","result","resolved","args","slice","call","arguments","promise","_promise","catch","then","finally","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/util/cancelablepromise.js"],"sourcesContent":["'use strict';\n\n/**\n * A Promise that can be canceled with {@link CancelablePromise#cancel}.\n * @extends Promise\n*/\nclass CancelablePromise {\n  /**\n   * Construct a new {@link CancelablePromise}.\n   * @param {CancelablePromise.OnCreate} onCreate\n   * @param {CancelablePromise.OnCancel} onCancel\n  *//**\n   * A function to be called on {@link CancelablePromise} creation\n   * @typedef {function} CancelablePromise.OnCreate\n   * @param {function(*)} resolve\n   * @param {function(*)} reject\n   * @param {function(): boolean} isCanceled\n  *//**\n   * A function to be called when {@link CancelablePromise#cancel} is called\n   * @typedef {function} CancelablePromise.OnCancel\n   */\n  constructor(onCreate, onCancel) {\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _isCancelable: {\n        writable: true,\n        value: true\n      },\n      _isCanceled: {\n        writable: true,\n        value: false\n      },\n      _onCancel: {\n        value: onCancel\n      }\n    });\n\n    Object.defineProperty(this, '_promise', {\n      value: new Promise((resolve, reject) => {\n        onCreate(value => {\n          this._isCancelable = false;\n          resolve(value);\n        }, reason => {\n          this._isCancelable = false;\n          reject(reason);\n        }, () => this._isCanceled);\n      })\n    });\n  }\n\n  /**\n   * Create a synchronously-rejected {@link CancelablePromise}.\n   * @param {*} reason\n   * @returns {Promise<*>}\n   */\n  static reject(reason) {\n    return new CancelablePromise(function rejected(resolve, reject) {\n      reject(reason);\n    }, function onCancel() {\n      // Do nothing.\n    });\n  }\n\n  /**\n   * Create a synchronously-resolved {@link CancelablePromise}.\n   * @param {*|Promise<*>|Thenable<*>} result\n   * @returns {CancelablePromise<*>}\n   */\n  static resolve(result) {\n    return new CancelablePromise(function resolved(resolve) {\n      resolve(result);\n    }, function onCancel() {\n      // Do nothing.\n    });\n  }\n\n  /**\n   * Attempt to cancel the {@link CancelablePromise}.\n   * @returns {this}\n   */\n  cancel() {\n    if (this._isCancelable) {\n      this._isCanceled = true;\n      this._onCancel();\n    }\n    return this;\n  }\n\n  /**\n   * @param {function} onRejected\n   * @returns {CancelablePromise}\n   */\n  catch() {\n    const args = [].slice.call(arguments);\n    const promise = this._promise;\n    return new CancelablePromise(function onCreate(resolve, reject) {\n      promise.catch(...args).then(resolve, reject);\n    }, this._onCancel);\n  }\n\n  /**\n   * @param {?function} onResolved\n   * @param {function} [onRejected]\n   * @returns {CancelablePromise}\n   */\n  then() {\n    const args = [].slice.call(arguments);\n    const promise = this._promise;\n    return new CancelablePromise(function onCreate(resolve, reject) {\n      promise.then(...args).then(resolve, reject);\n    }, this._onCancel);\n  }\n\n  /**\n * @param {?function} onFinally\n * @returns {CancelablePromise}\n */\n  finally() {\n    const args = [].slice.call(arguments);\n    const promise = this._promise;\n    return new CancelablePromise(function onCreate(resolve, reject) {\n      promise.finally(...args).then(resolve, reject);\n    }, this._onCancel);\n  }\n}\n\nmodule.exports = CancelablePromise;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}