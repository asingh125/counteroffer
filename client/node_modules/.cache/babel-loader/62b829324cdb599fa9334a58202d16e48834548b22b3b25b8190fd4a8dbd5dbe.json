{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar StateMachine = require('./statemachine');\nvar _a = require('./util'),\n  buildLogLevels = _a.buildLogLevels,\n  makeUUID = _a.makeUUID;\nvar Log = require('./util/log');\nvar NetworkMonitor = require('./util/networkmonitor');\nvar Timeout = require('./util/timeout');\nvar nInstances = 0;\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\nvar events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\nvar TCMP_VERSION = 2;\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_OPEN_TIMEOUT = 15000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\nvar WS_CLOSE_BUSY_WAIT = 3005;\nvar WS_CLOSE_SERVER_BUSY = 3006;\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\nvar toplevel = globalThis;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\nvar wsCloseCodesToCloseReasons = new Map([[WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT], [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT], [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED], [WS_CLOSE_SEND_FAILED, CloseReason.FAILED], [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT], [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY], [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]]);\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\nvar TwilioConnection = /** @class */function (_super) {\n  __extends(TwilioConnection, _super);\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n  function TwilioConnection(serverUrl, options) {\n    var _this = _super.call(this, 'early', states) || this;\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels, options.loggerName);\n    var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\n      var type = networkMonitor.type;\n      var reason = \"Network changed\" + (type ? \" to \" + type : '');\n      log.debug(reason);\n      _this._close({\n        code: WS_CLOSE_NETWORK_CHANGED,\n        reason: reason\n      });\n    }) : null;\n    Object.defineProperties(_this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n    var eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n    _this.on('stateChanged', function (state) {\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n      if (state in events) {\n        _this.emit.apply(_this, __spreadArray([events[state]], __read(args)));\n      }\n      var event = {\n        name: state,\n        group: 'signaling',\n        level: eventsToLevels[_this.state]\n      };\n      if (state === 'closed') {\n        var _a = __read(args, 1),\n          reason = _a[0];\n        event.payload = {\n          reason: reason\n        };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n      _this._eventObserver.emit('event', event);\n    });\n    _this._eventObserver.emit('event', {\n      name: _this.state,\n      group: 'signaling',\n      level: eventsToLevels[_this.state]\n    });\n    _this._connect();\n    return _this;\n  }\n  TwilioConnection.prototype.toString = function () {\n    return \"[TwilioConnection #\" + this._instanceId + \": \" + this._ws.url + \"]\";\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n  TwilioConnection.prototype._close = function (_a) {\n    var code = _a.code,\n      reason = _a.reason;\n    if (this.state === 'closed') {\n      return;\n    }\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n    this._messageQueue.splice(0);\n    var log = this._log;\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(\"Closed: \" + code + \" - \" + reason);\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE]);\n      }\n    }\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  };\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n  TwilioConnection.prototype._connect = function () {\n    var _this = this;\n    var log = this._log;\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for connecting to the\" + ' TCMP server.');\n      return;\n    }\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    var ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', function (event) {\n      return _this._close(event);\n    });\n    var openTimeout = this._options.openTimeout;\n    // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n    this._openTimeout = new Timeout(function () {\n      var reason = \"Failed to open in \" + openTimeout + \" ms\";\n      _this._close({\n        code: WS_CLOSE_OPEN_TIMEOUT,\n        reason: reason\n      });\n    }, openTimeout);\n    ws.addEventListener('open', function () {\n      log.debug('WebSocket opened:', ws);\n      _this._openTimeout.clear();\n      _this._startHandshake();\n      if (_this._networkMonitor) {\n        _this._networkMonitor.start();\n      }\n    });\n    ws.addEventListener('message', function (message) {\n      log.debug(\"Incoming: \" + message.data);\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        _this.emit('error', error);\n        return;\n      }\n      switch (message.type) {\n        case 'bad':\n          _this._handleBad(message);\n          break;\n        case 'busy':\n          _this._handleBusy(message);\n          break;\n        case 'bye':\n          // Do nothing.\n          break;\n        case 'msg':\n          _this._handleMessage(message);\n        // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n        // heartbeat intentionally falling through to 'heartbeat' case.\n        // eslint-disable-next-line no-fallthrough\n        case 'heartbeat':\n          _this._handleHeartbeat();\n          break;\n        case 'welcome':\n          _this._handleWelcome(message);\n          break;\n        default:\n          _this._log.debug(\"Unknown message type: \" + message.type);\n          _this.emit('error', new Error(\"Unknown message type: \" + message.type));\n          break;\n      }\n    });\n  };\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n  TwilioConnection.prototype._handleBad = function (_a) {\n    var reason = _a.reason;\n    var log = this._log;\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"bad\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n    if (this.state === 'connecting') {\n      log.warn(\"Closing: \" + WS_CLOSE_HELLO_FAILED + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_HELLO_FAILED,\n        reason: reason\n      });\n      return;\n    }\n    log.debug(\"Error: \" + reason);\n    this.emit('error', new Error(reason));\n  };\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n  TwilioConnection.prototype._handleBusy = function (_a) {\n    var _this = this;\n    var cookie = _a.cookie,\n      keepAlive = _a.keepAlive,\n      retryAfter = _a.retryAfter;\n    var log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"busy\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    var reason = retryAfter < 0 ? 'Received terminal \"busy\" message' : \"Received \\\"busy\\\" message, retrying after \" + retryAfter + \" ms\";\n    if (retryAfter < 0) {\n      log.warn(\"Closing: \" + WS_CLOSE_SERVER_BUSY + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_SERVER_BUSY,\n        reason: reason\n      });\n      return;\n    }\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._startHandshake();\n      }, retryAfter);\n    } else {\n      log.warn(\"Closing: \" + WS_CLOSE_BUSY_WAIT + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_BUSY_WAIT,\n        reason: reason\n      });\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._connect();\n      }, retryAfter);\n    }\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  };\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n  TwilioConnection.prototype._handleHeartbeat = function () {\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"heartbeat\\\"\" + ' message from the TCMP server.');\n      return;\n    }\n    this._heartbeatTimeout.reset();\n  };\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n  TwilioConnection.prototype._handleHeartbeatTimeout = function () {\n    if (this.state !== 'open') {\n      return;\n    }\n    var log = this._log;\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    log.debug(\"Consecutive heartbeats missed: \" + maxConsecutiveMissedHeartbeats);\n    var reason = \"Missed \" + maxConsecutiveMissedHeartbeats + \" \\\"heartbeat\\\" messages\";\n    log.warn(\"Closing: \" + WS_CLOSE_HEARTBEATS_MISSED + \" - \" + reason);\n    this._close({\n      code: WS_CLOSE_HEARTBEATS_MISSED,\n      reason: reason\n    });\n  };\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n  TwilioConnection.prototype._handleMessage = function (_a) {\n    var body = _a.body;\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"msg\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n    this.emit('message', body);\n  };\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n  TwilioConnection.prototype._handleWelcome = function (_a) {\n    var _this = this;\n    var negotiatedTimeout = _a.negotiatedTimeout;\n    var log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"welcome\\\"\" + ' message from the TCMP server.');\n      return;\n    }\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n      this._busyWaitTimeout.clear();\n    }\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n    this._welcomeTimeout.clear();\n    this._heartbeatTimeout = new Timeout(function () {\n      return _this._handleHeartbeatTimeout();\n    }, heartbeatTimeout);\n    this._messageQueue.splice(0).forEach(function (message) {\n      return _this._send(message);\n    });\n    this._sendHeartbeatTimeout = new Timeout(function () {\n      return _this._sendHeartbeat();\n    }, outgoingHeartbeatTimeout);\n    this.transition('open');\n  };\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n  TwilioConnection.prototype._handleWelcomeTimeout = function () {\n    if (this.state !== 'connecting') {\n      return;\n    }\n    var log = this._log;\n    if (this._hellosLeft <= 0) {\n      var reason = 'All handshake attempts failed';\n      log.warn(\"Closing: \" + WS_CLOSE_WELCOME_TIMEOUT + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_WELCOME_TIMEOUT,\n        reason: reason\n      });\n      return;\n    }\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    log.warn(\"Handshake attempt \" + (maxConsecutiveFailedHellos - this._hellosLeft) + \" failed\");\n    this._startHandshake();\n  };\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n  TwilioConnection.prototype._send = function (message) {\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n    if (readyState === WebSocket.OPEN) {\n      var data = JSON.stringify(message);\n      this._log.debug(\"Outgoing: \" + data);\n      try {\n        this._ws.send(data);\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        var reason = 'Failed to send message';\n        this._log.warn(\"Closing: \" + WS_CLOSE_SEND_FAILED + \" - \" + reason);\n        this._close({\n          code: WS_CLOSE_SEND_FAILED,\n          reason: reason\n        });\n      }\n    }\n  };\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n  TwilioConnection.prototype._sendHeartbeat = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._send({\n      type: 'heartbeat'\n    });\n  };\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n  TwilioConnection.prototype._sendHello = function () {\n    var _a = this._options,\n      helloBody = _a.helloBody,\n      timeout = _a.requestedHeartbeatTimeout;\n    var hello = {\n      id: makeUUID(),\n      timeout: timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n    this._send(hello);\n  };\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n  TwilioConnection.prototype._sendOrEnqueue = function (message) {\n    var _this = this;\n    if (this.state === 'closed') {\n      return;\n    }\n    var sendOrEnqueue = this.state === 'open' ? function (message) {\n      return _this._send(message);\n    } : function (message) {\n      return _this._messageQueue.push(message);\n    };\n    sendOrEnqueue(message);\n  };\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n  TwilioConnection.prototype._startHandshake = function () {\n    var _this = this;\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n    if (this.state !== 'connecting') {\n      return;\n    }\n    this._hellosLeft--;\n    this._sendHello();\n    var welcomeTimeout = this._options.welcomeTimeout;\n    this._welcomeTimeout = new Timeout(function () {\n      return _this._handleWelcomeTimeout();\n    }, welcomeTimeout);\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n  TwilioConnection.prototype.close = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._sendOrEnqueue({\n      type: 'bye'\n    });\n    this._close({\n      code: WS_CLOSE_NORMAL,\n      reason: 'Normal'\n    });\n  };\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n  TwilioConnection.prototype.sendMessage = function (body) {\n    this._sendOrEnqueue({\n      body: body,\n      type: 'msg'\n    });\n  };\n  return TwilioConnection;\n}(StateMachine);\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\nTwilioConnection.CloseReason = CloseReason;\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\nmodule.exports = TwilioConnection;","map":{"version":3,"mappings":"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","names":["StateMachine","require","buildLogLevels","makeUUID","Log","NetworkMonitor","Timeout","nInstances","states","closed","connecting","early","open","waiting","events","TCMP_VERSION","DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS","DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS","DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT","DEFAULT_OPEN_TIMEOUT","DEFAULT_WELCOME_TIMEOUT","OUTGOING_HEARTBEAT_OFFSET","WS_CLOSE_NORMAL","WS_CLOSE_WELCOME_TIMEOUT","WS_CLOSE_HEARTBEATS_MISSED","WS_CLOSE_HELLO_FAILED","WS_CLOSE_SEND_FAILED","WS_CLOSE_NETWORK_CHANGED","WS_CLOSE_BUSY_WAIT","WS_CLOSE_SERVER_BUSY","WS_CLOSE_OPEN_TIMEOUT","toplevel","globalThis","WebSocket","CloseReason","BUSY","FAILED","LOCAL","REMOTE","TIMEOUT","wsCloseCodesToCloseReasons","Map","__extends","serverUrl","options","_super","Object","assign","helloBody","maxConsecutiveFailedHellos","maxConsecutiveMissedHeartbeats","requestedHeartbeatTimeout","openTimeout","welcomeTimeout","logLevels","logLevel","log","_this","loggerName","networkMonitor","reason","type","debug","_close","code","defineProperties","_busyWaitTimeout","value","writable","_consecutiveHeartbeatsMissed","_cookie","_eventObserver","eventObserver","_heartbeatTimeout","_hellosLeft","_instanceId","_log","_messageQueue","_networkMonitor","_options","_openTimeout","_sendHeartbeatTimeout","_serverUrl","_welcomeTimeout","_ws","eventsToLevels","on","state","_i","args","emit","event","name","group","level","payload","_connect","TwilioConnection","url","_a","clear","stop","splice","transition","warn","get","readyState","CLOSING","CLOSED","close","ws","addEventListener","_startHandshake","start","message","data","JSON","parse","error","_handleBad","_handleBusy","_handleMessage","_handleHeartbeat","_handleWelcome","Error","includes","cookie","keepAlive","retryAfter","reset","body","negotiatedTimeout","heartbeatTimeout","outgoingHeartbeatTimeout","_handleHeartbeatTimeout","forEach","_send","_sendHeartbeat","OPEN","stringify","send","timeout","hello","id","version","sendOrEnqueue","push","_sendHello","_handleWelcomeTimeout","_sendOrEnqueue","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/twilioconnection.js"],"sourcesContent":["'use strict';\n\nconst StateMachine = require('./statemachine');\nconst { buildLogLevels, makeUUID } = require('./util');\nconst Log = require('./util/log');\nconst NetworkMonitor = require('./util/networkmonitor');\nconst Timeout = require('./util/timeout');\n\nlet nInstances = 0;\n\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\n\nconst states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\n\nconst events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\n\nconst TCMP_VERSION = 2;\n\nconst DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nconst DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nconst DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nconst DEFAULT_OPEN_TIMEOUT = 15000;\nconst DEFAULT_WELCOME_TIMEOUT = 5000;\nconst OUTGOING_HEARTBEAT_OFFSET = 200;\n\nconst WS_CLOSE_NORMAL = 1000;\nconst WS_CLOSE_WELCOME_TIMEOUT = 3000;\nconst WS_CLOSE_HEARTBEATS_MISSED = 3001;\nconst WS_CLOSE_HELLO_FAILED = 3002;\nconst WS_CLOSE_SEND_FAILED = 3003;\nconst WS_CLOSE_NETWORK_CHANGED = 3004;\nconst WS_CLOSE_BUSY_WAIT = 3005;\nconst WS_CLOSE_SERVER_BUSY = 3006;\nconst WS_CLOSE_OPEN_TIMEOUT = 3007;\n\nconst toplevel = globalThis;\nconst WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nconst CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\n\nconst wsCloseCodesToCloseReasons = new Map([\n  [WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT],\n  [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT],\n  [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED],\n  [WS_CLOSE_SEND_FAILED, CloseReason.FAILED],\n  [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT],\n  [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY],\n  [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]\n]);\n\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\nclass TwilioConnection extends StateMachine {\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n  constructor(serverUrl, options) {\n    super('early', states);\n\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log,\n      WebSocket\n    }, options);\n\n    const logLevels = buildLogLevels(options.logLevel);\n    const log = new options.Log('default', this, logLevels, options.loggerName);\n\n    const networkMonitor = options.networkMonitor ? new NetworkMonitor(() => {\n      const { type } = networkMonitor;\n      const reason = `Network changed${type ? ` to ${type}` : ''}`;\n      log.debug(reason);\n      this._close({ code: WS_CLOSE_NETWORK_CHANGED, reason });\n    }) : null;\n\n    Object.defineProperties(this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n\n    const eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n\n    this.on('stateChanged', (state, ...args) => {\n      if (state in events) {\n        this.emit(events[state], ...args);\n      }\n      const event = { name: state, group: 'signaling', level: eventsToLevels[this.state] };\n      if (state === 'closed') {\n        const [reason] = args;\n        event.payload = { reason };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n      this._eventObserver.emit('event', event);\n    });\n\n    this._eventObserver.emit('event', { name: this.state, group: 'signaling', level: eventsToLevels[this.state] });\n    this._connect();\n  }\n\n  toString() {\n    return `[TwilioConnection #${this._instanceId}: ${this._ws.url}]`;\n  }\n\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n  _close({ code, reason }) {\n    if (this.state === 'closed') {\n      return;\n    }\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n    this._messageQueue.splice(0);\n    const log = this._log;\n\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(`Closed: ${code} - ${reason}`);\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [\n          wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE\n        ]);\n      }\n    }\n    const { readyState } = this._ws;\n    const { WebSocket } = this._options;\n\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n  _connect() {\n    const log = this._log;\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(`Unexpected state \"${this.state}\" for connecting to the`\n        + ' TCMP server.');\n      return;\n    }\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    const ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', event => this._close(event));\n\n    const { openTimeout } = this._options;\n    // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n    this._openTimeout = new Timeout(() => {\n      const reason = `Failed to open in ${openTimeout} ms`;\n      this._close({ code: WS_CLOSE_OPEN_TIMEOUT, reason });\n    }, openTimeout);\n\n    ws.addEventListener('open', () => {\n      log.debug('WebSocket opened:', ws);\n      this._openTimeout.clear();\n      this._startHandshake();\n      if (this._networkMonitor) {\n        this._networkMonitor.start();\n      }\n    });\n\n    ws.addEventListener('message', message => {\n      log.debug(`Incoming: ${message.data}`);\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        this.emit('error', error);\n        return;\n      }\n\n      switch (message.type) {\n        case 'bad':\n          this._handleBad(message);\n          break;\n        case 'busy':\n          this._handleBusy(message);\n          break;\n        case 'bye':\n          // Do nothing.\n          break;\n        case 'msg':\n          this._handleMessage(message);\n          // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n          // heartbeat intentionally falling through to 'heartbeat' case.\n          // eslint-disable-next-line no-fallthrough\n        case 'heartbeat':\n          this._handleHeartbeat();\n          break;\n        case 'welcome':\n          this._handleWelcome(message);\n          break;\n        default:\n          this._log.debug(`Unknown message type: ${message.type}`);\n          this.emit('error', new Error(`Unknown message type: ${message.type}`));\n          break;\n      }\n    });\n  }\n\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n  _handleBad({ reason }) {\n    const log = this._log;\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"bad\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    if (this.state === 'connecting') {\n      log.warn(`Closing: ${WS_CLOSE_HELLO_FAILED} - ${reason}`);\n      this._close({ code: WS_CLOSE_HELLO_FAILED, reason });\n      return;\n    }\n    log.debug(`Error: ${reason}`);\n    this.emit('error', new Error(reason));\n  }\n\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n  _handleBusy({ cookie, keepAlive, retryAfter }) {\n    const log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"busy\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    const reason = retryAfter < 0\n      ? 'Received terminal \"busy\" message'\n      : `Received \"busy\" message, retrying after ${retryAfter} ms`;\n\n    if (retryAfter < 0) {\n      log.warn(`Closing: ${WS_CLOSE_SERVER_BUSY} - ${reason}`);\n      this._close({ code: WS_CLOSE_SERVER_BUSY, reason });\n      return;\n    }\n    const { maxConsecutiveFailedHellos } = this._options;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(() => this._startHandshake(), retryAfter);\n    } else {\n      log.warn(`Closing: ${WS_CLOSE_BUSY_WAIT} - ${reason}`);\n      this._close({ code: WS_CLOSE_BUSY_WAIT, reason });\n      this._busyWaitTimeout = new Timeout(() => this._connect(), retryAfter);\n    }\n\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  }\n\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n  _handleHeartbeat() {\n    if (this.state !== 'open') {\n      this._log.warn(`Unexpected state \"${this.state}\" for handling a \"heartbeat\"`\n        + ' message from the TCMP server.');\n      return;\n    }\n    this._heartbeatTimeout.reset();\n  }\n\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n  _handleHeartbeatTimeout() {\n    if (this.state !== 'open') {\n      return;\n    }\n    const log = this._log;\n    const { maxConsecutiveMissedHeartbeats } = this._options;\n\n    log.debug(`Consecutive heartbeats missed: ${maxConsecutiveMissedHeartbeats}`);\n    const reason = `Missed ${maxConsecutiveMissedHeartbeats} \"heartbeat\" messages`;\n    log.warn(`Closing: ${WS_CLOSE_HEARTBEATS_MISSED} - ${reason}`);\n    this._close({ code: WS_CLOSE_HEARTBEATS_MISSED, reason });\n  }\n\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n  _handleMessage({ body }) {\n    if (this.state !== 'open') {\n      this._log.warn(`Unexpected state \"${this.state}\" for handling a \"msg\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    this.emit('message', body);\n  }\n\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n  _handleWelcome({ negotiatedTimeout }) {\n    const log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"welcome\"`\n        + ' message from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n      this._busyWaitTimeout.clear();\n    }\n\n    const { maxConsecutiveMissedHeartbeats } = this._options;\n    const heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    const outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n\n    this._welcomeTimeout.clear();\n    this._heartbeatTimeout = new Timeout(() => this._handleHeartbeatTimeout(), heartbeatTimeout);\n    this._messageQueue.splice(0).forEach(message => this._send(message));\n    this._sendHeartbeatTimeout = new Timeout(() => this._sendHeartbeat(), outgoingHeartbeatTimeout);\n    this.transition('open');\n  }\n\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n  _handleWelcomeTimeout() {\n    if (this.state !== 'connecting') {\n      return;\n    }\n    const log = this._log;\n\n    if (this._hellosLeft <= 0) {\n      const reason = 'All handshake attempts failed';\n      log.warn(`Closing: ${WS_CLOSE_WELCOME_TIMEOUT} - ${reason}`);\n      this._close({ code: WS_CLOSE_WELCOME_TIMEOUT, reason });\n      return;\n    }\n\n    const { maxConsecutiveFailedHellos } = this._options;\n    log.warn(`Handshake attempt ${maxConsecutiveFailedHellos - this._hellosLeft} failed`);\n    this._startHandshake();\n  }\n\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n  _send(message) {\n    const { readyState } = this._ws;\n    const { WebSocket } = this._options;\n    if (readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message);\n      this._log.debug(`Outgoing: ${data}`);\n      try {\n        this._ws.send(data);\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        const reason = 'Failed to send message';\n        this._log.warn(`Closing: ${WS_CLOSE_SEND_FAILED} - ${reason}`);\n        this._close({ code: WS_CLOSE_SEND_FAILED, reason });\n      }\n    }\n  }\n\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n  _sendHeartbeat() {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._send({ type: 'heartbeat' });\n  }\n\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n  _sendHello() {\n    const { helloBody, requestedHeartbeatTimeout: timeout } = this._options;\n    const hello = {\n      id: makeUUID(),\n      timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n    this._send(hello);\n  }\n\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n  _sendOrEnqueue(message) {\n    if (this.state === 'closed') {\n      return;\n    }\n    const sendOrEnqueue = this.state === 'open'\n      ? message => this._send(message)\n      : message => this._messageQueue.push(message);\n\n    sendOrEnqueue(message);\n  }\n\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n  _startHandshake() {\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n    if (this.state !== 'connecting') {\n      return;\n    }\n    this._hellosLeft--;\n    this._sendHello();\n    const { welcomeTimeout } = this._options;\n    this._welcomeTimeout = new Timeout(() => this._handleWelcomeTimeout(), welcomeTimeout);\n  }\n\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n  close() {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._sendOrEnqueue({ type: 'bye' });\n    this._close({ code: WS_CLOSE_NORMAL, reason: 'Normal' });\n  }\n\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n  sendMessage(body) {\n    this._sendOrEnqueue({ body, type: 'msg' });\n  }\n}\n\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\nTwilioConnection.CloseReason = CloseReason;\n\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\nmodule.exports = TwilioConnection;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}