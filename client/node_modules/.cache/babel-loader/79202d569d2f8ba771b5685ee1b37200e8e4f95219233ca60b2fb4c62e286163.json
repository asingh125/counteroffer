{"ast":null,"code":"/* eslint consistent-return:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar ParticipantSignaling = require('./participant');\nvar RoomSignaling = require('./room');\nvar StateMachine = require('../statemachine');\n/*\nSignaling States\n----------------\n\n              +---------+\n              |         |\n              | opening |\n         +--->|         |\n         |    +---------+\n    +--------+   |   |   +------+\n    |        |<--+   +-->|      |\n    | closed |<----------| open |\n    |        |<--+   +-->|      |\n    +--------+   |   |   +------+\n              +---------+   |\n              |         |<--+\n              | closing |\n              |         |\n              +---------+\n\n*/\nvar states = {\n  closed: ['opening'],\n  opening: ['closed', 'open'],\n  open: ['closed', 'closing'],\n  closing: ['closed', 'open']\n};\n/**\n * @extends StateMachine\n * @property {string} state - one of \"closed\", \"opening\", \"open\", or \"closing\"\n */\nvar Signaling = /** @class */function (_super) {\n  __extends(Signaling, _super);\n  /**\n   * Construct {@link Signaling}.\n   */\n  function Signaling() {\n    return _super.call(this, 'closed', states) || this;\n  }\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  Signaling.prototype._close = function (key) {\n    this.transition('closing', key);\n    this.transition('closed', key);\n    return Promise.resolve(this);\n  };\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  Signaling.prototype._connect = function (localParticipant, token, encodingParameters, preferredCodecs, options) {\n    localParticipant.connect('PA00000000000000000000000000000000', 'test');\n    var sid = 'RM00000000000000000000000000000000';\n    var promise = Promise.resolve(new RoomSignaling(localParticipant, sid, options));\n    promise.cancel = function cancel() {};\n    return promise;\n  };\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  Signaling.prototype._open = function (key) {\n    this.transition('opening', key);\n    this.transition('open', key);\n    return Promise.resolve(this);\n  };\n  /**\n   * Close the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n  Signaling.prototype.close = function () {\n    var _this = this;\n    return this.bracket('close', function (key) {\n      switch (_this.state) {\n        case 'closed':\n          return _this;\n        case 'open':\n          return _this._close(key);\n        default:\n          throw new Error(\"Unexpected Signaling state \\\"\" + _this.state + \"\\\"\");\n      }\n    });\n  };\n  /**\n   * Connect to a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {string} token\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   * @returns {Promise<function(): CancelablePromise<RoomSignaling>>}\n   */\n  Signaling.prototype.connect = function (localParticipant, token, encodingParameters, preferredCodecs, options) {\n    var self = this;\n    return this.bracket('connect', function transition(key) {\n      switch (self.state) {\n        case 'closed':\n          return self._open(key).then(transition.bind(null, key));\n        case 'open':\n          // NOTE(mroberts): We don't need to hold the lock in _connect. Instead,\n          // we just need to ensure the Signaling remains open.\n          self.releaseLockCompletely(key);\n          return self._connect(localParticipant, token, encodingParameters, preferredCodecs, options);\n        default:\n          throw new Error(\"Unexpected Signaling state \\\"\" + self.state + \"\\\"\");\n      }\n    });\n  };\n  /**\n   * Create a local {@link ParticipantSignaling}.\n   * @returns {ParticipantSignaling}\n   */\n  Signaling.prototype.createLocalParticipantSignaling = function () {\n    return new ParticipantSignaling();\n  };\n  /**\n   * Open the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n  Signaling.prototype.open = function () {\n    var _this = this;\n    return this.bracket('open', function (key) {\n      switch (_this.state) {\n        case 'closed':\n          return _this._open(key);\n        case 'open':\n          return _this;\n        default:\n          throw new Error(\"Unexpected Signaling state \\\"\" + _this.state + \"\\\"\");\n      }\n    });\n  };\n  return Signaling;\n}(StateMachine);\nmodule.exports = Signaling;","map":{"version":3,"mappings":"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","names":["ParticipantSignaling","require","RoomSignaling","StateMachine","states","closed","opening","open","closing","__extends","_super","Signaling","key","transition","Promise","resolve","localParticipant","token","encodingParameters","preferredCodecs","options","connect","sid","promise","cancel","bracket","_this","state","_close","Error","self","_open","then","bind","releaseLockCompletely","_connect","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/signaling/index.js"],"sourcesContent":["/* eslint consistent-return:0 */\n'use strict';\n\nconst ParticipantSignaling = require('./participant');\nconst RoomSignaling = require('./room');\nconst StateMachine = require('../statemachine');\n\n/*\nSignaling States\n----------------\n\n              +---------+\n              |         |\n              | opening |\n         +--->|         |\n         |    +---------+\n    +--------+   |   |   +------+\n    |        |<--+   +-->|      |\n    | closed |<----------| open |\n    |        |<--+   +-->|      |\n    +--------+   |   |   +------+\n              +---------+   |\n              |         |<--+\n              | closing |\n              |         |\n              +---------+\n\n*/\n\nconst states = {\n  closed: [\n    'opening'\n  ],\n  opening: [\n    'closed',\n    'open'\n  ],\n  open: [\n    'closed',\n    'closing'\n  ],\n  closing: [\n    'closed',\n    'open'\n  ]\n};\n\n/**\n * @extends StateMachine\n * @property {string} state - one of \"closed\", \"opening\", \"open\", or \"closing\"\n */\nclass Signaling extends StateMachine {\n  /**\n   * Construct {@link Signaling}.\n   */\n  constructor() {\n    super('closed', states);\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  _close(key) {\n    this.transition('closing', key);\n    this.transition('closed', key);\n    return Promise.resolve(this);\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  _connect(\n    localParticipant,\n    token,\n    encodingParameters,\n    preferredCodecs,\n    options\n  ) {\n    localParticipant.connect('PA00000000000000000000000000000000', 'test');\n    const sid = 'RM00000000000000000000000000000000';\n    const promise = Promise.resolve(new RoomSignaling(localParticipant, sid, options));\n    promise.cancel = function cancel() {};\n    return promise;\n  }\n\n  /**\n   * @private\n   */\n  // NOTE(mroberts): This is a dummy implementation suitable for testing.\n  _open(key) {\n    this.transition('opening', key);\n    this.transition('open', key);\n    return Promise.resolve(this);\n  }\n\n  /**\n   * Close the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n  close() {\n    return this.bracket('close', key => {\n      switch (this.state) {\n        case 'closed':\n          return this;\n        case 'open':\n          return this._close(key);\n        default:\n          throw new Error(`Unexpected Signaling state \"${this.state}\"`);\n      }\n    });\n  }\n\n  /**\n   * Connect to a {@link RoomSignaling}.\n   * @param {ParticipantSignaling} localParticipant\n   * @param {string} token\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   * @returns {Promise<function(): CancelablePromise<RoomSignaling>>}\n   */\n  connect(\n    localParticipant,\n    token,\n    encodingParameters,\n    preferredCodecs,\n    options\n  ) {\n    const self = this;\n    return this.bracket('connect', function transition(key) {\n      switch (self.state) {\n        case 'closed':\n          return self._open(key).then(transition.bind(null, key));\n        case 'open':\n          // NOTE(mroberts): We don't need to hold the lock in _connect. Instead,\n          // we just need to ensure the Signaling remains open.\n          self.releaseLockCompletely(key);\n          return self._connect(localParticipant, token, encodingParameters, preferredCodecs, options);\n        default:\n          throw new Error(`Unexpected Signaling state \"${self.state}\"`);\n      }\n    });\n  }\n\n  /**\n   * Create a local {@link ParticipantSignaling}.\n   * @returns {ParticipantSignaling}\n   */\n  createLocalParticipantSignaling() {\n    return new ParticipantSignaling();\n  }\n\n  /**\n   * Open the {@link Signaling}.\n   * @returns {Promise<this>}\n   */\n  open() {\n    return this.bracket('open', key => {\n      switch (this.state) {\n        case 'closed':\n          return this._open(key);\n        case 'open':\n          return this;\n        default:\n          throw new Error(`Unexpected Signaling state \"${this.state}\"`);\n      }\n    });\n  }\n}\n\nmodule.exports = Signaling;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}