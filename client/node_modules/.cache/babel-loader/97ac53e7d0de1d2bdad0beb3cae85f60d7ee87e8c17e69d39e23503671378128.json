{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar EventEmitter = require('events').EventEmitter;\nvar DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS = require('../../util/constants').DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS;\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\nvar VideoProcessorEventObserver = /** @class */function (_super) {\n  __extends(VideoProcessorEventObserver, _super);\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n  function VideoProcessorEventObserver(log) {\n    var _this = _super.call(this) || this;\n    Object.defineProperties(_this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n    _this.on('add', function (info) {\n      _this._lastStatsSaveTime = Date.now();\n      _this._lastStatsPublishTime = Date.now();\n      _this._processorInfo = info;\n      _this._stats = [];\n      _this._reemitEvent('add', _this._getEventData());\n    });\n    _this.on('remove', function () {\n      var data = _this._getEventData();\n      _this._lastStatsSaveTime = null;\n      _this._lastStatsPublishTime = null;\n      _this._processorInfo = null;\n      _this._stats = null;\n      _this._reemitEvent('remove', data);\n    });\n    _this.on('start', function () {\n      _this._reemitEvent('start', _this._getEventData());\n    });\n    _this.on('stop', function (message) {\n      _this._reemitEvent('stop', Object.assign({\n        message: message\n      }, _this._getEventData()));\n    });\n    _this.on('stats', function () {\n      return _this._maybeEmitStats();\n    });\n    return _this;\n  }\n  /**\n   * @private\n   */\n  VideoProcessorEventObserver.prototype._getEventData = function () {\n    if (!this._processorInfo) {\n      return {};\n    }\n    var _a = this._processorInfo,\n      processor = _a.processor,\n      captureHeight = _a.captureHeight,\n      captureWidth = _a.captureWidth,\n      inputFrameRate = _a.inputFrameRate,\n      isRemoteVideoTrack = _a.isRemoteVideoTrack;\n    var data = {\n      captureHeight: captureHeight,\n      captureWidth: captureWidth,\n      inputFrameRate: inputFrameRate,\n      isRemoteVideoTrack: isRemoteVideoTrack\n    };\n    data.name = processor._name || 'VideoProcessor';\n    ['assetsPath', 'blurFilterRadius', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'version'].forEach(function (prop) {\n      var val = processor[\"_\" + prop];\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n    Object.keys(data).forEach(function (prop) {\n      var val = data[prop];\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n    return data;\n  };\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n  VideoProcessorEventObserver.prototype._maybeEmitStats = function () {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n    var benchmark = this._processorInfo.processor._benchmark;\n    if (!benchmark) {\n      return;\n    }\n    var now = Date.now();\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n    var entry = {\n      outputFrameRate: benchmark.getRate('totalProcessingDelay')\n    };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(function (name) {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n    this._stats.push(entry);\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n    this._lastStatsPublishTime = now;\n    var stats = this._stats.splice(0);\n    var averages = stats.reduce(function (averages, current, n) {\n      Object.keys(entry).forEach(function (name) {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n        averages[name] = (averages[name] * n + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n    Object.keys(averages).forEach(function (name) {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  };\n  /**\n   * @private\n   */\n  VideoProcessorEventObserver.prototype._reemitEvent = function (name, data) {\n    this._log.debug(\"VideoProcessor:\" + name, data);\n    this.emit('event', {\n      name: name,\n      data: data\n    });\n  };\n  return VideoProcessorEventObserver;\n}(EventEmitter);\nmodule.exports = VideoProcessorEventObserver;","map":{"version":3,"mappings":"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","names":["require","__extends","log","_super","Object","defineProperties","_this","_lastStatsSaveTime","value","writable","_lastStatsPublishTime","_log","_processorInfo","_stats","on","Date","now","info","_reemitEvent","_getEventData","data","assign","message","_maybeEmitStats","VideoProcessorEventObserver","processor","captureHeight","captureWidth","inputFrameRate","isRemoteVideoTrack","name","_name","forEach","val","prop","keys","benchmark","_benchmark","entry","outputFrameRate","getRate","getAverageDelay","push","DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS","stats","splice","averages","reduce","current","n","parseFloat","toFixed","debug","emit","EventEmitter","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/media/track/videoprocessoreventobserver.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\nconst { DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS } = require('../../util/constants');\n\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\nclass VideoProcessorEventObserver extends EventEmitter {\n\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n  constructor(log) {\n    super();\n\n    Object.defineProperties(this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n\n    this.on('add', info => {\n      this._lastStatsSaveTime = Date.now();\n      this._lastStatsPublishTime = Date.now();\n      this._processorInfo = info;\n      this._stats = [];\n      this._reemitEvent('add', this._getEventData());\n    });\n\n    this.on('remove', () => {\n      const data = this._getEventData();\n      this._lastStatsSaveTime = null;\n      this._lastStatsPublishTime = null;\n      this._processorInfo = null;\n      this._stats = null;\n      this._reemitEvent('remove', data);\n    });\n\n    this.on('start', () => {\n      this._reemitEvent('start', this._getEventData());\n    });\n\n    this.on('stop', message => {\n      this._reemitEvent('stop', Object.assign({ message }, this._getEventData()));\n    });\n\n    this.on('stats', () => this._maybeEmitStats());\n  }\n\n  /**\n   * @private\n   */\n  _getEventData() {\n    if (!this._processorInfo) {\n      return {};\n    }\n\n    const { processor, captureHeight, captureWidth, inputFrameRate, isRemoteVideoTrack } = this._processorInfo;\n    const data = { captureHeight, captureWidth, inputFrameRate, isRemoteVideoTrack };\n    data.name = processor._name || 'VideoProcessor';\n\n    ['assetsPath', 'blurFilterRadius', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'version'].forEach(prop => {\n      const val = processor[`_${prop}`];\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n\n    Object.keys(data).forEach(prop => {\n      const val = data[prop];\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n  _maybeEmitStats() {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n    const benchmark = this._processorInfo.processor._benchmark;\n    if (!benchmark) {\n      return;\n    }\n    const now = Date.now();\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n\n    const entry = { outputFrameRate: benchmark.getRate('totalProcessingDelay') };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(name => {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n    this._stats.push(entry);\n\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n    this._lastStatsPublishTime = now;\n    const stats = this._stats.splice(0);\n    const averages = stats.reduce((averages, current, n) => {\n      Object.keys(entry).forEach(name => {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n        averages[name] = ((averages[name] * n) + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n\n    Object.keys(averages).forEach(name => {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  }\n\n  /**\n   * @private\n   */\n  _reemitEvent(name, data) {\n    this._log.debug(`VideoProcessor:${name}`, data);\n    this.emit('event', { name, data });\n  }\n}\n\nmodule.exports = VideoProcessorEventObserver;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}