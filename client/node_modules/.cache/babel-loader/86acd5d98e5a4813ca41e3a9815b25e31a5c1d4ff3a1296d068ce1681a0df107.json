{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar guessBrowser = require('../webrtc/util').guessBrowser;\nvar IceReportFactory = require('./icereportfactory');\nvar PeerConnectionReport = require('./peerconnectionreport');\nvar ReceiverReportFactory = require('./receiverreportfactory');\nvar SenderReportFactory = require('./senderreportfactory');\n/**\n * @typedef {string} TrackId\n */\n/**\n * @typedef {string} StatsId\n */\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\nvar PeerConnectionReportFactory = /** @class */function () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n  PeerConnectionReportFactory.prototype.next = function () {\n    var _this = this;\n    var updatePromise = guessBrowser() === 'firefox' ? updateFirefox(this) : updateChrome(this);\n    return updatePromise.then(function () {\n      var audioSenderReportFactories = __spreadArray([], __read(_this.audio.send.values()));\n      var videoSenderReportFactories = __spreadArray([], __read(_this.video.send.values()));\n      var audioReceiverReportFactories = __spreadArray([], __read(_this.audio.recv.values()));\n      var videoReceiverReportFactories = __spreadArray([], __read(_this.video.recv.values()));\n      var report = new PeerConnectionReport(_this.ice.lastReport, {\n        send: audioSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: audioReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      }, {\n        send: videoSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: videoReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      });\n      _this.lastReport = report;\n      return report;\n    });\n  };\n  return PeerConnectionReportFactory;\n}();\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      var e_1, _a;\n      try {\n        // NOTE(mroberts): We have to rewrite Ids due to this bug:\n        //\n        //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n        //\n        for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var stats = _c.value;\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + \"-\" + stats.id;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */ /**\n    * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n    * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n    * @param {RTCStatsReport} report\n    * @param {RTCStats} stats\n    * @param {TrackId} [trackId]\n    * @returns {?ReceiverReportFactory}\n    */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.send,\n    video: factory.video.send\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.recv,\n    video: factory.video.recv\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_2, _a;\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (guessBrowser() !== 'firefox' && !stats.trackId) {\n          continue;\n        }\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_3, _a;\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop_1 = function (mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop_1(mediaType);\n  }\n}\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  var e_4, _a, e_5, _b;\n  var selectedCandidatePair;\n  try {\n    for (var _c = __values(report.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var stats = _d.value;\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  try {\n    for (var _e = __values(report.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var stats = _f.value;\n      if (stats.type === 'candidate-pair' && stats.nominated && ('selected' in stats ? stats.selected : true)) {\n        ice.next(stats);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_a) {\n    var _b = __read(_a, 3),\n      senderReports = _b[0],\n      receiverReports = _b[1],\n      pcReport = _b[2];\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, report);\n  });\n}\nmodule.exports = PeerConnectionReportFactory;","map":{"version":3,"mappings":"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","names":["require","IceReportFactory","PeerConnectionReport","ReceiverReportFactory","SenderReportFactory","pc","Object","defineProperties","enumerable","value","ice","audio","send","Map","recv","video","lastReport","writable","PeerConnectionReportFactory","updatePromise","guessBrowser","updateFirefox","updateChrome","then","audioSenderReportFactories","_this","values","videoSenderReportFactories","audioReceiverReportFactories","videoReceiverReportFactories","report","map","filter","getSenderOrReceiverReports","sendersOrReceivers","Promise","all","trackId","senderOrReceiver","track","id","getStats","stats","type","pairs","getOrCreateSenderOrReceiverReportFactory","SenderOrReceiverReportFactory","sendersOrReceiversByMediaType","mediaType","trackStats","get","trackIdentifier","has","senderOrReceiverFactory","set","getSenderReportFactoriesByMediaType","factory","getReceiverReportFactoriesByMediaType","getOrCreateSenderReportFactory","getOrCreateReceiverReportFactory","getSenderReportFactoryIdsByMediaType","Set","keys","getReceiverReportFactoryIdsByMediaType","updateSenderReports","senderReportFactoryIdsToDeleteByMediaType","isRemote","senderReportFactoryIdsToDelete","delete","senderReportFactory","remoteInboundStats","remoteId","next","updateReceiverReports","receiverReportFactoryIdsToDeleteByMediaType","receiverReportFactoryIdsToDelete","receiverReportFactory","deleteSenderOrReceiverReportFactories","senderOrReceiverReportFactoriesByMediaType","senderOrReceiverReportFactoryIdsByMediaType","senderOrReceiverReportFactories","senderOrReceiverReportFactoryIds","forEach","senderOrReceiverReportFactoryId","updateIceReport","selectedCandidatePair","selectedCandidatePairId","nominated","selected","senders","getTransceivers","currentDirection","transceiver","match","sender","receivers","receiver","_a","_b","senderReports","receiverReports","pcReport","senderReportFactoriesByMediaType","receiverReportFactoriesByMediaType","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/stats/peerconnectionreportfactory.js"],"sourcesContent":["'use strict';\n\nconst { guessBrowser } = require('../webrtc/util');\n\nconst IceReportFactory = require('./icereportfactory');\nconst PeerConnectionReport = require('./peerconnectionreport');\nconst ReceiverReportFactory = require('./receiverreportfactory');\nconst SenderReportFactory = require('./senderreportfactory');\n\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\nclass PeerConnectionReportFactory {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  constructor(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n  next() {\n    const updatePromise = guessBrowser() === 'firefox'\n      ? updateFirefox(this)\n      : updateChrome(this);\n\n    return updatePromise.then(() => {\n      const audioSenderReportFactories = [...this.audio.send.values()];\n      const videoSenderReportFactories = [...this.video.send.values()];\n      const audioReceiverReportFactories = [...this.audio.recv.values()];\n      const videoReceiverReportFactories = [...this.video.recv.values()];\n\n      const report = new PeerConnectionReport(\n        this.ice.lastReport,\n        {\n          send: audioSenderReportFactories.map(factory => factory.lastReport).filter(report => report),\n          recv: audioReceiverReportFactories.map(factory => factory.lastReport).filter(report => report)\n        },\n        {\n          send: videoSenderReportFactories.map(factory => factory.lastReport).filter(report => report),\n          recv: videoReceiverReportFactories.map(factory => factory.lastReport).filter(report => report)\n        }\n      );\n\n      this.lastReport = report;\n\n      return report;\n    });\n  }\n}\n\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(senderOrReceiver => {\n    const trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(report => {\n      // NOTE(mroberts): We have to rewrite Ids due to this bug:\n      //\n      //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n      //\n      for (const stats of report.values()) {\n        if (stats.type === 'inbound-rtp') {\n          stats.id = `${trackId}-${stats.id}`;\n        }\n      }\n      return [trackId, report];\n    });\n  })).then(pairs => new Map(pairs));\n}\n\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n *//**\n * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  const sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    const trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    const senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.send, video: factory.video.send };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.recv, video: factory.video.recv };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  for (const stats of report.values()) {\n    if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n      if (guessBrowser() !== 'firefox' && !stats.trackId) {\n        continue;\n      }\n      const senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n      if (senderReportFactoryIdsToDelete) {\n        senderReportFactoryIdsToDelete.delete(stats.id);\n      }\n      const senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n      if (senderReportFactory) {\n        const remoteInboundStats = report.get(stats.remoteId);\n        senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  for (const stats of report.values()) {\n    if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n      const receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n      if (receiverReportFactoryIdsToDelete) {\n        receiverReportFactoryIdsToDelete.delete(stats.id);\n      }\n      const receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n      if (receiverReportFactory) {\n        receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n      }\n    }\n  }\n}\n\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  for (const mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    const senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    const senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(senderOrReceiverReportFactoryId => senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId));\n  }\n}\n\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  let selectedCandidatePair;\n  for (const stats of report.values()) {\n    if (stats.type === 'transport') {\n      selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n    }\n  }\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  for (const stats of report.values()) {\n    if (stats.type === 'candidate-pair'\n      && stats.nominated\n      && ('selected' in stats ? stats.selected : true)) {\n      ice.next(stats);\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateFirefox(factory) {\n  const senders = factory.pc.getTransceivers()\n    .filter(transceiver => transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track)\n    .map(transceiver => transceiver.sender);\n\n  const receivers = factory.pc.getTransceivers()\n    .filter(transceiver => transceiver.currentDirection && transceiver.currentDirection.match(/recv/))\n    .map(transceiver => transceiver.receiver);\n\n  return Promise.all([\n    getSenderOrReceiverReports(senders),\n    getSenderOrReceiverReports(receivers),\n    factory.pc.getStats()\n  ]).then(([senderReports, receiverReports, pcReport]) => {\n    const senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    const senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach((report, trackId) => updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId));\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    const receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    const receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach((report, trackId) => updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId));\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(report => {\n    const senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    const senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    const receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    const receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}