{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar Participant = require('./participant');\n/**\n * A {@link RemoteParticipant} represents a remote {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, RemoteAudioTrackPublication>} audioTracks -\n *    The {@link Participant}'s {@link RemoteAudioTrackPublication}s\n * @property {Map<Track.SID, RemoteDataTrackPublication>} dataTracks -\n *    The {@link Participant}'s {@link RemoteDataTrackPublication}s\n * @property {Map<Track.SID, RemoteTrackPublication>} tracks -\n *    The {@link Participant}'s {@link RemoteTrackPublication}s\n * @property {Map<Track.SID, RemoteVideoTrackPublication>} videoTracks -\n *    The {@link Participant}'s {@link RemoteVideoTrackPublication}s\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits RemoteParticipant#trackDimensionsChanged\n * @emits RemoteParticipant#trackDisabled\n * @emits RemoteParticipant#trackEnabled\n * @emits RemoteParticipant#trackMessage\n * @emits RemoteParticipant#trackPublished\n * @emits RemoteParticipant#trackPublishPriorityChanged\n * @emits RemoteParticipant#trackStarted\n * @emits RemoteParticipant#trackSubscribed\n * @emits RemoteParticipant#trackSubscriptionFailed\n * @emits RemoteParticipant#trackSwitchedOff\n * @emits RemoteParticipant#trackSwitchedOn\n * @emits RemoteParticipant#trackUnpublished\n * @emits RemoteParticipant#trackUnsubscribed\n */\nvar RemoteParticipant = /** @class */function (_super) {\n  __extends(RemoteParticipant, _super);\n  /**\n   * Construct a {@link RemoteParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n  function RemoteParticipant(signaling, options) {\n    var _this = _super.call(this, signaling, options) || this;\n    _this._handleTrackSignalingEvents();\n    _this.once('disconnected', _this._unsubscribeTracks.bind(_this));\n    return _this;\n  }\n  RemoteParticipant.prototype.toString = function () {\n    return \"[RemoteParticipant #\" + this._instanceId + (this.sid ? \": \" + this.sid : '') + \"]\";\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} remoteTrack\n   * @param {RemoteTrackPublication} publication\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n  RemoteParticipant.prototype._addTrack = function (remoteTrack, publication, id) {\n    if (!_super.prototype._addTrack.call(this, remoteTrack, id)) {\n      return null;\n    }\n    publication._subscribed(remoteTrack);\n    this.emit('trackSubscribed', remoteTrack, publication);\n    return remoteTrack;\n  };\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n  RemoteParticipant.prototype._addTrackPublication = function (publication) {\n    var addedPublication = _super.prototype._addTrackPublication.call(this, publication);\n    if (!addedPublication) {\n      return null;\n    }\n    this.emit('trackPublished', addedPublication);\n    return addedPublication;\n  };\n  /**\n   * @private\n   */\n  RemoteParticipant.prototype._getTrackPublicationEvents = function () {\n    return __spreadArray(__spreadArray([], __read(_super.prototype._getTrackPublicationEvents.call(this))), [['subscriptionFailed', 'trackSubscriptionFailed'], ['trackDisabled', 'trackDisabled'], ['trackEnabled', 'trackEnabled'], ['publishPriorityChanged', 'trackPublishPriorityChanged'], ['trackSwitchedOff', 'trackSwitchedOff'], ['trackSwitchedOn', 'trackSwitchedOn']]);\n  };\n  /**\n   * @private\n   */\n  RemoteParticipant.prototype._unsubscribeTracks = function () {\n    var _this = this;\n    this.tracks.forEach(function (publication) {\n      if (publication.isSubscribed) {\n        var track = publication.track;\n        publication._unsubscribe();\n        _this.emit('trackUnsubscribed', track, publication);\n      }\n    });\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} remoteTrack\n   * @param {RemoteTrackPublication} publication\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n  RemoteParticipant.prototype._removeTrack = function (remoteTrack, publication, id) {\n    var unsubscribedTrack = this._tracks.get(id);\n    if (!unsubscribedTrack) {\n      return null;\n    }\n    _super.prototype._removeTrack.call(this, unsubscribedTrack, id);\n    publication._unsubscribe();\n    this.emit('trackUnsubscribed', unsubscribedTrack, publication);\n    return unsubscribedTrack;\n  };\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n  RemoteParticipant.prototype._removeTrackPublication = function (publication) {\n    this._signaling.clearTrackHint(publication.trackSid);\n    var removedPublication = _super.prototype._removeTrackPublication.call(this, publication);\n    if (!removedPublication) {\n      return null;\n    }\n    this.emit('trackUnpublished', removedPublication);\n    return removedPublication;\n  };\n  return RemoteParticipant;\n}(Participant);\n/**\n * The {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event RemoteParticipant#reconnected\n */\n/**\n * The {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event RemoteParticipant#reconnecting\n */\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteVideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @event RemoteParticipant#trackDimensionsChanged\n */\n/**\n * A {@link RemoteTrack} was disabled by the {@link RemoteParticipant}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} associated with the disabled {@link RemoteTrack}\n * @event RemoteParticipant#trackDisabled\n */\n/**\n * A {@link RemoteTrack} was enabled by the {@link RemoteParticipant}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} associated with the enabled {@link RemoteTrack}\n * @event RemoteParticipant#trackEnabled\n */\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}s.\n * @event RemoteParticipant#trackMessage\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n */\n/**\n * A {@link RemoteTrack} was published by the {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event RemoteParticipant#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @example\n * function trackPublished(publication) {\n *   console.log(`Track ${publication.trackSid} was published`);\n * }\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(trackPublished);\n *\n *   // Handle RemoteTracks published after connecting to the Room.\n *   participant.on('trackPublished', trackPublished);\n * });\n */\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteTrack}s started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @event RemoteParticipant#trackStarted\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed to\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @event RemoteParticipant#trackSubscribed\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @event RemoteParticipant#trackSubscriptionFailed\n */\n/**\n * The {@link RemoteTrackPublication}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @event RemoteParticipant#trackPublishPriorityChanged\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was switched off\n * @event RemoteParticipant#trackSwitchedOff\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was switched on\n * @event RemoteParticipant#trackSwitchedOn\n */\n/**\n * A {@link RemoteTrack} was unpublished by the {@link RemoteParticipant}.\n * @event RemoteParticipant#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @event RemoteParticipant#trackUnsubscribed\n */\nmodule.exports = RemoteParticipant;","map":{"version":3,"mappings":"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","names":["Participant","require","__extends","signaling","options","_super","_this","_handleTrackSignalingEvents","once","_unsubscribeTracks","bind","RemoteParticipant","_instanceId","sid","remoteTrack","publication","id","_addTrack","_subscribed","emit","addedPublication","_addTrackPublication","_getTrackPublicationEvents","tracks","forEach","isSubscribed","track","_unsubscribe","unsubscribedTrack","_tracks","get","_removeTrack","_signaling","clearTrackHint","trackSid","removedPublication","_removeTrackPublication","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/remoteparticipant.js"],"sourcesContent":["'use strict';\n\nconst Participant = require('./participant');\n\n/**\n * A {@link RemoteParticipant} represents a remote {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, RemoteAudioTrackPublication>} audioTracks -\n *    The {@link Participant}'s {@link RemoteAudioTrackPublication}s\n * @property {Map<Track.SID, RemoteDataTrackPublication>} dataTracks -\n *    The {@link Participant}'s {@link RemoteDataTrackPublication}s\n * @property {Map<Track.SID, RemoteTrackPublication>} tracks -\n *    The {@link Participant}'s {@link RemoteTrackPublication}s\n * @property {Map<Track.SID, RemoteVideoTrackPublication>} videoTracks -\n *    The {@link Participant}'s {@link RemoteVideoTrackPublication}s\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits RemoteParticipant#trackDimensionsChanged\n * @emits RemoteParticipant#trackDisabled\n * @emits RemoteParticipant#trackEnabled\n * @emits RemoteParticipant#trackMessage\n * @emits RemoteParticipant#trackPublished\n * @emits RemoteParticipant#trackPublishPriorityChanged\n * @emits RemoteParticipant#trackStarted\n * @emits RemoteParticipant#trackSubscribed\n * @emits RemoteParticipant#trackSubscriptionFailed\n * @emits RemoteParticipant#trackSwitchedOff\n * @emits RemoteParticipant#trackSwitchedOn\n * @emits RemoteParticipant#trackUnpublished\n * @emits RemoteParticipant#trackUnsubscribed\n */\nclass RemoteParticipant extends Participant {\n  /**\n   * Construct a {@link RemoteParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n  constructor(signaling, options) {\n    super(signaling, options);\n    this._handleTrackSignalingEvents();\n    this.once('disconnected', this._unsubscribeTracks.bind(this));\n  }\n\n  toString() {\n    return `[RemoteParticipant #${this._instanceId}${this.sid ? `: ${this.sid}` : ''}]`;\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrack} remoteTrack\n   * @param {RemoteTrackPublication} publication\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n  _addTrack(remoteTrack, publication, id) {\n    if (!super._addTrack(remoteTrack, id)) {\n      return null;\n    }\n    publication._subscribed(remoteTrack);\n    this.emit('trackSubscribed', remoteTrack, publication);\n    return remoteTrack;\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n  _addTrackPublication(publication) {\n    const addedPublication = super._addTrackPublication(publication);\n    if (!addedPublication) {\n      return null;\n    }\n    this.emit('trackPublished', addedPublication);\n    return addedPublication;\n  }\n  /**\n   * @private\n   */\n  _getTrackPublicationEvents() {\n    return [\n      ...super._getTrackPublicationEvents(),\n      ['subscriptionFailed', 'trackSubscriptionFailed'],\n      ['trackDisabled', 'trackDisabled'],\n      ['trackEnabled', 'trackEnabled'],\n      ['publishPriorityChanged', 'trackPublishPriorityChanged'],\n      ['trackSwitchedOff', 'trackSwitchedOff'],\n      ['trackSwitchedOn', 'trackSwitchedOn']\n    ];\n  }\n\n  /**\n   * @private\n   */\n  _unsubscribeTracks() {\n    this.tracks.forEach(publication => {\n      if (publication.isSubscribed) {\n        const track = publication.track;\n        publication._unsubscribe();\n        this.emit('trackUnsubscribed', track, publication);\n      }\n    });\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrack} remoteTrack\n   * @param {RemoteTrackPublication} publication\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n  _removeTrack(remoteTrack, publication, id) {\n    const unsubscribedTrack = this._tracks.get(id);\n    if (!unsubscribedTrack) {\n      return null;\n    }\n\n    super._removeTrack(unsubscribedTrack, id);\n    publication._unsubscribe();\n    this.emit('trackUnsubscribed', unsubscribedTrack, publication);\n    return unsubscribedTrack;\n  }\n\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n  _removeTrackPublication(publication) {\n    this._signaling.clearTrackHint(publication.trackSid);\n    const removedPublication = super._removeTrackPublication(publication);\n    if (!removedPublication) {\n      return null;\n    }\n    this.emit('trackUnpublished', removedPublication);\n    return removedPublication;\n  }\n}\n\n/**\n * The {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event RemoteParticipant#reconnected\n */\n\n/**\n * The {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event RemoteParticipant#reconnecting\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteVideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @event RemoteParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by the {@link RemoteParticipant}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} associated with the disabled {@link RemoteTrack}\n * @event RemoteParticipant#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by the {@link RemoteParticipant}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} associated with the enabled {@link RemoteTrack}\n * @event RemoteParticipant#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}s.\n * @event RemoteParticipant#trackMessage\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n */\n\n/**\n * A {@link RemoteTrack} was published by the {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event RemoteParticipant#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @example\n * function trackPublished(publication) {\n *   console.log(`Track ${publication.trackSid} was published`);\n * }\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(trackPublished);\n *\n *   // Handle RemoteTracks published after connecting to the Room.\n *   participant.on('trackPublished', trackPublished);\n * });\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link RemoteTrack}s started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @event RemoteParticipant#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed to\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @event RemoteParticipant#trackSubscribed\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @event RemoteParticipant#trackSubscriptionFailed\n */\n\n/**\n * The {@link RemoteTrackPublication}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @event RemoteParticipant#trackPublishPriorityChanged\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was switched off\n * @event RemoteParticipant#trackSwitchedOff\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was switched on\n * @event RemoteParticipant#trackSwitchedOn\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by the {@link RemoteParticipant}.\n * @event RemoteParticipant#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @event RemoteParticipant#trackUnsubscribed\n */\n\nmodule.exports = RemoteParticipant;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}