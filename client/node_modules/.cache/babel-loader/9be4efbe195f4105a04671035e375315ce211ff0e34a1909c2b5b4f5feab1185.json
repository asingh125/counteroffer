{"ast":null,"code":"/* eslint-disable no-console */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar DominantSpeakerSignaling = require('./dominantspeakersignaling');\nvar NetworkQualityMonitor = require('./networkqualitymonitor');\nvar NetworkQualitySignaling = require('./networkqualitysignaling');\nvar RecordingV2 = require('./recording');\nvar RoomSignaling = require('../room');\nvar RemoteParticipantV2 = require('./remoteparticipant');\nvar StatsReport = require('../../stats/statsreport');\nvar TrackPrioritySignaling = require('./trackprioritysignaling');\nvar TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\nvar RenderHintsSignaling = require('./renderhintssignaling');\nvar PublisherHintsSignaling = require('./publisherhintsignaling.js');\nvar _a = require('../../util'),\n  DEFAULT_SESSION_TIMEOUT_SEC = _a.constants.DEFAULT_SESSION_TIMEOUT_SEC,\n  createBandwidthProfilePayload = _a.createBandwidthProfilePayload,\n  defer = _a.defer,\n  difference = _a.difference,\n  filterObject = _a.filterObject,\n  flatMap = _a.flatMap,\n  oncePerTick = _a.oncePerTick;\nvar MovingAverageDelta = require('../../util/movingaveragedelta');\nvar createTwilioError = require('../../util/twilio-video-errors').createTwilioError;\nvar STATS_PUBLISH_INTERVAL_MS = 10000;\n/**\n * @extends RoomSignaling\n */\nvar RoomV2 = /** @class */function (_super) {\n  __extends(RoomV2, _super);\n  function RoomV2(localParticipant, initialState, transport, peerConnectionManager, options) {\n    var _this = this;\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n    options = Object.assign({\n      DominantSpeakerSignaling: DominantSpeakerSignaling,\n      NetworkQualityMonitor: NetworkQualityMonitor,\n      NetworkQualitySignaling: NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2: RemoteParticipantV2,\n      TrackPrioritySignaling: TrackPrioritySignaling,\n      TrackSwitchOffSignaling: TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n    var _a = initialState.options,\n      signalingRegion = _a.signaling_region,\n      _b = _a.audio_processors,\n      audioProcessors = _b === void 0 ? [] : _b;\n    localParticipant.setSignalingRegion(signalingRegion);\n    if (audioProcessors.includes('krisp')) {\n      // Note(mpatwardhan): we add rnnoise as allowed_processor to enable testing our pipeline e2e.\n      audioProcessors.push('rnnoise');\n    }\n    localParticipant.setAudioProcessors(audioProcessors);\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n    _this = _super.call(this, localParticipant, initialState.sid, initialState.name, options) || this;\n    var getTrackReceiver = function (id) {\n      return _this._getTrackReceiver(id);\n    };\n    var log = _this._log;\n    Object.defineProperties(_this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _mediaStatesWarningsRevision: {\n        value: 0,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(getTrackReceiver, localParticipant.networkQualityConfiguration, {\n          log: log\n        })\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _publisherHintsSignaling: {\n        value: new PublisherHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n    _this._initTrackSwitchOffSignaling();\n    _this._initDominantSpeakerSignaling();\n    _this._initNetworkQualityMonitorSignaling();\n    _this._initPublisherHintSignaling();\n    handleLocalParticipantEvents(_this, localParticipant);\n    handlePeerConnectionEvents(_this, peerConnectionManager);\n    handleTransportEvents(_this, transport);\n    periodicallyPublishStats(_this, transport, options.statsPublishIntervalMs);\n    _this._update(initialState);\n    // NOTE(mpatwardhan) after initial state we know if publisher_hints are enabled or not\n    // if they are not enabled. we need to undo simulcast that was enabled with initial offer.\n    _this._peerConnectionManager.setEffectiveAdaptiveSimulcast(_this._publisherHintsSignaling.isSetup);\n    return _this;\n  }\n  Object.defineProperty(RoomV2.prototype, \"connectionState\", {\n    /**\n     * The PeerConnection state.\n     * @property {RTCPeerConnectionState}\n     */\n    get: function () {\n      return this._peerConnectionManager.connectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"signalingConnectionState\", {\n    /**\n     * The Signaling Connection State.\n     * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n     */\n    get: function () {\n      return this._transport.state === 'syncing' ? 'reconnecting' : this._transport.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"iceConnectionState\", {\n    /**\n     * The Ice Connection State.\n     * @property {RTCIceConnectionState}\n     */\n    get: function () {\n      return this._peerConnectionManager.iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @private\n   */\n  RoomV2.prototype._deleteTrackReceiverDeferred = function (id) {\n    return this._trackReceiverDeferreds.delete(id);\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getOrCreateTrackReceiverDeferred = function (id) {\n    var deferred = this._trackReceiverDeferreds.get(id) || defer();\n    var trackReceivers = this._peerConnectionManager.getTrackReceivers();\n    // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n    var trackReceiver = trackReceivers.find(function (trackReceiver) {\n      return trackReceiver.id === id && trackReceiver.readyState !== 'ended';\n    });\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n    return deferred;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._addTrackReceiver = function (trackReceiver) {\n    var deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n    deferred.resolve(trackReceiver);\n    return this;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._disconnect = function (error) {\n    var didDisconnect = _super.prototype._disconnect.call(this, error);\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n      this._transport.disconnect();\n      this._peerConnectionManager.close();\n    }\n    this.localParticipant.tracks.forEach(function (track) {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n    return didDisconnect;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getTrackReceiver = function (id) {\n    var _this = this;\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(function (trackReceiver) {\n      _this._deleteTrackReceiverDeferred(id);\n      return trackReceiver;\n    });\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getInitialTrackSwitchOffState = function (trackSid) {\n    var initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n    this._pendingSwitchOffStates.delete(trackSid);\n    if (initiallySwitchedOff) {\n      this._log.warn(\"[\" + trackSid + \"] was initially switched off! \");\n    }\n    return initiallySwitchedOff;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getTrackSidsToTrackSignalings = function () {\n    var trackSidsToTrackSignalings = flatMap(this.participants, function (participant) {\n      return Array.from(participant.tracks);\n    });\n    return new Map(trackSidsToTrackSignalings);\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getOrCreateRemoteParticipant = function (participantState) {\n    var _this = this;\n    var RemoteParticipantV2 = this._RemoteParticipantV2;\n    var participant = this.participants.get(participantState.sid);\n    var self = this;\n    if (!participant) {\n      participant = new RemoteParticipantV2(participantState, function (trackSid) {\n        return _this._getInitialTrackSwitchOffState(trackSid);\n      }, function (trackSid, priority) {\n        return _this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority);\n      }, function (trackSid, hint) {\n        return _this._renderHintsSignaling.setTrackHint(trackSid, hint);\n      }, function (trackSid) {\n        return _this._renderHintsSignaling.clearTrackHint(trackSid);\n      });\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n    return participant;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getState = function () {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._maybeAddBandwidthProfile = function (update) {\n    var _a = this.localParticipant,\n      bandwidthProfile = _a.bandwidthProfile,\n      bandwidthProfileRevision = _a.bandwidthProfileRevision;\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n    return update;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._publishNewLocalParticipantState = function () {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._publishPeerConnectionState = function (peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._update = function (roomState) {\n    var _this = this;\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(function (trackState) {\n        if (trackState.id) {\n          _this._subscriptionFailures.delete(trackState.sid);\n          _this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !_this._subscriptionFailures.has(trackState.sid)) {\n          _this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n      var subscribedTrackSids_1 = new Set(roomState.subscribed.tracks.filter(function (trackState) {\n        return !!trackState.id;\n      }).map(function (trackState) {\n        return trackState.sid;\n      }));\n      this._subscribed.forEach(function (trackId, trackSid) {\n        if (!subscribedTrackSids_1.has(trackSid)) {\n          _this._subscribed.delete(trackSid);\n        }\n      });\n    }\n    var participantsToKeep = new Set();\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    (roomState.participants || []).forEach(function (participantState) {\n      if (participantState.sid === _this.localParticipant.sid) {\n        return;\n      }\n      // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n      var disconnectedParticipantRevision = _this._disconnectedParticipantRevisions.get(participantState.sid);\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n      if (disconnectedParticipantRevision) {\n        _this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n      var participant = _this._getOrCreateRemoteParticipant(participantState);\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n    if (roomState.type === 'synced') {\n      this.participants.forEach(function (participant) {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n    handleSubscriptions(this);\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    /* eslint camelcase:0 */\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(function (track) {\n        if (track.sid) {\n          _this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n    if (roomState.participant) {\n      this.localParticipant.connect(roomState.participant.sid, roomState.participant.identity);\n    }\n    [this._dominantSpeakerSignaling, this._networkQualitySignaling, this._trackPrioritySignaling, this._trackSwitchOffSignaling, this._renderHintsSignaling, this._publisherHintsSignaling].forEach(function (mediaSignaling) {\n      var channel = mediaSignaling.channel;\n      if (!mediaSignaling.isSetup && roomState.media_signaling && roomState.media_signaling[channel] && roomState.media_signaling[channel].transport && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n    if (roomState.type === 'warning' && roomState.states && roomState.states.revision > this._mediaStatesWarningsRevision) {\n      this._mediaStatesWarningsRevision = roomState.states.revision;\n      this.localParticipant.updateMediaStates(roomState.states);\n    }\n    return this;\n  };\n  RoomV2.prototype._initPublisherHintSignaling = function () {\n    var _this = this;\n    this._publisherHintsSignaling.on('updated', function (hints, id) {\n      Promise.all(hints.map(function (hint) {\n        return _this.localParticipant.setPublisherHint(hint.track, hint.encodings).then(function (result) {\n          return {\n            track: hint.track,\n            result: result\n          };\n        });\n      })).then(function (hintResponses) {\n        _this._publisherHintsSignaling.sendHintResponse({\n          id: id,\n          hints: hintResponses\n        });\n      });\n    });\n    var handleReplaced = function (track) {\n      if (track.kind === 'video') {\n        track.trackTransceiver.on('replaced', function () {\n          _this._publisherHintsSignaling.sendTrackReplaced({\n            trackSid: track.sid\n          });\n        });\n      }\n    };\n    // hook up for any existing and new tracks getting replaced.\n    Array.from(this.localParticipant.tracks.values()).forEach(function (track) {\n      return handleReplaced(track);\n    });\n    this.localParticipant.on('trackAdded', function (track) {\n      return handleReplaced(track);\n    });\n  };\n  RoomV2.prototype._initTrackSwitchOffSignaling = function () {\n    var _this = this;\n    this._trackSwitchOffSignaling.on('updated', function (tracksOff, tracksOn) {\n      try {\n        _this._log.debug('received trackSwitch: ', {\n          tracksOn: tracksOn,\n          tracksOff: tracksOff\n        });\n        var trackUpdates_1 = new Map();\n        tracksOn.forEach(function (trackSid) {\n          return trackUpdates_1.set(trackSid, true);\n        });\n        tracksOff.forEach(function (trackSid) {\n          if (trackUpdates_1.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            _this._log.warn(trackSid + \" is DUPLICATED in both tracksOff and tracksOn list\");\n          }\n          trackUpdates_1.set(trackSid, false);\n        });\n        _this.participants.forEach(function (participant) {\n          participant.tracks.forEach(function (track) {\n            var isOn = trackUpdates_1.get(track.sid);\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates_1.delete(track.sid);\n            }\n          });\n        });\n        // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n        trackUpdates_1.forEach(function (isOn, trackSid) {\n          return _this._pendingSwitchOffStates.set(trackSid, !isOn);\n        });\n      } catch (ex) {\n        _this._log.error('error processing track switch off:', ex);\n      }\n    });\n  };\n  RoomV2.prototype._initDominantSpeakerSignaling = function () {\n    var _this = this;\n    this._dominantSpeakerSignaling.on('updated', function () {\n      return _this.setDominantSpeaker(_this._dominantSpeakerSignaling.loudestParticipantSid);\n    });\n  };\n  RoomV2.prototype._initNetworkQualityMonitorSignaling = function () {\n    var _this = this;\n    this._networkQualitySignaling.on('ready', function () {\n      var networkQualityMonitor = new _this._NetworkQualityMonitor(_this._peerConnectionManager, _this._networkQualitySignaling);\n      _this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', function () {\n        if (_this.iceConnectionState === 'failed') {\n          return;\n        }\n        _this.localParticipant.setNetworkQualityLevel(networkQualityMonitor.level, networkQualityMonitor.levels);\n        _this.participants.forEach(function (participant) {\n          var levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n    this._networkQualitySignaling.on('teardown', function () {\n      return _this._teardownNetworkQualityMonitor();\n    });\n  };\n  RoomV2.prototype._teardownNetworkQualityMonitor = function () {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n      this._networkQualityMonitor = null;\n    }\n  };\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n  RoomV2.prototype.getStats = function () {\n    var _this = this;\n    return this._peerConnectionManager.getStats().then(function (responses) {\n      return new Map(Array.from(responses).map(function (_a) {\n        var _b = __read(_a, 2),\n          id = _b[0],\n          response = _b[1];\n        return [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(_this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(_this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteVideoTrackStats)\n        })];\n      }));\n    });\n  };\n  return RoomV2;\n}(RoomSignaling);\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var trackSid = idToSid.get(trackStat.trackId);\n    return trackSid ? [Object.assign({}, trackStat, {\n      trackSid: trackSid\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  var idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(function (_a) {\n    var _b = __read(_a, 2),\n      sid = _b[0],\n      id = _b[1];\n    return [id, sid];\n  }));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  var localParticipantUpdated = oncePerTick(function () {\n    roomV2._publishNewLocalParticipantState();\n  });\n  var renegotiate = oncePerTick(function () {\n    var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n      return trackV2.trackTransceiver;\n    });\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n  roomV2.on('signalingConnectionStateChanged', function () {\n    var localParticipant = roomV2.localParticipant,\n      signalingConnectionState = roomV2.signalingConnectionState;\n    var identity = localParticipant.identity,\n      sid = localParticipant.sid;\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n  peerConnectionManager.on('connectionStateChanged', function () {\n    roomV2.emit('connectionStateChanged');\n  });\n  peerConnectionManager.on('iceConnectionStateChanged', function () {\n    roomV2.emit('iceConnectionStateChanged');\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n      roomV2.participants.forEach(function (participant) {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n      transport.removeListener('stateChanged', stateChanged);\n    }\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  var movingAverageDeltas = new Map();\n  var oddPublishCount = false;\n  var interval = setInterval(function () {\n    roomV2.getStats().then(function (stats) {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach(function (response, id) {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        var report = new StatsReport(id, response, true /* prepareForInsights */);\n        // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localAudioTrackStats: report.localAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localVideoTrackStats: report.localVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas);\n          }),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas);\n          })\n        });\n        // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n        var keys = flatMap(['localAudioTrackStats', 'localVideoTrackStats', 'remoteAudioTrackStats', 'remoteVideoTrackStats'], function (prop) {\n          return report[prop].map(function (_a) {\n            var ssrc = _a.ssrc,\n              trackSid = _a.trackSid;\n            return trackSid + \"+\" + ssrc;\n          });\n        });\n        var movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(function (key) {\n          return movingAverageDeltas.delete(key);\n        });\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          var activeIceCandidatePair = replaceNullsWithDefaults(response.activeIceCandidatePair, report.peerConnectionId);\n          transport.publishEvent('quality', 'active-ice-candidate-pair', 'info', activeIceCandidatePair);\n        }\n      });\n    }, function () {\n      // Do nothing.\n    });\n  }, intervalMs);\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\nfunction handleSubscriptions(room) {\n  var trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n  room._subscriptionFailures.forEach(function (error, trackSid) {\n    var trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n  trackSidsToTrackSignalings.forEach(function (trackSignaling) {\n    var trackId = room._subscribed.get(trackSignaling.sid);\n    if (!trackId || trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(function (trackReceiver) {\n        return trackSignaling.setTrackTransceiver(trackReceiver);\n      });\n    }\n  });\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var framesEncoded = trackResponse.framesEncoded,\n    packetsSent = trackResponse.packetsSent,\n    totalEncodeTime = trackResponse.totalEncodeTime,\n    totalPacketSendDelay = trackResponse.totalPacketSendDelay;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    var trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay') || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    var trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay') || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var estimatedPlayoutTimestamp = trackResponse.estimatedPlayoutTimestamp,\n    framesDecoded = trackResponse.framesDecoded,\n    jitterBufferDelay = trackResponse.jitterBufferDelay,\n    jitterBufferEmittedCount = trackResponse.jitterBufferEmittedCount,\n    totalDecodeTime = trackResponse.totalDecodeTime;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    var trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay') || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    var trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay') || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n  return activeIceCandidatePair;\n}\nmodule.exports = RoomV2;","map":{"version":3,"mappings":"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","names":["DominantSpeakerSignaling","require","NetworkQualityMonitor","NetworkQualitySignaling","RecordingV2","RoomSignaling","RemoteParticipantV2","StatsReport","TrackPrioritySignaling","TrackSwitchOffSignaling","RenderHintsSignaling","PublisherHintsSignaling","DEFAULT_SESSION_TIMEOUT_SEC","createBandwidthProfilePayload","defer","difference","filterObject","flatMap","oncePerTick","MovingAverageDelta","STATS_PUBLISH_INTERVAL_MS","__extends","localParticipant","initialState","transport","peerConnectionManager","options","Object","assign","session_timeout","RecordingSignaling","bandwidthProfile","sessionTimeout","statsPublishIntervalMs","setBandwidthProfile","signalingRegion","_b","audioProcessors","setSignalingRegion","includes","push","setAudioProcessors","setIceReconnectTimeout","_this","sid","name","getTrackReceiver","_getTrackReceiver","id","log","_log","defineProperties","_disconnectedParticipantRevisions","value","Map","_NetworkQualityMonitor","_lastBandwidthProfileRevision","bandwidthProfileRevision","writable","_mediaStatesWarningsRevision","_networkQualityMonitor","_networkQualityConfiguration","networkQualityConfiguration","_peerConnectionManager","_published","_publishedRevision","_RemoteParticipantV2","_subscribed","_subscribedRevision","_subscriptionFailures","_dominantSpeakerSignaling","_networkQualitySignaling","_renderHintsSignaling","_publisherHintsSignaling","_trackPrioritySignaling","_trackSwitchOffSignaling","_pendingSwitchOffStates","_transport","_trackReceiverDeferreds","mediaRegion","enumerable","media_region","_initTrackSwitchOffSignaling","_initDominantSpeakerSignaling","_initNetworkQualityMonitorSignaling","_initPublisherHintSignaling","handleLocalParticipantEvents","handlePeerConnectionEvents","handleTransportEvents","periodicallyPublishStats","_update","setEffectiveAdaptiveSimulcast","isSetup","RoomV2","connectionState","state","iceConnectionState","delete","deferred","get","trackReceivers","getTrackReceivers","trackReceiver","find","readyState","resolve","set","_getOrCreateTrackReceiverDeferred","error","didDisconnect","_super","_disconnect","call","_teardownNetworkQualityMonitor","disconnect","close","tracks","forEach","track","publishFailed","Error","promise","then","_deleteTrackReceiverDeferred","trackSid","initiallySwitchedOff","warn","trackSidsToTrackSignalings","participants","from","participant","participantState","self","_getInitialTrackSwitchOffState","priority","sendTrackPriorityUpdate","hint","setTrackHint","clearTrackHint","on","stateChanged","removeListener","revision","connectParticipant","getState","update","bandwidth_profile","publish","_maybeAddBandwidthProfile","_getState","peerConnectionState","peer_connections","roomState","subscribed","trackState","has","subscribedTrackSids_1","Set","filter","map","trackId","participantsToKeep","disconnectedParticipantRevision","_getOrCreateRemoteParticipant","add","type","handleSubscriptions","recording","published","connect","identity","channel","mediaSignaling","media_signaling","setup","label","states","updateMediaStates","hints","Promise","all","setPublisherHint","encodings","result","sendHintResponse","hintResponses","handleReplaced","kind","trackTransceiver","sendTrackReplaced","Array","values","tracksOff","tracksOn","debug","trackUpdates_1","isOn","setSwitchedOff","ex","setDominantSpeaker","loudestParticipantSid","networkQualityMonitor","setNetworkQualityLevel","level","levels","remoteLevels","start","stop","getStats","responses","_a","response","localAudioTrackStats","filterAndAddLocalTrackSids","localVideoTrackStats","remoteAudioTrackStats","filterAndAddRemoteTrackSids","remoteVideoTrackStats","filterAndAddTrackSids","idToSid","trackStats","reduce","trackStat","concat","roomV2","localTrackStats","remoteTrackStats","entries","localParticipantUpdated","_publishNewLocalParticipantState","renegotiate","trackSenders","setTrackSenders","signalingConnectionState","reconnecting","onDescription","description","_publishPeerConnectionState","dequeue","onCandidates","candidates","_addTrackReceiver","bind","emit","networkQualityLevel","intervalMs","movingAverageDeltas","oddPublishCount","interval","setInterval","stats","report","publishEvent","audioTrackStats","i","peerConnectionId","videoTrackStats","keys","prop","ssrc","movingAverageDeltaKeysToBeRemoved","key","activeIceCandidatePair","replaceNullsWithDefaults","onStateChanged","clearInterval","room","_getTrackSidsToTrackSignalings","trackSignaling","subscribeFailed","createTwilioError","code","message","isSubscribed","setTrackTransceiver","addAVSyncMetricsToLocalTrackStats","trackResponse","packetsSent","totalEncodeTime","totalPacketSendDelay","augmentedTrackStats","trackMovingAverageDeltas","framesEncoded","trackAvgEncodeDelayMovingAverageDelta","putSample","avgEncodeDelay","Math","round","trackAvgPacketSendDelayMovingAverageDelta","avgPacketSendDelay","addAVSyncMetricsToRemoteTrackStats","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","totalDecodeTime","estimatedPlayoutTimestamp","trackAvgDecodeDelayMovingAverageDelta","avgDecodeDelay","trackAvgJitterBufferDelayMovingAverageDelta","avgJitterBufferDelay","availableIncomingBitrate","availableOutgoingBitrate","bytesReceived","bytesSent","consentRequestsSent","currentRoundTripTime","lastPacketReceivedTimestamp","lastPacketSentTimestamp","nominated","readable","requestsReceived","requestsSent","responsesReceived","responsesSent","retransmissionsReceived","retransmissionsSent","totalRoundTripTime","transportId","localCandidate","candidateType","deleted","ip","port","protocol","url","remoteCandidate","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/signaling/v2/room.js"],"sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nconst DominantSpeakerSignaling = require('./dominantspeakersignaling');\nconst NetworkQualityMonitor = require('./networkqualitymonitor');\nconst NetworkQualitySignaling = require('./networkqualitysignaling');\nconst RecordingV2 = require('./recording');\nconst RoomSignaling = require('../room');\nconst RemoteParticipantV2 = require('./remoteparticipant');\nconst StatsReport = require('../../stats/statsreport');\nconst TrackPrioritySignaling = require('./trackprioritysignaling');\nconst TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\nconst RenderHintsSignaling = require('./renderhintssignaling');\nconst PublisherHintsSignaling = require('./publisherhintsignaling.js');\n\n\nconst {\n  constants: { DEFAULT_SESSION_TIMEOUT_SEC },\n  createBandwidthProfilePayload,\n  defer,\n  difference,\n  filterObject,\n  flatMap,\n  oncePerTick\n} = require('../../util');\n\nconst MovingAverageDelta = require('../../util/movingaveragedelta');\nconst { createTwilioError } = require('../../util/twilio-video-errors');\n\nconst STATS_PUBLISH_INTERVAL_MS = 10000;\n\n/**\n * @extends RoomSignaling\n */\nclass RoomV2 extends RoomSignaling {\n  constructor(localParticipant, initialState, transport, peerConnectionManager, options) {\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n\n    options = Object.assign({\n      DominantSpeakerSignaling,\n      NetworkQualityMonitor,\n      NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2,\n      TrackPrioritySignaling,\n      TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n\n    const { options: { signaling_region: signalingRegion, audio_processors: audioProcessors = [] } } = initialState;\n    localParticipant.setSignalingRegion(signalingRegion);\n\n\n    if (audioProcessors.includes('krisp')) {\n      // Note(mpatwardhan): we add rnnoise as allowed_processor to enable testing our pipeline e2e.\n      audioProcessors.push('rnnoise');\n    }\n\n    localParticipant.setAudioProcessors(audioProcessors);\n\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n\n    super(localParticipant, initialState.sid, initialState.name, options);\n\n    const getTrackReceiver = id => this._getTrackReceiver(id);\n    const log = this._log;\n\n    Object.defineProperties(this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _mediaStatesWarningsRevision: {\n        value: 0,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, { log })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(\n          getTrackReceiver,\n          localParticipant.networkQualityConfiguration,\n          { log }\n        )\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, { log }),\n      },\n      _publisherHintsSignaling: {\n        value: new PublisherHintsSignaling(getTrackReceiver, { log }),\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, { log }),\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, { log }),\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n\n    this._initTrackSwitchOffSignaling();\n    this._initDominantSpeakerSignaling();\n    this._initNetworkQualityMonitorSignaling();\n    this._initPublisherHintSignaling();\n\n    handleLocalParticipantEvents(this, localParticipant);\n    handlePeerConnectionEvents(this, peerConnectionManager);\n    handleTransportEvents(this, transport);\n    periodicallyPublishStats(this, transport, options.statsPublishIntervalMs);\n\n    this._update(initialState);\n\n    // NOTE(mpatwardhan) after initial state we know if publisher_hints are enabled or not\n    // if they are not enabled. we need to undo simulcast that was enabled with initial offer.\n    this._peerConnectionManager.setEffectiveAdaptiveSimulcast(this._publisherHintsSignaling.isSetup);\n  }\n\n  /**\n   * The PeerConnection state.\n   * @property {RTCPeerConnectionState}\n   */\n  get connectionState() {\n    return this._peerConnectionManager.connectionState;\n  }\n\n  /**\n   * The Signaling Connection State.\n   * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n   */\n  get signalingConnectionState() {\n    return this._transport.state === 'syncing'\n      ? 'reconnecting'\n      : this._transport.state;\n  }\n\n  /**\n   * The Ice Connection State.\n   * @property {RTCIceConnectionState}\n   */\n  get iceConnectionState() {\n    return this._peerConnectionManager.iceConnectionState;\n  }\n\n  /**\n   * @private\n   */\n  _deleteTrackReceiverDeferred(id) {\n    return this._trackReceiverDeferreds.delete(id);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateTrackReceiverDeferred(id) {\n    const deferred = this._trackReceiverDeferreds.get(id) || defer();\n    const trackReceivers = this._peerConnectionManager.getTrackReceivers();\n\n    // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n    const trackReceiver = trackReceivers.find(trackReceiver => trackReceiver.id === id && trackReceiver.readyState !== 'ended');\n\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n\n    return deferred;\n  }\n\n  /**\n   * @private\n   */\n  _addTrackReceiver(trackReceiver) {\n    const deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n    deferred.resolve(trackReceiver);\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _disconnect(error) {\n    const didDisconnect = super._disconnect.call(this, error);\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n      this._transport.disconnect();\n      this._peerConnectionManager.close();\n    }\n\n    this.localParticipant.tracks.forEach(track => {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n\n    return didDisconnect;\n  }\n\n  /**\n   * @private\n   */\n  _getTrackReceiver(id) {\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(trackReceiver => {\n      this._deleteTrackReceiverDeferred(id);\n      return trackReceiver;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _getInitialTrackSwitchOffState(trackSid) {\n    const initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n    this._pendingSwitchOffStates.delete(trackSid);\n    if (initiallySwitchedOff) {\n      this._log.warn(`[${trackSid}] was initially switched off! `);\n    }\n    return initiallySwitchedOff;\n  }\n\n\n  /**\n   * @private\n   */\n  _getTrackSidsToTrackSignalings() {\n    const trackSidsToTrackSignalings = flatMap(this.participants, participant => Array.from(participant.tracks));\n    return new Map(trackSidsToTrackSignalings);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateRemoteParticipant(participantState) {\n    const RemoteParticipantV2 = this._RemoteParticipantV2;\n    let participant = this.participants.get(participantState.sid);\n    const self = this;\n    if (!participant) {\n      participant = new RemoteParticipantV2(\n        participantState,\n        trackSid => this._getInitialTrackSwitchOffState(trackSid),\n        (trackSid, priority) => this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority),\n        (trackSid, hint) => this._renderHintsSignaling.setTrackHint(trackSid, hint),\n        trackSid => this._renderHintsSignaling.clearTrackHint(trackSid)\n      );\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n    return participant;\n  }\n\n  /**\n   * @private\n   */\n  _getState() {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  }\n\n  /**\n   * @private\n   */\n  _maybeAddBandwidthProfile(update) {\n    const { bandwidthProfile, bandwidthProfileRevision } = this.localParticipant;\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n    return update;\n  }\n  /**\n   * @private\n   */\n  _publishNewLocalParticipantState() {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  }\n\n  /**\n   * @private\n   */\n  _publishPeerConnectionState(peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  }\n\n  /**\n   * @private\n   */\n  _update(roomState) {\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(trackState => {\n        if (trackState.id) {\n          this._subscriptionFailures.delete(trackState.sid);\n          this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !this._subscriptionFailures.has(trackState.sid)) {\n          this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n\n      const subscribedTrackSids = new Set(roomState.subscribed.tracks\n        .filter(trackState => !!trackState.id)\n        .map(trackState => trackState.sid));\n\n      this._subscribed.forEach((trackId, trackSid) => {\n        if (!subscribedTrackSids.has(trackSid)) {\n          this._subscribed.delete(trackSid);\n        }\n      });\n    }\n\n    const participantsToKeep = new Set();\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    (roomState.participants || []).forEach(participantState => {\n      if (participantState.sid === this.localParticipant.sid) {\n        return;\n      }\n\n      // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n      const disconnectedParticipantRevision = this._disconnectedParticipantRevisions.get(participantState.sid);\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n\n      if (disconnectedParticipantRevision) {\n        this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n      const participant = this._getOrCreateRemoteParticipant(participantState);\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n\n    if (roomState.type === 'synced') {\n      this.participants.forEach(participant => {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n\n    handleSubscriptions(this);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    /* eslint camelcase:0 */\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(track => {\n        if (track.sid) {\n          this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n\n    if (roomState.participant) {\n      this.localParticipant.connect(\n        roomState.participant.sid,\n        roomState.participant.identity);\n    }\n\n    [\n      this._dominantSpeakerSignaling,\n      this._networkQualitySignaling,\n      this._trackPrioritySignaling,\n      this._trackSwitchOffSignaling,\n      this._renderHintsSignaling,\n      this._publisherHintsSignaling\n    ].forEach(mediaSignaling => {\n      const channel = mediaSignaling.channel;\n      if (!mediaSignaling.isSetup\n        && roomState.media_signaling\n        && roomState.media_signaling[channel]\n        && roomState.media_signaling[channel].transport\n        && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n\n    if (roomState.type === 'warning' && roomState.states &&\n      roomState.states.revision > this._mediaStatesWarningsRevision) {\n      this._mediaStatesWarningsRevision = roomState.states.revision;\n      this.localParticipant.updateMediaStates(roomState.states);\n    }\n\n    return this;\n  }\n\n  _initPublisherHintSignaling() {\n    this._publisherHintsSignaling.on('updated', (hints, id) => {\n      Promise.all(hints.map(hint => {\n        return this.localParticipant.setPublisherHint(hint.track, hint.encodings).then(result => {\n          return { track: hint.track, result };\n        });\n      })).then(hintResponses => {\n        this._publisherHintsSignaling.sendHintResponse({ id, hints: hintResponses });\n      });\n    });\n\n    const handleReplaced = track => {\n      if (track.kind === 'video') {\n        track.trackTransceiver.on('replaced', () => {\n          this._publisherHintsSignaling.sendTrackReplaced({ trackSid: track.sid });\n        });\n      }\n    };\n\n    // hook up for any existing and new tracks getting replaced.\n    Array.from(this.localParticipant.tracks.values()).forEach(track => handleReplaced(track));\n    this.localParticipant.on('trackAdded', track => handleReplaced(track));\n  }\n\n  _initTrackSwitchOffSignaling() {\n    this._trackSwitchOffSignaling.on('updated', (tracksOff, tracksOn) => {\n      try {\n        this._log.debug('received trackSwitch: ', { tracksOn, tracksOff });\n        const trackUpdates = new Map();\n        tracksOn.forEach(trackSid => trackUpdates.set(trackSid, true));\n        tracksOff.forEach(trackSid => {\n          if (trackUpdates.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            this._log.warn(`${trackSid} is DUPLICATED in both tracksOff and tracksOn list`);\n          }\n          trackUpdates.set(trackSid, false);\n        });\n        this.participants.forEach(participant => {\n          participant.tracks.forEach(track => {\n            const isOn = trackUpdates.get(track.sid);\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates.delete(track.sid);\n            }\n          });\n        });\n        // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n        trackUpdates.forEach((isOn, trackSid) => this._pendingSwitchOffStates.set(trackSid, !isOn));\n      } catch (ex) {\n        this._log.error('error processing track switch off:', ex);\n      }\n    });\n  }\n\n  _initDominantSpeakerSignaling() {\n    this._dominantSpeakerSignaling.on('updated', () => this.setDominantSpeaker(this._dominantSpeakerSignaling.loudestParticipantSid));\n  }\n\n  _initNetworkQualityMonitorSignaling() {\n    this._networkQualitySignaling.on('ready', () => {\n      const networkQualityMonitor = new this._NetworkQualityMonitor(this._peerConnectionManager, this._networkQualitySignaling);\n      this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', () => {\n        if (this.iceConnectionState === 'failed') {\n          return;\n        }\n        this.localParticipant.setNetworkQualityLevel(\n          networkQualityMonitor.level,\n          networkQualityMonitor.levels);\n        this.participants.forEach(participant => {\n          const levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n    this._networkQualitySignaling.on('teardown', () => this._teardownNetworkQualityMonitor());\n  }\n\n  _teardownNetworkQualityMonitor() {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n      this._networkQualityMonitor = null;\n    }\n  }\n\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n  getStats() {\n    return this._peerConnectionManager.getStats().then(responses =>\n      new Map(Array.from(responses).map(([id, response]) =>\n        [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(this, response.remoteVideoTrackStats)\n        })]\n      ))\n    );\n  }\n}\n\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce((trackStats, trackStat) => {\n    const trackSid = idToSid.get(trackStat.trackId);\n    return trackSid\n      ? [Object.assign({}, trackStat, { trackSid })].concat(trackStats)\n      : trackStats;\n  }, []);\n}\n\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  const idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(([sid, id]) => [id, sid]));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\n\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  const localParticipantUpdated = oncePerTick(() => {\n    roomV2._publishNewLocalParticipantState();\n  });\n\n  const renegotiate = oncePerTick(() => {\n    const trackSenders = flatMap(localParticipant.tracks, trackV2 => trackV2.trackTransceiver);\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n\n  roomV2.on('signalingConnectionStateChanged', () => {\n    const { localParticipant, signalingConnectionState } = roomV2;\n    const { identity, sid } = localParticipant;\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\n\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n\n  peerConnectionManager.on('connectionStateChanged', () => {\n    roomV2.emit('connectionStateChanged');\n  });\n\n  peerConnectionManager.on('iceConnectionStateChanged', () => {\n    roomV2.emit('iceConnectionStateChanged');\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n      roomV2.participants.forEach(participant => {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\n\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n      transport.removeListener('stateChanged', stateChanged);\n    }\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  const movingAverageDeltas = new Map();\n  let oddPublishCount = false;\n  const interval = setInterval(() => {\n    roomV2.getStats().then(stats => {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach((response, id) => {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        const report = new StatsReport(id, response, true /* prepareForInsights */);\n\n        // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas)),\n          localAudioTrackStats: report.localAudioTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas)),\n          localVideoTrackStats: report.localVideoTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas)),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas)),\n        });\n\n        // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n        const keys = flatMap([\n          'localAudioTrackStats',\n          'localVideoTrackStats',\n          'remoteAudioTrackStats',\n          'remoteVideoTrackStats'\n        ], prop => report[prop].map(({ ssrc, trackSid }) => `${trackSid}+${ssrc}`));\n        const movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(key => movingAverageDeltas.delete(key));\n\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          const activeIceCandidatePair = replaceNullsWithDefaults(\n            response.activeIceCandidatePair,\n            report.peerConnectionId);\n\n          transport.publishEvent(\n            'quality',\n            'active-ice-candidate-pair',\n            'info',\n            activeIceCandidatePair);\n        }\n      });\n    }, () => {\n      // Do nothing.\n    });\n  }, intervalMs);\n\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\n\nfunction handleSubscriptions(room) {\n  const trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n\n  room._subscriptionFailures.forEach((error, trackSid) => {\n    const trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n\n  trackSidsToTrackSignalings.forEach(trackSignaling => {\n    const trackId = room._subscribed.get(trackSignaling.sid);\n    if (!trackId || (trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId)) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(trackReceiver => trackSignaling.setTrackTransceiver(trackReceiver));\n    }\n  });\n}\n\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  const {\n    framesEncoded,\n    packetsSent,\n    totalEncodeTime,\n    totalPacketSendDelay\n  } = trackResponse;\n  const augmentedTrackStats = Object.assign({}, trackStats);\n  const key = `${trackStats.trackSid}+${trackStats.ssrc}`;\n  const trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    const trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay')\n      || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    const trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay')\n      || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  const {\n    estimatedPlayoutTimestamp,\n    framesDecoded,\n    jitterBufferDelay,\n    jitterBufferEmittedCount,\n    totalDecodeTime\n  } = trackResponse;\n  const augmentedTrackStats = Object.assign({}, trackStats);\n  const key = `${trackStats.trackSid}+${trackStats.ssrc}`;\n  const trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    const trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay')\n      || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    const trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay')\n      || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n\n  return activeIceCandidatePair;\n}\n\nmodule.exports = RoomV2;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}