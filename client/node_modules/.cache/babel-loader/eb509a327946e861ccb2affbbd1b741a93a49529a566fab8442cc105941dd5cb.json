{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar EventEmitter = require('events').EventEmitter;\n/**\n * @classdesc A {@link DataTransport} implements {@link MediaSignalingTransport}\n *   in terms of an RTCDataChannel.\n * @extends EventEmitter\n * @implements MediaSignalingTransport\n * @emits DataTransport#message\n */\nvar DataTransport = /** @class */function (_super) {\n  __extends(DataTransport, _super);\n  /**\n   * Construct a {@link DataTransport}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  function DataTransport(dataChannel) {\n    var _this = _super.call(this) || this;\n    Object.defineProperties(_this, {\n      _dataChannel: {\n        value: dataChannel\n      },\n      _messageQueue: {\n        value: []\n      }\n    });\n    dataChannel.addEventListener('open', function () {\n      _this._messageQueue.splice(0).forEach(function (message) {\n        return _this._publish(message);\n      });\n    });\n    dataChannel.addEventListener('message', function (_a) {\n      var data = _a.data;\n      try {\n        var message = JSON.parse(data);\n        _this.emit('message', message);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    _this.publish({\n      type: 'ready'\n    });\n    return _this;\n  }\n  /**\n   * @param message\n   * @private\n   */\n  DataTransport.prototype._publish = function (message) {\n    var data = JSON.stringify(message);\n    try {\n      this._dataChannel.send(data);\n    } catch (error) {\n      // Do nothing.\n    }\n  };\n  /**\n   * Publish a message. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} message\n   * @returns {boolean}\n   */\n  DataTransport.prototype.publish = function (message) {\n    var dataChannel = this._dataChannel;\n    if (dataChannel.readyState === 'closing' || dataChannel.readyState === 'closed') {\n      return false;\n    }\n    if (dataChannel.readyState === 'connecting') {\n      this._messageQueue.push(message);\n      return true;\n    }\n    this._publish(message);\n    return true;\n  };\n  return DataTransport;\n}(EventEmitter);\n/**\n * The {@link DataTransport} received a message.\n * @event DataTransport#message\n * @param {object} message\n */\nmodule.exports = DataTransport;","map":{"version":3,"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEJ,gBAAY,GAAKA,OAAO,CAAC,QAAQ,CAAC,aAAtB;AAEpB;;;;;;;AAOA;EAA4BC;EAC1B;;;;EAIA,uBAAYC,WAAW;IAAvB,YACEC,iBAAO;IAEPC,MAAM,CAACC,gBAAgB,CAACC,KAAI,EAAE;MAC5BC,YAAY,EAAE;QACZC,KAAK,EAAEN;OACR;MACDO,aAAa,EAAE;QACbD,KAAK,EAAE;;KAEV,CAAC;IAEFN,WAAW,CAACQ,gBAAgB,CAAC,MAAM,EAAE;MACnCJ,KAAI,CAACG,aAAa,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,iBAAO;QAAI,YAAI,CAACC,QAAQ,CAACC,OAAO,CAAC;MAAtB,CAAsB,CAAC;IACzE,CAAC,CAAC;IAEFZ,WAAW,CAACQ,gBAAgB,CAAC,SAAS,EAAE,UAACK,EAAQ;UAANC,IAAI;MAC7C,IAAI;QACF,IAAMF,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC;QAChCV,KAAI,CAACa,IAAI,CAAC,SAAS,EAAEL,OAAO,CAAC;OAC9B,CAAC,OAAOM,KAAK,EAAE;QACd;MAAA;IAEJ,CAAC,CAAC;IAEFd,KAAI,CAACe,OAAO,CAAC;MAAEC,IAAI,EAAE;IAAO,CAAE,CAAC;;EACjC;EAEA;;;;EAIAC,gCAAQ,GAAR,UAAST,OAAO;IACd,IAAME,IAAI,GAAGC,IAAI,CAACO,SAAS,CAACV,OAAO,CAAC;IACpC,IAAI;MACF,IAAI,CAACP,YAAY,CAACkB,IAAI,CAACT,IAAI,CAAC;KAC7B,CAAC,OAAOI,KAAK,EAAE;MACd;IAAA;EAEJ,CAAC;EAED;;;;;;EAMAG,+BAAO,GAAP,UAAQT,OAAO;IACb,IAAMZ,WAAW,GAAG,IAAI,CAACK,YAAY;IACrC,IAAIL,WAAW,CAACwB,UAAU,KAAK,SAAS,IAAIxB,WAAW,CAACwB,UAAU,KAAK,QAAQ,EAAE;MAC/E,OAAO,KAAK;;IAEd,IAAIxB,WAAW,CAACwB,UAAU,KAAK,YAAY,EAAE;MAC3C,IAAI,CAACjB,aAAa,CAACkB,IAAI,CAACb,OAAO,CAAC;MAChC,OAAO,IAAI;;IAEb,IAAI,CAACD,QAAQ,CAACC,OAAO,CAAC;IACtB,OAAO,IAAI;EACb,CAAC;EACH,oBAAC;AAAD,CAAC,CAhE2Bc,YAAY;AAkExC;;;;;AAMAC,MAAM,CAACC,OAAO,GAAGP,aAAa","names":["require","__extends","dataChannel","_super","Object","defineProperties","_this","_dataChannel","value","_messageQueue","addEventListener","splice","forEach","_publish","message","_a","data","JSON","parse","emit","error","publish","type","DataTransport","stringify","send","readyState","push","EventEmitter","module","exports"],"sources":["/Users/aarushisingh/Projects/counteroffer/client/node_modules/twilio-video/lib/data/transport.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\n\n/**\n * @classdesc A {@link DataTransport} implements {@link MediaSignalingTransport}\n *   in terms of an RTCDataChannel.\n * @extends EventEmitter\n * @implements MediaSignalingTransport\n * @emits DataTransport#message\n */\nclass DataTransport extends EventEmitter {\n  /**\n   * Construct a {@link DataTransport}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  constructor(dataChannel) {\n    super();\n\n    Object.defineProperties(this, {\n      _dataChannel: {\n        value: dataChannel\n      },\n      _messageQueue: {\n        value: []\n      }\n    });\n\n    dataChannel.addEventListener('open', () => {\n      this._messageQueue.splice(0).forEach(message => this._publish(message));\n    });\n\n    dataChannel.addEventListener('message', ({ data }) => {\n      try {\n        const message = JSON.parse(data);\n        this.emit('message', message);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n\n    this.publish({ type: 'ready' });\n  }\n\n  /**\n   * @param message\n   * @private\n   */\n  _publish(message) {\n    const data = JSON.stringify(message);\n    try {\n      this._dataChannel.send(data);\n    } catch (error) {\n      // Do nothing.\n    }\n  }\n\n  /**\n   * Publish a message. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} message\n   * @returns {boolean}\n   */\n  publish(message) {\n    const dataChannel = this._dataChannel;\n    if (dataChannel.readyState === 'closing' || dataChannel.readyState === 'closed') {\n      return false;\n    }\n    if (dataChannel.readyState === 'connecting') {\n      this._messageQueue.push(message);\n      return true;\n    }\n    this._publish(message);\n    return true;\n  }\n}\n\n/**\n * The {@link DataTransport} received a message.\n * @event DataTransport#message\n * @param {object} message\n */\n\nmodule.exports = DataTransport;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}